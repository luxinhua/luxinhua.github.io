{"meta":{"title":"XINHUALU'S BLOG","subtitle":"","description":"","author":"XinHua Lu","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-02-07T21:03:27.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"books","date":"2021-02-07T21:03:20.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-07T21:01:18.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2021-02-07T21:03:27.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"repository","date":"2021-02-07T21:03:12.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-07T21:00:10.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"BiosInterFace update 的思路","slug":"bios/06_Biso_interface_update","date":"2021-02-08T11:45:23.118Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/08/bios/06_Biso_interface_update/","link":"","permalink":"http://example.com/2021/02/08/bios/06_Biso_interface_update/","excerpt":"","text":"概念 PMFW专门控制CLK/power的一个bin , SMUBIOS的菜单控制，设置值，分发值到具体的模块SMU和PMFW通过msg机制更新biosinterfaceTable的结构体来通信。 MSG机制一端，向某个寄存器写入消息ID，消息参数，poll 等待response，另一端是硬件中断，拿到硬件中断后，处理写入response消息。","categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"}],"tags":[]},{"title":"git 常用命令列表","slug":"git/05_git_normal_cmd","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/07/git/05_git_normal_cmd/","link":"","permalink":"http://example.com/2021/02/07/git/05_git_normal_cmd/","excerpt":"","text":"git config 配置 Git 的相关参数。 Git 一共有3个配置文件： 仓库级的配置文件：在仓库的 .git/.gitconfig，该配置文件只对所在的仓库有效。 全局配置文件：Mac 系统在 ~/.gitconfig，Windows 系统在 C:\\Users&lt;用户名&gt;.gitconfig。 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 /usr/local/git）的 etc 文件夹中的 gitconfig。 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 查看配置信息# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -l# 查看当前生效的配置信息$ git config -l# 编辑配置文件# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -e# 添加配置项# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;# 获取配置项$ git config &lt;--local | --global | --system&gt; --get &lt;name&gt;# 删除配置项$ git config &lt;--local | --global | --system&gt; --unset &lt;name&gt;# 配置提交记录中的用户信息$ git config --global user.name &lt;用户名&gt;$ git config --global user.email &lt;邮箱地址&gt;# 更改Git缓存区的大小# 如果提交的内容较大，默认缓存较小，提交会失败# 缓存大小单位：B，例如：524288000（500MB）$ git config --global http.postBuffer &lt;缓存大小&gt;# 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态$ git config --global color.ui true# 配置可以缓存密码，默认缓存时间15分钟$ git config --global credential.helper cache# 配置密码的缓存时间# 缓存时间单位：秒$ git config --global credential.helper &#x27;cache --timeout=&lt;缓存时间&gt;&#x27;# 配置长期存储密码$ git config --global credential.helper store# 配置忽略文件权限的改变$ git config --global core.filemode false git clone 123456# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下$ git clone &lt;远程仓库的网址&gt;# 指定本地仓库的目录$ git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;# -b 指定要克隆的分支，默认是master分支$ git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt; git remote 12345678910111213141516171819# 列出已经存在的远程仓库$ git remote# 列出远程仓库的详细信息，在别名后面列出URL地址$ git remote -v$ git remote --verbose# 添加远程仓库$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;# 修改远程仓库的别名$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;# 删除指定名称的远程仓库$ git remote remove &lt;远程仓库的别名&gt;# 修改远程仓库的 URL 地址$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt; git branch 1234567891011121314151617181920# 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出$ git branch# 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出$ git branch -v# 创建新分支，新的分支基于上一次提交建立$ git branch &lt;分支名&gt;# 修改分支名称# 如果不指定原分支名称则为当前所在分支$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 强制修改分支名称$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 删除指定的本地分支$ git branch -d &lt;分支名称&gt;# 强制删除指定的本地分支$ git branch -D &lt;分支名称&gt; git checkout 123456789101112# 切换到已存在的指定分支$ git checkout &lt;分支名称&gt;# 创建并切换到指定的分支，保留所有的提交记录# 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并$ git checkout -b &lt;分支名称&gt;# 创建并切换到指定的分支，删除所有的提交记录$ git checkout --orphan &lt;分支名称&gt;# 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响$ git checkout &lt;文件路径&gt; git cherry-pick 12# 把已经提交的记录合并到当前分支$ git cherry-pick &lt;commit ID&gt; git fetch 123456# 将远程仓库所有分支的最新版本全部取回到本地$ git fetch &lt;远程仓库的别名&gt;# 将远程仓库指定分支的最新版本取回到本地$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; git diff 12345678910111213141516171819# 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改$ git diff# 比较暂存区中的文件和上次提交时的差异$ git diff --cached$ git diff --staged# 比较当前文件和上次提交时的差异$ git diff HEAD# 查看从指定的版本之后改动的内容$ git diff &lt;commit ID&gt;# 比较两个分支之间的差异$ git diff &lt;分支名称&gt; &lt;分支名称&gt;# 查看两个分支分开后各自的改动内容$ git diff &lt;分支名称&gt;...&lt;分支名称&gt; git pull 从远程仓库获取最新版本并合并到本地。首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。 12# 从远程仓库获取最新版本。$ git pull git push 123456# 把本地仓库的分支推送到远程仓库的指定分支$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;# 删除指定的远程仓库的分支$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt; git reset 12345678910111213141516# 重置暂存区，但文件不受影响# 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件# 没有指定 commit ID 则默认为当前 HEAD$ git reset [&lt;文件路径&gt;]$ git reset --mixed [&lt;文件路径&gt;]# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改$ git reset &lt;commit ID&gt;$ git reset --mixed &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改# 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;$ git reset --soft &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了$ git reset --hard &lt;commit ID&gt; git tag 123456789101112131415161718192021222324# 打印所有的标签$ git tag# 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]# 添加带有描述信息的附注标签，可以指定之前的提交记录$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]# 切换到指定的标签$ git checkout &lt;标签名称&gt;# 查看标签的信息$ git show &lt;标签名称&gt;# 删除指定的标签$ git tag -d &lt;标签名称&gt;# 将指定的标签提交到远程仓库$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;# 将本地所有的标签全部提交到远程仓库$ git push &lt;远程仓库的别名&gt; –tags git mv 12# 重命名指定的文件或者文件夹$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt; git rm 12345678# 移除跟踪指定的文件，并从本地仓库的文件夹中删除$ git rm &lt;文件路径&gt;# 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除$ git rm -r &lt;文件夹路径&gt;# 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件$ git rm --cached git 删除远程不存在的分支 ( 协同开发时，其他人删了远程分支 ) 123456# 使用 pull 命令，添加 -p 参数$ git pull -p# 等同于下面的命令$ git fetch -p$ git fetch --prune origin","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[]},{"title":"HEXO Hacker 主题中文说明","slug":"hexo/02_hexo_中文手册","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/07/hexo/02_hexo_中文手册/","link":"","permalink":"http://example.com/2021/02/07/hexo/02_hexo_%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/","excerpt":"","text":"Hacker | English Docs Hacker 是一款专注于写作的简洁博客主题。在如此讲究复杂排版的趋势下，选择回归本源，专注于写作这件事。 一开始是 moyo 为 Wordpress 所创作的一个主题，由 CodeDaraW 移植到 Hexo 。 Demo参考我的博客：DaraW。可以使用 TravisCI 实现自动化部署，配置参考 CodeDaraW/Blog。 安装获得主题文件， git clone 或者 download zip 均可； 在 themes 文件夹中创建文件夹 Hacker ，将主题文件都复制粘贴至 Hacker 文件夹； 然后在hexo全局配置文件 _config.yml 中应用主题： 1theme: Hacker 这样就安装好了，开始享受吧~ 注意：版本更新后建议在hexo生成前执行一次 hexo clean ，清除以前的缓存，避免带来的一些莫名其妙的问题。 配置启用评论和谷歌分析参考 _config.example.yml 配置案例，创建主题配置文件 _config.yml 并编辑： 1234567891011121314151617181920212223242526272829# gitmentgitment: falsegitment_owner:gitment_repo:gitment_client_id:gitment_client_secret:# gitalkgitalk: falsegitalk_owner:gitalk_admin: []gitalk_repo:gitalk_client_id:gitalk_client_secret:# valine commentvaline: falseleancloud_id:leancloud_key:# disqus commentdisqus: falsedisqus_shortname:# google analyticsgoogleTrackId:# baidu analyticsbaiduTrackId: gitment: boolean，是否开启 Gitment 评论gitment_owner: string，你的 GitHub IDgitment_repo: string，存储评论的 Repogitment_client_id: string，你的 Client IDgitment_client_secret: string，你的 Client Secret gitalk: boolean，是否开启 Gitalk 评论gitalk_owner: string，你的 GitHub IDgitalk_admin: array，所有管理员 GitHub IDgitalk_repo: string，存储评论的 Repogitalk_client_id: string，你的 Client IDgitalk_client_secret: string，你的 Client Secret valine: boolean，是否开启 Valine 评论leancloud_id: string，你的 LeanCloud IDleancloud_key: string，你的 LeanCloud Key disqus: boolean，是否开启 Disqus 评论；disqus_shortname: string，你的 Disqus Site Shortname。 googleTrackId: string，为谷歌分析的个人ID，留空则为不使用谷歌分析。baiduTrackId: string, 为百度统计的个人ID,留空则为不是用谷歌分析。 启用分类和标签页面分类功能：执行 hexo new page categories ，然后修改生成的 source/categories/index.md ： 1234title: categoriesdate: 2017-01-30 19:16:17layout: &quot;categories&quot;--- 如果你需要关闭该页的评论，可以添加一行 comments: false；title 对应的则是该页的标题。 标签功能：同理，执行 hexo new page tags ，然后修改生成的 source/tags/index.md ： 1234title: tagsdate: 2017-01-30 19:16:17layout: &quot;tags&quot;--- 配置同分类功能。 在菜单中添加链接：编辑主题的 _config.yml ，在 menu 中添加 Categories: /categories 和 Tags: /tags，如下： 12345menu: Home: / Archives: /archives Categories: /categories Tags: /tags 协议GNU GPL(General Public License) v2.0","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"hack_binary_example","slug":"liveoverflow/hack_binary_example","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/07/liveoverflow/hack_binary_example/","link":"","permalink":"http://example.com/2021/02/07/liveoverflow/hack_binary_example/","excerpt":"","text":"","categories":[{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"}],"tags":[]},{"title":"MarkDown Language Reference","slug":"markdown/03_language_markdown_ref","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/07/markdown/03_language_markdown_ref/","link":"","permalink":"http://example.com/2021/02/07/markdown/03_language_markdown_ref/","excerpt":"","text":"一级标题 二级标题 三级标题 四级标题 五级标题 ###### 六级标题 代码块 表格 | 单元格 | 单元格 | 红色字体 注释 ~~~ 任务列表 - [x] 任务二 已做任务 - + 空格 + [x] 换行 (后面空2格) 空行 对齐方式 斜体、粗体、删除线、下划线、背景高亮 超链接、页内链接、自动链接 注脚 自动链接 插图片 多级引用 字体、字号、颜色 流程图 分割线 HTML表单 特殊字符 目录 Markdown All in One: Create Table of Contents标题一级标题二级标题三级标题四级标题五级标题六级标题 代码块$符，加行号 1$ int a = 4 ; VS 1int a = 4 ; 表格 表头 表头 单元格 单元格 单元格 单元格 红色字体 注释123&lt;div style=&#x27;display: none&#x27;&gt;哈哈我是注释，不会在浏览器中显示。&lt;/div&gt; 任务列表 任务一 未做任务 - + 空格 + [ ] 任务二 已做任务 - + 空格 + [x] 换行 (后面空2格)nihaofaweafe 空行在编辑的时候有多少个空行(只要这一行只有回车或者space没有其他的字符就算空行)，在渲染之后，只隔着一行。 对齐方式行中心对齐 行左对齐 行右对齐 斜体、粗体、删除线、下划线、背景高亮斜体或斜体粗体加粗斜体删除线++下划线++==背景高亮== 超链接、页内链接、自动链接 方法一[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字，链接地址与title前有一个空格。 作者：择势量投链接：https://www.jianshu.com/p/ebe52d2d468f来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。欢迎阅读 择势勤 方法二我经常去的几个网站Google、Leanote。 注脚使用 Markdown^1可以效率的书写文档, 直接转换成 HTML[^2]。 [^2]:HyperText Markup Language 超文本标记语言 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;http://example.com/&gt; &emsp;&emsp;&lt;&#97;&#x64;&#x64;&#114;&#101;&#x73;&#x73;&#64;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;&gt; 插图片 格式: 多级引用 请问 Markdwon 怎么用？ - 小白自己看教程！ - 愤青教程在哪？ - 小白 字体、字号、颜色我是黑体字我是微软雅黑我是华文彩云黑体graynull 流程图12graph LRA--&gt;B 123sequenceDiagramA-&gt;&gt;B: How are you?B-&gt;&gt;A: Great! 分割线 HTML表单 值班人员 星期一 星期二 星期三 李强 张明 王平 特殊字符 表头 表头 单元格 单元格 单元格 单元格 ｜特殊字符 | 描述 | 字符的代| | —- | —- | —- |｜ | 空格符 | &nbsp;|｜&lt; | 小于号 | &lt; |｜ &gt; | 大于号 | &gt; |｜&amp; | 和号 | &amp;|｜￥ | 人民币 | &yen;|｜© | 版权 | &copy;|｜® | 注册商标 | &reg;|｜°C | 摄氏度 | &deg;|｜± | 正负号 | &plusmn;|｜× | 乘号 | &times;|｜÷ | 除号 | &divide;|｜² | 平方（上标²）| &sup2;|｜³ | 立方（上标³）| &sup3;|","categories":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/categories/markdown/"}],"tags":[]},{"title":"Hello World","slug":"test/00_hello_world","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/07/test/00_hello_world/","link":"","permalink":"http://example.com/2021/02/07/test/00_hello_world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"http://example.com/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"Linux kernel feature --- workquence","slug":"test/01_first_article","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/07/test/01_first_article/","link":"","permalink":"http://example.com/2021/02/07/test/01_first_article/","excerpt":"","text":"workquence fawefaeani: fawefawe","categories":[{"name":"test","slug":"test","permalink":"http://example.com/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"UEFI Protocol 机制","slug":"uefi/04_UFEI_protocol","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T11:45:23.118Z","comments":true,"path":"2021/02/07/uefi/04_UFEI_protocol/","link":"","permalink":"http://example.com/2021/02/07/uefi/04_UFEI_protocol/","excerpt":"","text":"Protocol GUID是一条链表，每个节点是就是一个GUID，一个GUID必须挂一条 Protocol.","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]}],"categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/categories/markdown/"},{"name":"test","slug":"test","permalink":"http://example.com/categories/test/"},{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]}
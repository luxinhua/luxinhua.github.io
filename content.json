{"meta":{"title":"XINHUALU'S BLOG","subtitle":"","description":"","author":"XinHua Lu","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-02-07T21:03:27.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"books","date":"2021-02-07T21:03:20.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-07T21:01:18.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2021-02-07T21:03:27.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"repository","date":"2021-02-07T21:03:12.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-07T21:00:10.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"BiosInterFace update 的思路","slug":"bios/06_Biso_interface_update","date":"2021-06-04T09:21:26.545Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/06/04/bios/06_Biso_interface_update/","link":"","permalink":"http://example.com/2021/06/04/bios/06_Biso_interface_update/","excerpt":"","text":"概念 PMFW专门控制CLK/power的一个bin , SMUBIOS的菜单控制，设置值，分发值到具体的模块SMU和PMFW通过msg机制更新biosinterfaceTable的结构体来通信。 MSG机制一端，向某个寄存器写入消息ID，消息参数，poll 等待response，另一端是硬件中断，拿到硬件中断后，处理写入response消息。","categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"}],"tags":[]},{"title":"","slug":"idea/远控模块","date":"2021-06-04T09:21:26.545Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/06/04/idea/远控模块/","link":"","permalink":"http://example.com/2021/06/04/idea/%E8%BF%9C%E6%8E%A7%E6%A8%A1%E5%9D%97/","excerpt":"","text":"手机程控模块软件zephyr 8266驱动 MQTT协议移植 thread1 : MQTT 接收事件 thread2：MQTT 发送事件 用户APP功能自定义 硬件stm32f0 嵌入式主控端8266模块server终端，控制端XMind - Trial Version","categories":[],"tags":[]},{"title":"BIOS protect mode 总结","slug":"bios/00_bios_protect_mode_enable_flow","date":"2021-06-04T09:21:26.393Z","updated":"2021-06-04T09:21:26.393Z","comments":true,"path":"2021/06/04/bios/00_bios_protect_mode_enable_flow/","link":"","permalink":"http://example.com/2021/06/04/bios/00_bios_protect_mode_enable_flow/","excerpt":"","text":"保护模式流程： 1. 准备GDT。 2. 用lgdt加载gdtr。 3. 打开A20。 4. 置cr0的PE位。 5. 跳转，进入保护模式。 汇编流程 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104; Save BIST state in EAXmov ebp, eax ; BspApCheckmov ecx, APIC_BASE_ADDRESS ; MSR:0000_001Brdmsr // 读取ecx地址中的值，赋给 edx, eax( low 16 bit ) /* BSC: boot strap core. Read-write,Volatile. Reset: X. 0=The core is not the boot core of the BSP. 1=The core is the boot core of the BSP.*/ // 找到最先启动的核bt eax, APIC_BSC ; Is this the BSC? APIC_BSC = 8, bt,检测某一位是否被置位， 这里就是检测第8位 mov esi, OFFSET GdtDesc // 初始化GDT把GDT地址赋给esi. GdtDesc: ; GDT descriptor OffsetGDTDesc EQU $ - Flat32Start DW GDT_SIZE - 1 ; GDT limit DD OFFSET BootGDTtable ; GDT base address 汇编定义了 BootGDTtable， 里面有数据段，代码段等各段定义 DB 66h // 本意是存储一个值为66H, 但是这里是80386芯片BUG 引入的命令用于切换16/32 位， 66 8b c3 32位机器码命令 8b c3 16位的命令/* 1. fword表示操作的是32位的地址 ， （ 配置上面的66 命令，确保是32位操作 ？） 2. 之前包GDT的地址赋给了esi , si是esi的低16位， 3， 这条命令是把，esi 低16位赋给GDTR寄存器，方便其他地方调用*/lgdt fword ptr cs:[si] /* 读出CR0(32位的控制寄存器)到eax ； [0] PE protect enable 是否启动保护模式 [1] MP moniter coprocessor 监控协处理器 [2] EM emulate coprocessor 模拟协处理器 = 1 无法使用协处理器 [3] TS task switch, 任务完成置1 ， 置1后无法使用协处理器 [4] 微处理器的拓展位，处理器类型 287协处理器，387浮点协处理器 [31] 分页使能，是否使用page机制*/mov eax, cr0 ; Get control register 0/* 启动保护模式 启动协处理器*/or eax, 00000003h ; Set PE bit (bit #0) &amp; MP bit (bit #1)mov cr0, eax ; Activate protected mode/* 读出CR４ [0] VME virtaul-8086 mode extensions 给运行 invirtual-8086的软件硬件加速 [1] PVI protect-mode virtaul interrupt support. ( 中断反应在 RFLAGS 寄存器红的 VIF/VIP 2个bit中 ) [2] TSD time-stamp disable 0/1 表示是否可以读取 RDTSC/RDTSCP [3] DE Debug extension , enable IO breakpoint. [4] PSE page-size extension [5] PAE 物理地址拓展， 使能的话，支持2M的超级页 [6] MCE machine-check enable [7] PGE page global enable [8] PCE performance-monitoring counter enable [9] OSFXSR 256/128bit media 指令使能 [10] OSXMMEXCPT enable 处理 256/128bit media 指令异常 */mov eax, cr4 ; Get control register 4or eax, 00000600h ; Set OSFXSR bit (bit #9) &amp; OSXMMEXCPT bit (bit #10)/* 使能这俩位 [9] OSFXSR 256/128bit media 指令使能 [10] OSXMMEXCPT enable 处理 256/128bit media 指令异常 */mov cr4, eax// 段初始化mov ax, SYS_DATA_SEL // 复制申请的系统数据段的地址给ax ; System data segment descriptor SYS_DATA_SEL equ $ - GDT_BASE ; Selector [0x18] DW 0FFFFh ; limit 0xFFFFF DW 0 ; base 0 DB 0 DB 093h ; present, ring 0, data, expand-up, not-writable DB 0CFh ; page-granular, 32-bit DB 0 // 同样的地址赋给各个段寄存器mov ds, axmov es, axmov fs, axmov gs, axmov ss, ax // 目前前面都是在protect 16模式下 ; Go to Protected32 mov esi, offset NemInitLinearAddress NemInitLinearAddress LABEL FWORD // 没有定义东西jmp fword ptr cs:[si] // 这里是个逻辑地址，","categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"}],"tags":[]},{"title":"BIOS protect mode 总结","slug":"bios/01_PCie_summary","date":"2021-06-04T09:21:26.393Z","updated":"2021-06-04T09:21:26.393Z","comments":true,"path":"2021/06/04/bios/01_PCie_summary/","link":"","permalink":"http://example.com/2021/06/04/bios/01_PCie_summary/","excerpt":"","text":"base Pcie 256 bus 每条bus 挂 32 devcie 每个设备有 8 func 每个设备空间有 PCI 256Byte PCIE 4K 所以PCIE 总共大小是， ４K * 256 * 32 * 8 = 256 K Byte = 256 M PCIE 配置空间也可以 mem map / IO map. IO map/访问： 只能PCIE 前256Byte， 后面的要用MMap 访问 example (IO access): 1 /*Access PCI Config Space in IO method*/ 2 Address = BIT31|((BUS &amp; 0XFF)&lt;&lt; 16)|((DEV &amp; 0x1F)&lt;&lt;11)|((Fun &amp; 0x7) &lt;&lt; 8); 3 IoWrite32(0xCF8, address); //将要读取的地址写入到CF8 4 Date32 = IoRead32(0xcfc); //从CFC端口读出address的数据 mem map/访问: example: 1 /*Write date*/ 2 MmioWrite32(PcieBaseAdd + Bus&lt;&lt;16 + Dev&lt;&lt;11 + Fun&lt;&lt;8 + offset, date); //PcieBaseAdd为PCIE在内存中的基地址 4 /*Read date*/ 5 Value = MmioRead32(PcieBaseAdd + Bus&lt;&lt;16 + Dev&lt;&lt;11 + Fun&lt;&lt;8 + offset); 配置空间（ 普通设备 ）位说明： PCIe 桥 （ 透明桥 ） 连接在PCIe 接口上的一个设备，只是配置空间和普通PCIE 设备不同，桥设备只有在遍历设备时才配置，不需要专门的驱动，所以叫透明桥 PCI桥的配置空间在前16个字节的格式和普通PCI设备并无区别，另外，桥还保留了普通设备的前两个BAR空间。所以从配置空间的0x18开始有了桥设备自身的配置格式 各种地址类型： 1. Pcie 空间： GnbLibPciRead","categories":[{"name":"Pcie","slug":"Pcie","permalink":"http://example.com/categories/Pcie/"}],"tags":[]},{"title":"BIOS 各种流程","slug":"bios/02_bios_flow","date":"2021-06-04T09:21:26.393Z","updated":"2021-06-04T09:21:26.393Z","comments":true,"path":"2021/06/04/bios/02_bios_flow/","link":"","permalink":"http://example.com/2021/06/04/bios/02_bios_flow/","excerpt":"","text":"reference file list ATBB-Memory_Protection_in_UEFI_BIOS.pdf EDK_II_Secure_Coding_Guide.pdf edk2-BuildSpecification.pdf edk2-CCodingStandardsSpecification.pdf edk2-DecSpecification.pdf edk2-DscSpecification.pdf edk2-FdfSpecification.pdf edk2-IdfSpecification.pdf edk2-PcdSpecification.pdf edk2-UniSpecification.pdf edk2-VfrSpecification.pdf edk2-MetaDataExpressionSyntaxSpecification.pdf edk2-PythonDevelopmentProcessSpecification.pdf edk2-TemplateSpecification.pdf UEFI_Driver_HII_Win_Lab_Guide.pdf UEFI_Driver_HII_Linux_Lab_Guide.pdf edk2-UefiDriverWritersGuide-master.pdf Understanding_UEFI_Secure_Boot_Chain.pdf","categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"}],"tags":[]},{"title":"HEXO Hacker 主题中文说明","slug":"dev_utils/02_python_dev_lib_cmd_parse","date":"2021-04-23T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/04/23/dev_utils/02_python_dev_lib_cmd_parse/","link":"","permalink":"http://example.com/2021/04/23/dev_utils/02_python_dev_lib_cmd_parse/","excerpt":"","text":"demo 123456789101112import argparseparser = argparse.ArgumentParser(&#x27;introduce how to use&#x27;)#创建一个解析器parser.add_argument(&#x27;integers&#x27;, #必选参数 metavar=&#x27;number&#x27;, #&#x27;usage&#x27;显示成&#x27;number&#x27; type=int, #整形变量 nargs=&#x27;+&#x27;, #至少有一个参数值 help=&#x27;an inter for the accumulator&#x27;)#帮助文档显示parser.add_argument(&#x27;--test-para&#x27;,#可选参数 required=False,#是否必须携带 default=&#x27;this is just a test&#x27;,#默认值 help=&#x27;wirte some instruction here&#x27;)#帮助文档args = parser.parse_args()#解析print(args)","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"HEXO Hacker 主题中文说明","slug":"dev_utils/03_python_dev_lib_进度","date":"2021-04-23T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/04/23/dev_utils/03_python_dev_lib_进度/","link":"","permalink":"http://example.com/2021/04/23/dev_utils/03_python_dev_lib_%E8%BF%9B%E5%BA%A6/","excerpt":"","text":"ref : https://blog.csdn.net/qq_44647926/article/details/89499842 进度条 demo 123456789101112131415import timescale=50 #尽量不要超过50 超过屏幕宽度会自动执行换行print(&quot;执行开始&quot;.center(scale//2,&quot;-&quot;))start=time.perf_counter()for i in range(scale+1): a=&quot;*&quot;*i b=&quot;.&quot;*(scale-i) c=(i/scale)*100 dur=time.perf_counter()-start print(&quot;\\r&#123;:&lt;3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;] time:&#123;:.2f&#125;&quot;.format(c,a,b,dur),end=&quot;&quot;) #\\r将光标移动到前面 #&#123;:^3.0f&#125; 左对齐 保留3位整数位 保留0位小数位 time.sleep(0.1)print(&quot;\\n&quot;)print(&quot;执行结束&quot;.center(scale//2,&quot;-&quot;)) 123456count_down = 10 # 设置倒计时时间，单位：秒interval = 1 # 设置屏幕刷新的间隔时间，单位：秒for i in range(0, int(count_down/interval)+1): print(&quot;\\r&quot;+&quot;▇▇▇▇&quot;*i+&quot; &quot;+str(i*10)+&quot;%&quot;, end=&quot;&quot;) time.sleep(interval)print(&quot;\\n加载完毕&quot;) 12345678910import timecount_down = 10 # 设置倒计时时间，单位：秒interval = 0.25 # 设置屏幕刷新的间隔时间，单位：秒for i in range(0, int(count_down/interval)): ch_list = [&quot;\\\\&quot;, &quot;|&quot;, &quot;/&quot;, &quot;-&quot;] index = i % 4 msg = &quot;\\r程序运行中 &quot; + ch_list[index] print(msg, end=&quot;&quot;) time.sleep(interval)print(u&quot;\\r结束&quot; + &quot; &quot;*len(msg))","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"HEXO Hacker 主题中文说明","slug":"dev_utils/01_python_dev_lib_logger","date":"2021-04-23T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/04/23/dev_utils/01_python_dev_lib_logger/","link":"","permalink":"http://example.com/2021/04/23/dev_utils/01_python_dev_lib_logger/","excerpt":"","text":"install lib 1pip install GitPython #在线安装会自动安装其依赖模块 clone 1Repo.clone_from(&quot;git远程给仓库地址&quot;,to_path=&quot;将要克隆到的本地仓库地址&quot;) init 1Repo.init(r&quot;C:\\Users\\Icey\\Desktop\\aa&quot;) #aa为要初始化的本地仓库 commit 12345repo = Repo(r&quot;C:\\Users\\Icey\\Desktop\\aa&quot;) #获取本地仓库对象index = repo.index #获取本地仓库的暂存区对象#index.add(r&#x27;*&#x27;) #将本地所有改动提交到暂存区index.add([&#x27;aaaa.txt&#x27;]) #将aaaa.txt文件提交到暂存区index.commit(&quot;此次提交备注信息&quot;) branch 12repo.git.branch(&quot;dev&quot;) #新建dev分支repo.git.checkout(&quot;dev&quot;) #切换到dev分支 demo 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import osfrom git import Repofrom git.repo.fun import is_git_dirclass GitRepository(object): #初始化 def __init__(self,local_path,repo_url,branch = &#x27;master&#x27;): self.local_path = local_path self.repo_url = repo_url self.repo = None self.initial(repo_url,branch) def initial(self,repo_url,branch): #判断本地仓库存在否，不存在则新建一个 if not os.path.exists(self.local_path): os.makedirs(self.local_path) git_local_path = os.path.join(self.local_path,&quot;.git&quot;) if not is_git_dir(git_local_path): self.repo = Repo.clone_from(repo_url,to_path = self.local_path,branch = branch) else: self.repo = Repo(self.local_path) #拉取远程代码 def pull(self): self.repo.git.pull() #将本地提交推送到远程 def push(self): self.repo.git.push(&#x27;master&#x27;) #切换分支 def change_to branch(self,ch_branch): self.repo.git.checkout(ch_branch) #新建tag并推送远程 def tags(self,new_tag,new_msg): self.repo.create_tag(new_tag,m = new_msg) self.repo.git.push(&#x27;origin&#x27;,new_tag) if __name__ == &#x27;__main__&#x27;: local_path = input(&#x27;请输入本地仓库地址：&#x27;) repo_url = input(&#x27;请输入远程仓库地址：&#x27;) repo = GitRepository(local_path,repo_url) ch_branch = input(&quot;请输入要切换的分支名称:&quot;) repo.change_to_branch(ch_branch) repo.pull() new_tag = input(&quot;请输入新建的tag:&quot;) new_msg = input(&quot;请输入本次推送的备注信息：&quot;) repo.tags()","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"HEXO Hacker 主题中文说明","slug":"dev_utils/00_python_dev_lib_git","date":"2021-04-23T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/04/23/dev_utils/00_python_dev_lib_git/","link":"","permalink":"http://example.com/2021/04/23/dev_utils/00_python_dev_lib_git/","excerpt":"","text":"install lib 1pip install GitPython #在线安装会自动安装其依赖模块 clone 1Repo.clone_from(&quot;git远程给仓库地址&quot;,to_path=&quot;将要克隆到的本地仓库地址&quot;) init 1Repo.init(r&quot;C:\\Users\\Icey\\Desktop\\aa&quot;) #aa为要初始化的本地仓库 commit 12345repo = Repo(r&quot;C:\\Users\\Icey\\Desktop\\aa&quot;) #获取本地仓库对象index = repo.index #获取本地仓库的暂存区对象#index.add(r&#x27;*&#x27;) #将本地所有改动提交到暂存区index.add([&#x27;aaaa.txt&#x27;]) #将aaaa.txt文件提交到暂存区index.commit(&quot;此次提交备注信息&quot;) branch 12repo.git.branch(&quot;dev&quot;) #新建dev分支repo.git.checkout(&quot;dev&quot;) #切换到dev分支 demo 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import osfrom git import Repofrom git.repo.fun import is_git_dirclass GitRepository(object): #初始化 def __init__(self,local_path,repo_url,branch = &#x27;master&#x27;): self.local_path = local_path self.repo_url = repo_url self.repo = None self.initial(repo_url,branch) def initial(self,repo_url,branch): #判断本地仓库存在否，不存在则新建一个 if not os.path.exists(self.local_path): os.makedirs(self.local_path) git_local_path = os.path.join(self.local_path,&quot;.git&quot;) if not is_git_dir(git_local_path): self.repo = Repo.clone_from(repo_url,to_path = self.local_path,branch = branch) else: self.repo = Repo(self.local_path) #拉取远程代码 def pull(self): self.repo.git.pull() #将本地提交推送到远程 def push(self): self.repo.git.push(&#x27;master&#x27;) #切换分支 def change_to branch(self,ch_branch): self.repo.git.checkout(ch_branch) #新建tag并推送远程 def tags(self,new_tag,new_msg): self.repo.create_tag(new_tag,m = new_msg) self.repo.git.push(&#x27;origin&#x27;,new_tag) if __name__ == &#x27;__main__&#x27;: local_path = input(&#x27;请输入本地仓库地址：&#x27;) repo_url = input(&#x27;请输入远程仓库地址：&#x27;) repo = GitRepository(local_path,repo_url) ch_branch = input(&quot;请输入要切换的分支名称:&quot;) repo.change_to_branch(ch_branch) repo.pull() new_tag = input(&quot;请输入新建的tag:&quot;) new_msg = input(&quot;请输入本次推送的备注信息：&quot;) repo.tags()","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[]},{"title":"vscode 插件记录","slug":"yolo/yolo5","date":"2021-03-11T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/11/yolo/yolo5/","link":"","permalink":"http://example.com/2021/03/11/yolo/yolo5/","excerpt":"","text":"环境搭建训练集部署得到的训练集","categories":[{"name":"Project_Yolo","slug":"Project-Yolo","permalink":"http://example.com/categories/Project-Yolo/"}],"tags":[]},{"title":"屏幕录制demo","slug":"yolo/screencast","date":"2021-03-11T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/11/yolo/screencast/","link":"","permalink":"http://example.com/2021/03/11/yolo/screencast/","excerpt":"","text":"reference dependence 12pip install pillowpip install opencv-python script 1234567891011121314151617181920212223242526272829303132# coding: utf-8from PIL import ImageGrabimport numpy as npimport cv2 fps = 100start = 1 # 延时录制end = 20 # 自动结束时间 curScreen = ImageGrab.grab() # 获取屏幕对象height, width = curScreen.size video = cv2.VideoWriter(&#x27;video02.avi&#x27;, cv2.VideoWriter_fourcc(*&#x27;XVID&#x27;), fps, (height, width)) imageNum = 0while True: imageNum += 1 captureImage = ImageGrab.grab() # 抓取屏幕 frame = cv2.cvtColor(np.array(captureImage), cv2.COLOR_RGB2BGR) # 显示无图像的窗口 cv2.imshow(&#x27;capturing&#x27;, np.zeros((1, 255), np.uint8)) # 控制窗口显示位置，方便通过按键方式退出 cv2.moveWindow(&#x27;capturing&#x27;, height - 100, width - 100) if imageNum &gt; fps * start: video.write(frame) # 退出条件 if cv2.waitKey(50) == ord(&#x27;q&#x27;) or imageNum &gt; fps * end: breakvideo.release()cv2.destroyAllWindows()","categories":[{"name":"Project_Yolo","slug":"Project-Yolo","permalink":"http://example.com/categories/Project-Yolo/"}],"tags":[]},{"title":"UEFI --- pci 遍历","slug":"uefi/pci_device","date":"2021-03-11T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/11/uefi/pci_device/","link":"","permalink":"http://example.com/2021/03/11/uefi/pci_device/","excerpt":"","text":"windows 上遍历PCI设备 | Reference Blog1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;stdio.h&gt;typedef unsigned long DWORD;typedef unsigned int WORD;#define MK_PDI(bus,dev,func) (WORD)((bus&lt;&lt;8)|(dev&lt;&lt;3)|(func))#define MK_PCIaddr(bus,dev,func) (DWORD)(0xf8000000L|(DWORD)MK_PDI(bus,dev,func)&lt;&lt;8)#define PCI_CONFIG_ADDRESS 0xCF8 #define PCI_CONFIG_DATA 0xCFCDWORD inpd(int inport)&#123; DWORD data; __asm( &quot;mov dx,inport&quot; &quot;lea bx,data&quot; &quot;-emit 0x66,0x50&quot; &quot;-emit 0x66,0xED&quot; &quot;-emit 0x66,0x89,0x07&quot; &quot;-emit 0x66,0x58&quot; ); return data;&#125;void outpd(int outport,DWORD addr)&#123; __asm( &quot;mov dx,outport&quot; &quot;lea bx,addr&quot; &quot;-emit 0x66, 0x50&quot; &quot;-emit 0x66, 0x8B, 0x07&quot; &quot;-emit 0x66, 0xEF&quot; &quot;-emit 0x66, 0x58&quot; );&#125;DWORD GetData(DWORD addr)&#123; DWORD data; outpd(PCI_CONFIG_ADDRESS,addr); data = inpd(PCI_CONFIG_DATA); return data;&#125;int main()&#123; int bus,dev,func; DWORD addr,addr1,addr2,addr3; DWORD data,data1,data2,data3; printf(&quot;Bus#\\tDev#\\tFunc#&quot;); printf(&quot;\\n&quot;); for (bus = 0; bus &lt;= 0x63; ++bus) &#123; for (dev = 0; dev &lt;= 0x1F; ++dev) &#123; for (func = 0; func &lt;= 0x7; ++func) &#123; addr = MK_PCIaddr(bus,dev,func); data = GetData(addr); if((WORD)data!=0xFFFF) &#123; printf(&quot;%2.2x\\t%2.2x\\t%2.2x\\t&quot;,bus,dev,func); printf(&quot;\\n&quot;); &#125; &#125; &#125; &#125; return 0;&#125;","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]},{"title":"hack binary example","slug":"liveoverflow/镜像加密验证例子","date":"2021-03-09T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/09/liveoverflow/镜像加密验证例子/","link":"","permalink":"http://example.com/2021/03/09/liveoverflow/%E9%95%9C%E5%83%8F%E5%8A%A0%E5%AF%86%E9%AA%8C%E8%AF%81%E4%BE%8B%E5%AD%90/","excerpt":"","text":"","categories":[{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"}],"tags":[]},{"title":"gdb 调试常用命令备忘","slug":"tool/gdb","date":"2021-03-09T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/09/tool/gdb/","link":"","permalink":"http://example.com/2021/03/09/tool/gdb/","excerpt":"","text":"disassemble //gdb下使用可以查看汇编代码disassemble /m 函数名 /m 源码和汇编一起排列disassemble 不带参数，默认的反汇编范围是 所选择帧的pc附近的函数单个参数, 就是pc, 当然也可以是函数名，因为函数名 也是一个 地址; 这样范围就是该pc附近的函数两个参数，就是内存地址范围 使用display /i $pc（结合display命令和寄存器/pc内部变量）指令进行设置 info register查看寄存器的情况，可以简写成i r主要是%eip、%eax、%esp和%ebp 列出的结果主要有三行 最左边是寄存器名称外，中间是寄存器存的值（也就是一个内存地址），右边是这个值对应的内存 地址中的值。打印一下$eax可验证 si，ni： 下一条语句遇到函数调用的时候，nexti不会跟踪进入函数，而是继续执行下面的语句， 而step命令则会跟踪进入函数内部。 si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指 令，而s/n针对的是源代码。 i代表指令（instruction） n(ext)i s(tep)i $pc 代表pc程序计数器的值 set disassembly-flavor intel gdb设置intel汇编 ，默认是att print其实是有计数器的，每次print打印，其实都有一个类似count++在内部发生，使用print $num 能显示第num个打印结果，如上，p $3 //查看第三个值 (gdb)p i (gdb)p/a i (gdb)p/c i (gdb)p/f i (gdb)p/x i (gdb)p/o i (gdb)p/d i (gdb)p/t i f浮点，c字符，t为二进制，o八，x十六，d十 a和x同样是打印十六进制,不同名但同功能 调试运行中的程序： #ps -aux | grep execFile //找到运行中的进程PID， 使用 #gdb execFile PID bt n(next)往下走是看不到已经运行完的错误的，所以就谈到bt（backtrace）命令——回溯。info line main //查看main的信息 info line 0x… //查看某一行信息r是run的缩写 r 参数 以参数运行程序quit,退出gdb调试gdb -q 程序名 //这个操作可以不输出一些信息（gdb的一些版本信息说明之类的） gdb也支持运行linux命令的，可以在gdb的提示符中，输入shell，然后在输入你需要的命令就可以了。例如：shell clear 清屏b*0x… //在逆向调试的时候，在某行指令下断点必须遵照这个格式 x/i 可以查看指令 例如： x/15i main 查看main函数中的第15条指令 x/43bc 0xffffd190 指的是 0xffffd190后43个内存单元 想边看汇编变调试就先：r 参数 ，然后使用layout asm，直接动态显示指令运行 layout 几个参数： src : Displays source and command windows. asm : Displays disassembly and command windows. split : Displays source, disassembly and command windows. regs : Displays register window. If existing layout c（continue） 可以让程序执行到下一个断点处 p $eax 查看寄存器的值 x/i $pc 查看当前指令的运行地址修改寄存器值的两种方式(想要满足某个比较条件直接修改寄存器，可以跳到想跳的地方)： 1)直接来： set $eax=value 2)找到寄存器的地址通过这个地址修改值： p $rsp+0x714 set *上一步的值=value x/ &lt;n/f/u&gt; //内存地址中的值，x即examine,3个参数顺序可变 1)n是一个正整数，表示需要显示的内存单元的个数 2)f表示显示的格式（有以下选项）： x （hexadecimal）按十六进制格式显示变量。 d （signed decimal）按十进制格式显示变量。 u （unsigned decimal）按十进制格式显示无符号整型。 o （octal）按八进制格式显示变量。 t （binary）按二进制格式显示变量。 a （address）按十六进制格式显示地址，并显示距离前继符号的偏移量(offset)。常用于定位未知 地址(变量)。 c （character）按字符格式显示变量。 f （floating）按浮点数格式显示变量。 3)u表示从当前地址往后请求的字节数单位，如果不指定的话，GDB默认是4个bytes： b表示单字节， h表示双字节， w表示四字节， g表示八字节 x/10x $sp–&gt;打印stack的前10个元素 reverse-stepi //回退一条指令info thread // 查看所有线程 continue 执行到下一暂停点或程序结束。next 执行一行源代码但不进入函数内部。step 执行一行源代码而且进入函数内部。gdb 运行程序例子程序名为prog，则在终端输入 gdb proggdb 设置参数set args 可指定运行时参数。（如：set args 10 20 30 40 50） show args 命令可以查看设置好的运行参数。 若要再次修改参数，可再执行一遍 set args运行输入 r 运行 出错后，输入 bt 查看运行堆栈退出输入 quit","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"c 函数参数是怎么传递的，整个过程","slug":"liveoverflow/c_example_param","date":"2021-03-08T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/08/liveoverflow/c_example_param/","link":"","permalink":"http://example.com/2021/03/08/liveoverflow/c_example_param/","excerpt":"","text":"测试源码 1234567891011121314151617#include &lt;stdio.h&gt;int test2(int a, int b , int c, int d , int e)&#123; printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e); return 0;&#125;int test(int a, int b , int c, int d , int e)&#123; test2(6,7,8,9,10); printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e); return 0;&#125;int main(int argc,char *argv[])&#123; test(1,2,3,4,5); return 0;&#125; 调试过程xhlu@BU-build-XHLU /cygdrive/c/Users/xhlu/Desktop/pri_xx/test$ gdb a.exeGNU gdb (GDB) (Cygwin 9.2-1) 9.2Copyright (C) 2020 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Type &quot;show copying&quot; and &quot;show warranty&quot; for details.This GDB was configured as &quot;x86_64-pc-cygwin&quot;.Type &quot;show configuration&quot; for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at: &lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type &quot;help&quot;.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...Reading symbols from a.exe...(gdb) b main.c:16Breakpoint 1 at 0x10040114b: file main.c, line 16.(gdb) rStarting program: /cygdrive/c/Users/xhlu/Desktop/pri_xx/test/a.exe[New Thread 8624.0xf8][New Thread 8624.0x2404][New Thread 8624.0x1560][New Thread 8624.0x13b0]Thread 1 &quot;a&quot; hit Breakpoint 1, main (argc=1, argv=0xffffcc60) at main.c:1616 test(1,2,3,4,5);(gdb) disassembleDump of assembler code for function main: 0x0000000100401137 &lt;+0&gt;: push %rbp 0x0000000100401138 &lt;+1&gt;: mov %rsp,%rbp 0x000000010040113b &lt;+4&gt;: sub $0x30,%rsp 0x000000010040113f &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x0000000100401142 &lt;+11&gt;: mov %rdx,0x18(%rbp) 0x0000000100401146 &lt;+15&gt;: callq 0x100401190 &lt;__main&gt;=&gt; 0x000000010040114b &lt;+20&gt;: movl $0x5,0x20(%rsp) 0x0000000100401153 &lt;+28&gt;: mov $0x4,%r9d 0x0000000100401159 &lt;+34&gt;: mov $0x3,%r8d 0x000000010040115f &lt;+40&gt;: mov $0x2,%edx 0x0000000100401164 &lt;+45&gt;: mov $0x1,%ecx 0x0000000100401169 &lt;+50&gt;: callq 0x1004010ca &lt;test&gt; 0x000000010040116e &lt;+55&gt;: mov $0x0,%eax 0x0000000100401173 &lt;+60&gt;: add $0x30,%rsp 0x0000000100401177 &lt;+64&gt;: pop %rbp 0x0000000100401178 &lt;+65&gt;: retqEnd of assembler dump.(gdb) stest (a=1, b=2, c=3, d=4, e=5) at main.c:1010 test2(6,7,8,9,10);(gdb) l5 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);6 return 0;7 &#125;89 int test(int a, int b , int c, int d , int e)&#123;10 test2(6,7,8,9,10);11 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);12 return 0;13 &#125;14(gdb) disassembleDump of assembler code for function test: 0x00000001004010ca &lt;+0&gt;: push %rbp 将被调函数的main栈帧栈底地址放入bp寄存器中,此时我们看到的就是函数test的栈帧 0x00000001004010cb &lt;+1&gt;: mov %rsp,%rbp 0x00000001004010ce &lt;+4&gt;: sub $0x30,%rsp 0x00000001004010d2 &lt;+8&gt;: mov %ecx,0x10(%rbp) 将一会要用到的core寄存器压栈 ， ？为什么不把函数参数直接压栈呢，非要用core寄存器 ？ 0x00000001004010d5 &lt;+11&gt;: mov %edx,0x18(%rbp) 0x00000001004010d8 &lt;+14&gt;: mov %r8d,0x20(%rbp) 0x00000001004010dc &lt;+18&gt;: mov %r9d,0x28(%rbp)=&gt; 0x00000001004010e0 &lt;+22&gt;: movl $0xa,0x20(%rsp) 如下6/7/8/9参数被放到了 core 寄存器中，0xa 被压入栈中 0x00000001004010e8 &lt;+30&gt;: mov $0x9,%r9d 0x00000001004010ee &lt;+36&gt;: mov $0x8,%r8d 0x00000001004010f4 &lt;+42&gt;: mov $0x7,%edx 0x00000001004010f9 &lt;+47&gt;: mov $0x6,%ecx 0x00000001004010fe &lt;+52&gt;: callq 0x100401080 &lt;test2&gt; 0x0000000100401103 &lt;+57&gt;: mov 0x20(%rbp),%ecx 0x0000000100401106 &lt;+60&gt;: mov 0x18(%rbp),%edx 0x0000000100401109 &lt;+63&gt;: mov 0x30(%rbp),%eax 0x000000010040110c &lt;+66&gt;: mov %eax,0x28(%rsp) 0x0000000100401110 &lt;+70&gt;: mov 0x28(%rbp),%eax 0x0000000100401113 &lt;+73&gt;: mov %eax,0x20(%rsp) 0x0000000100401117 &lt;+77&gt;: mov %ecx,%r9d 0x000000010040111a &lt;+80&gt;: mov %edx,%r8d 0x000000010040111d &lt;+83&gt;: mov 0x10(%rbp),%edx 0x0000000100401120 &lt;+86&gt;: lea 0x1ed9(%rip),%rcx # 0x100403000 0x0000000100401127 &lt;+93&gt;: callq 0x1004011a0 &lt;printf&gt; 0x000000010040112c &lt;+98&gt;: mov $0x0,%eax 0x0000000100401131 &lt;+103&gt;: add $0x30,%rsp 0x0000000100401135 &lt;+107&gt;: pop %rbp 0x0000000100401136 &lt;+108&gt;: retqEnd of assembler dump.(gdb) s[New Thread 8624.0x1d34]test2 (a=6, b=7, c=8, d=9, e=10) at main.c:55 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);(gdb) disassembleDump of assembler code for function test2: 0x0000000100401080 &lt;+0&gt;: push %rbp 0x0000000100401081 &lt;+1&gt;: mov %rsp,%rbp 0x0000000100401084 &lt;+4&gt;: sub $0x30,%rsp 0x0000000100401088 &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x000000010040108b &lt;+11&gt;: mov %edx,0x18(%rbp) 0x000000010040108e &lt;+14&gt;: mov %r8d,0x20(%rbp) 0x0000000100401092 &lt;+18&gt;: mov %r9d,0x28(%rbp)=&gt; 0x0000000100401096 &lt;+22&gt;: mov 0x20(%rbp),%ecx 0x0000000100401099 &lt;+25&gt;: mov 0x18(%rbp),%edx 0x000000010040109c &lt;+28&gt;: mov 0x30(%rbp),%eax 0x000000010040109f &lt;+31&gt;: mov %eax,0x28(%rsp) 0x00000001004010a3 &lt;+35&gt;: mov 0x28(%rbp),%eax 0x00000001004010a6 &lt;+38&gt;: mov %eax,0x20(%rsp) 0x00000001004010aa &lt;+42&gt;: mov %ecx,%r9d 0x00000001004010ad &lt;+45&gt;: mov %edx,%r8d 0x00000001004010b0 &lt;+48&gt;: mov 0x10(%rbp),%edx 0x00000001004010b3 &lt;+51&gt;: lea 0x1f46(%rip),%rcx # 0x100403000 0x00000001004010ba &lt;+58&gt;: callq 0x1004011a0 &lt;printf&gt; 0x00000001004010bf &lt;+63&gt;: mov $0x0,%eax 0x00000001004010c4 &lt;+68&gt;: add $0x30,%rsp 0x00000001004010c8 &lt;+72&gt;: pop %rbp 0x00000001004010c9 &lt;+73&gt;: retqEnd of assembler dump.(gdb) n[New Thread 8624.0x24b0]6, 7, 8, 9, 106 return 0;(gdb) disassembleDump of assembler code for function test2: 0x0000000100401080 &lt;+0&gt;: push %rbp 0x0000000100401081 &lt;+1&gt;: mov %rsp,%rbp 0x0000000100401084 &lt;+4&gt;: sub $0x30,%rsp 0x0000000100401088 &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x000000010040108b &lt;+11&gt;: mov %edx,0x18(%rbp) 0x000000010040108e &lt;+14&gt;: mov %r8d,0x20(%rbp) 0x0000000100401092 &lt;+18&gt;: mov %r9d,0x28(%rbp) 0x0000000100401096 &lt;+22&gt;: mov 0x20(%rbp),%ecx 0x0000000100401099 &lt;+25&gt;: mov 0x18(%rbp),%edx 0x000000010040109c &lt;+28&gt;: mov 0x30(%rbp),%eax 0x000000010040109f &lt;+31&gt;: mov %eax,0x28(%rsp) 0x00000001004010a3 &lt;+35&gt;: mov 0x28(%rbp),%eax 0x00000001004010a6 &lt;+38&gt;: mov %eax,0x20(%rsp) 0x00000001004010aa &lt;+42&gt;: mov %ecx,%r9d 0x00000001004010ad &lt;+45&gt;: mov %edx,%r8d 0x00000001004010b0 &lt;+48&gt;: mov 0x10(%rbp),%edx 0x00000001004010b3 &lt;+51&gt;: lea 0x1f46(%rip),%rcx # 0x100403000 0x00000001004010ba &lt;+58&gt;: callq 0x1004011a0 &lt;printf&gt;=&gt; 0x00000001004010bf &lt;+63&gt;: mov $0x0,%eax 0x00000001004010c4 &lt;+68&gt;: add $0x30,%rsp 0x00000001004010c8 &lt;+72&gt;: pop %rbp 0x00000001004010c9 &lt;+73&gt;: retqEnd of assembler dump.(gdb) n7 &#125;(gdb) l234 int test2(int a, int b , int c, int d , int e)&#123;5 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);6 return 0;7 &#125;89 int test(int a, int b , int c, int d , int e)&#123;10 test2(6,7,8,9,10);11 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);(gdb) disassembleDump of assembler code for function test2: 0x0000000100401080 &lt;+0&gt;: push %rbp 0x0000000100401081 &lt;+1&gt;: mov %rsp,%rbp 0x0000000100401084 &lt;+4&gt;: sub $0x30,%rsp 0x0000000100401088 &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x000000010040108b &lt;+11&gt;: mov %edx,0x18(%rbp) 0x000000010040108e &lt;+14&gt;: mov %r8d,0x20(%rbp) 0x0000000100401092 &lt;+18&gt;: mov %r9d,0x28(%rbp) 0x0000000100401096 &lt;+22&gt;: mov 0x20(%rbp),%ecx 0x0000000100401099 &lt;+25&gt;: mov 0x18(%rbp),%edx 0x000000010040109c &lt;+28&gt;: mov 0x30(%rbp),%eax 0x000000010040109f &lt;+31&gt;: mov %eax,0x28(%rsp) 0x00000001004010a3 &lt;+35&gt;: mov 0x28(%rbp),%eax 0x00000001004010a6 &lt;+38&gt;: mov %eax,0x20(%rsp) 0x00000001004010aa &lt;+42&gt;: mov %ecx,%r9d 0x00000001004010ad &lt;+45&gt;: mov %edx,%r8d 0x00000001004010b0 &lt;+48&gt;: mov 0x10(%rbp),%edx 0x00000001004010b3 &lt;+51&gt;: lea 0x1f46(%rip),%rcx # 0x100403000 0x00000001004010ba &lt;+58&gt;: callq 0x1004011a0 &lt;printf&gt; 0x00000001004010bf &lt;+63&gt;: mov $0x0,%eax=&gt; 0x00000001004010c4 &lt;+68&gt;: add $0x30,%rsp 0x00000001004010c8 &lt;+72&gt;: pop %rbp 0x00000001004010c9 &lt;+73&gt;: retqEnd of assembler dump.(gdb) ntest (a=1, b=2, c=3, d=4, e=5) at main.c:1111 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);(gdb) disassembleDump of assembler code for function test: 0x00000001004010ca &lt;+0&gt;: push %rbp 0x00000001004010cb &lt;+1&gt;: mov %rsp,%rbp 0x00000001004010ce &lt;+4&gt;: sub $0x30,%rsp 0x00000001004010d2 &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x00000001004010d5 &lt;+11&gt;: mov %edx,0x18(%rbp) 0x00000001004010d8 &lt;+14&gt;: mov %r8d,0x20(%rbp) 0x00000001004010dc &lt;+18&gt;: mov %r9d,0x28(%rbp) 0x00000001004010e0 &lt;+22&gt;: movl $0xa,0x20(%rsp) 0x00000001004010e8 &lt;+30&gt;: mov $0x9,%r9d 0x00000001004010ee &lt;+36&gt;: mov $0x8,%r8d 0x00000001004010f4 &lt;+42&gt;: mov $0x7,%edx 0x00000001004010f9 &lt;+47&gt;: mov $0x6,%ecx 0x00000001004010fe &lt;+52&gt;: callq 0x100401080 &lt;test2&gt;=&gt; 0x0000000100401103 &lt;+57&gt;: mov 0x20(%rbp),%ecx 0x0000000100401106 &lt;+60&gt;: mov 0x18(%rbp),%edx 0x0000000100401109 &lt;+63&gt;: mov 0x30(%rbp),%eax 0x000000010040110c &lt;+66&gt;: mov %eax,0x28(%rsp) 0x0000000100401110 &lt;+70&gt;: mov 0x28(%rbp),%eax 0x0000000100401113 &lt;+73&gt;: mov %eax,0x20(%rsp) 0x0000000100401117 &lt;+77&gt;: mov %ecx,%r9d 0x000000010040111a &lt;+80&gt;: mov %edx,%r8d 0x000000010040111d &lt;+83&gt;: mov 0x10(%rbp),%edx 0x0000000100401120 &lt;+86&gt;: lea 0x1ed9(%rip),%rcx # 0x100403000 0x0000000100401127 &lt;+93&gt;: callq 0x1004011a0 &lt;printf&gt; 0x000000010040112c &lt;+98&gt;: mov $0x0,%eax 0x0000000100401131 &lt;+103&gt;: add $0x30,%rsp 0x0000000100401135 &lt;+107&gt;: pop %rbp 0x0000000100401136 &lt;+108&gt;: retqEnd of assembler dump.(gdb) n1, 2, 3, 4, 512 return 0;(gdb) n13 &#125;(gdb) nmain (argc=1, argv=0xffffcc60) at main.c:1717 return 0;(gdb) disassembleDump of assembler code for function main: 0x0000000100401137 &lt;+0&gt;: push %rbp 0x0000000100401138 &lt;+1&gt;: mov %rsp,%rbp 0x000000010040113b &lt;+4&gt;: sub $0x30,%rsp 0x000000010040113f &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x0000000100401142 &lt;+11&gt;: mov %rdx,0x18(%rbp) 0x0000000100401146 &lt;+15&gt;: callq 0x100401190 &lt;__main&gt; 0x000000010040114b &lt;+20&gt;: movl $0x5,0x20(%rsp) 0x0000000100401153 &lt;+28&gt;: mov $0x4,%r9d 0x0000000100401159 &lt;+34&gt;: mov $0x3,%r8d 0x000000010040115f &lt;+40&gt;: mov $0x2,%edx 0x0000000100401164 &lt;+45&gt;: mov $0x1,%ecx 0x0000000100401169 &lt;+50&gt;: callq 0x1004010ca &lt;test&gt;=&gt; 0x000000010040116e &lt;+55&gt;: mov $0x0,%eax 0x0000000100401173 &lt;+60&gt;: add $0x30,%rsp 0x0000000100401177 &lt;+64&gt;: pop %rbp 0x0000000100401178 &lt;+65&gt;: retqEnd of assembler dump.(gdb) 使用bt列出函数栈，使用frame n 查看栈帧，就可以看到出问题时候的函数回溯了，很方便 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119xhlu@bu-build-XHLU /cygdrive/c/Users/xhlu/Desktop/pri_xx/test$ gdb a.exeGNU gdb (GDB) (Cygwin 9.2-1) 9.2Copyright (C) 2020 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Type &quot;show copying&quot; and &quot;show warranty&quot; for details.This GDB was configured as &quot;x86_64-pc-cygwin&quot;.Type &quot;show configuration&quot; for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at: &lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type &quot;help&quot;.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...Reading symbols from a.exe...(gdb) b main.c:3Breakpoint 1 at 0x100401096: file main.c, line 4.(gdb) rStarting program: /cygdrive/c/Users/xhlu/Desktop/pri_xx/test/a.exe[New Thread 4068.0xbdc][New Thread 4068.0x18d8][New Thread 4068.0x1664][New Thread 4068.0x2610]Thread 1 &quot;a&quot; hit Breakpoint 1, test2 (a=6, b=7, c=8, d=9, e=10) at main.c:44 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);(gdb) bt#0 test2 (a=6, b=7, c=8, d=9, e=10) at main.c:4#1 0x000000010040110a in test (a=1, b=2, c=3, d=4, e=5) at main.c:10#2 0x0000000100401173 in main (argc=1, argv=0xffffcc60) at main.c:16(gdb) frame 0#0 test2 (a=6, b=7, c=8, d=9, e=10) at main.c:44 printf(&quot;%d, %d, %d, %d, %d\\n&quot;, a,b,c,d,e);(gdb) disassembleDump of assembler code for function test2: 0x0000000100401080 &lt;+0&gt;: push %rbp 0x0000000100401081 &lt;+1&gt;: mov %rsp,%rbp 0x0000000100401084 &lt;+4&gt;: sub $0x30,%rsp 0x0000000100401088 &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x000000010040108b &lt;+11&gt;: mov %edx,0x18(%rbp) 0x000000010040108e &lt;+14&gt;: mov %r8d,0x20(%rbp) 0x0000000100401092 &lt;+18&gt;: mov %r9d,0x28(%rbp)=&gt; 0x0000000100401096 &lt;+22&gt;: mov 0x20(%rbp),%ecx 0x0000000100401099 &lt;+25&gt;: mov 0x18(%rbp),%edx 0x000000010040109c &lt;+28&gt;: mov 0x30(%rbp),%eax 0x000000010040109f &lt;+31&gt;: mov %eax,0x28(%rsp) 0x00000001004010a3 &lt;+35&gt;: mov 0x28(%rbp),%eax 0x00000001004010a6 &lt;+38&gt;: mov %eax,0x20(%rsp) 0x00000001004010aa &lt;+42&gt;: mov %ecx,%r9d 0x00000001004010ad &lt;+45&gt;: mov %edx,%r8d 0x00000001004010b0 &lt;+48&gt;: mov 0x10(%rbp),%edx 0x00000001004010b3 &lt;+51&gt;: lea 0x1f46(%rip),%rcx # 0x100403000 0x00000001004010ba &lt;+58&gt;: callq 0x1004011b0 &lt;printf&gt; 0x00000001004010bf &lt;+63&gt;: mov $0x0,%eax 0x00000001004010c4 &lt;+68&gt;: add $0x30,%rsp 0x00000001004010c8 &lt;+72&gt;: pop %rbp 0x00000001004010c9 &lt;+73&gt;: retqEnd of assembler dump.(gdb) frame 1#1 0x000000010040110a in test (a=1, b=2, c=3, d=4, e=5) at main.c:1010 test2(6,7,8,9,10);(gdb) disassembleDump of assembler code for function test: 0x00000001004010ca &lt;+0&gt;: push %rbp 0x00000001004010cb &lt;+1&gt;: mov %rsp,%rbp 0x00000001004010ce &lt;+4&gt;: sub $0x40,%rsp 0x00000001004010d2 &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x00000001004010d5 &lt;+11&gt;: mov %edx,0x18(%rbp) 0x00000001004010d8 &lt;+14&gt;: mov %r8d,0x20(%rbp) 0x00000001004010dc &lt;+18&gt;: mov %r9d,0x28(%rbp) 0x00000001004010e0 &lt;+22&gt;: movl $0xc,-0x4(%rbp) 0x00000001004010e7 &lt;+29&gt;: movl $0xa,0x20(%rsp) 0x00000001004010ef &lt;+37&gt;: mov $0x9,%r9d 0x00000001004010f5 &lt;+43&gt;: mov $0x8,%r8d 0x00000001004010fb &lt;+49&gt;: mov $0x7,%edx 0x0000000100401100 &lt;+54&gt;: mov $0x6,%ecx 0x0000000100401105 &lt;+59&gt;: callq 0x100401080 &lt;test2&gt;=&gt; 0x000000010040110a &lt;+64&gt;: mov 0x20(%rbp),%ecx 0x000000010040110d &lt;+67&gt;: mov 0x18(%rbp),%edx 0x0000000100401110 &lt;+70&gt;: mov 0x30(%rbp),%eax 0x0000000100401113 &lt;+73&gt;: mov %eax,0x28(%rsp) 0x0000000100401117 &lt;+77&gt;: mov 0x28(%rbp),%eax 0x000000010040111a &lt;+80&gt;: mov %eax,0x20(%rsp) 0x000000010040111e &lt;+84&gt;: mov %ecx,%r9d 0x0000000100401121 &lt;+87&gt;: mov %edx,%r8d 0x0000000100401124 &lt;+90&gt;: mov 0x10(%rbp),%edx 0x0000000100401127 &lt;+93&gt;: lea 0x1ed2(%rip),%rcx # 0x100403000 0x000000010040112e &lt;+100&gt;: callq 0x1004011b0 &lt;printf&gt; 0x0000000100401133 &lt;+105&gt;: mov -0x4(%rbp),%eax 0x0000000100401136 &lt;+108&gt;: add $0x40,%rsp 0x000000010040113a &lt;+112&gt;: pop %rbp 0x000000010040113b &lt;+113&gt;: retqEnd of assembler dump.(gdb) frame 2#2 0x0000000100401173 in main (argc=1, argv=0xffffcc60) at main.c:1616 int xh = test(1,2,3,4,5);(gdb) disassembleDump of assembler code for function main: 0x000000010040113c &lt;+0&gt;: push %rbp 0x000000010040113d &lt;+1&gt;: mov %rsp,%rbp 0x0000000100401140 &lt;+4&gt;: sub $0x40,%rsp 0x0000000100401144 &lt;+8&gt;: mov %ecx,0x10(%rbp) 0x0000000100401147 &lt;+11&gt;: mov %rdx,0x18(%rbp) 0x000000010040114b &lt;+15&gt;: callq 0x1004011a0 &lt;__main&gt; 0x0000000100401150 &lt;+20&gt;: movl $0x5,0x20(%rsp) 0x0000000100401158 &lt;+28&gt;: mov $0x4,%r9d 0x000000010040115e &lt;+34&gt;: mov $0x3,%r8d 0x0000000100401164 &lt;+40&gt;: mov $0x2,%edx 0x0000000100401169 &lt;+45&gt;: mov $0x1,%ecx 0x000000010040116e &lt;+50&gt;: callq 0x1004010ca &lt;test&gt;=&gt; 0x0000000100401173 &lt;+55&gt;: mov %eax,-0x4(%rbp) 0x0000000100401176 &lt;+58&gt;: mov $0x0,%eax 0x000000010040117b &lt;+63&gt;: add $0x40,%rsp 0x000000010040117f &lt;+67&gt;: pop %rbp 0x0000000100401180 &lt;+68&gt;: retqEnd of assembler dump.","categories":[{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"}],"tags":[]},{"title":"C 的角角落落","slug":"c/c角角落落","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/c/c角角落落/","link":"","permalink":"http://example.com/2021/03/02/c/c%E8%A7%92%E8%A7%92%E8%90%BD%E8%90%BD/","excerpt":"","text":"asm volatile(“”: : :”memory”) // 强制每次都从内存中读取数据，不优化。 memory 强制gcc编译器假设RAM所有内存单元均被汇编指令修改，这样cpu中的registers和cache中已缓存的内存单元中的数据将作废。cpu将不得不在需要的时候重新读取内存中的数据。这就阻止了cpu又将registers，cache中的数据用于去优化指令，而避免去访问内存。 __asm__用于指示编译器在此插入汇编语句。 __volatile__用于告诉编译器，严禁将此处的汇编语句与其它的语句重组合优化。即：原原本本按原来的样子处理这这里的汇编。 memory强制gcc编译器假设RAM所有内存单元均被汇编指令修改，这样cpu中的registers和cache中已缓存的内存单元中的数据将作废。cpu将不得不在需要的时候重新读取内存中的数据。这就阻止了cpu又将registers，cache中的数据用于去优化指令，而避免去访问内存。 “”:::表示这是个空指令。barrier()不用在此插入一条串行化汇编指令。 section 段的方式访问函数 将我需要用到的函数放在 .mywon 段中 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;unistd.h&gt;#include &lt;stdint.h&gt;#include &lt;stdio.h&gt;typedef void (*myown_call)(void);extern myown_call _myown_start;extern myown_call _myown_end;#define _init __attribute__((unused, section(&quot;.myown&quot;)))#define func_init(func) myown_call _fn_##func _init = funcstatic void mspec1(void)&#123; write(1, &quot;aha!\\n&quot;, 5);&#125;static void mspec2(void)&#123; write(1, &quot;aloha!\\n&quot;, 7);&#125;static void mspec3(void)&#123; write(1, &quot;hello!\\n&quot;, 7);&#125;func_init(mspec1);func_init(mspec2);func_init(mspec3);/* exactly like below:static myown_call mc1 __attribute__((unused, section(&quot;.myown&quot;))) = mspec1;static myown_call mc2 __attribute__((unused, section(&quot;.myown&quot;))) = mspec2;static myown_call mc3 __attribute__((unused, section(&quot;.myown&quot;))) = mspec3;*/void do_initcalls(void)&#123; myown_call *call_ptr = &amp;_myown_start; do &#123; fprintf (stderr, &quot;call_ptr: %p\\n&quot;, call_ptr); (*call_ptr)(); ++call_ptr; &#125; while (call_ptr &lt; &amp;_myown_end);&#125;int main(void)&#123; do_initcalls(); return 0;&#125;","categories":[{"name":"c","slug":"c","permalink":"http://example.com/categories/c/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/Community_FAQ","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/Community_FAQ/","link":"","permalink":"http://example.com/2021/03/02/pikvm/Community_FAQ/","excerpt":"","text":"Community FAQCan this be used for gaming? Why not? ❗No:exclamation:, the max bus lanes the Pi provides, is not enough to support anything faster than 30 FPS. Your better off looking at other solutions for this. ❗No:exclamation:, PiKVM does not capture and transmit audio at this time. The developers have indicated that this may be available for the v3 hat at some point in the future, but it is not a priority for development at this time. Can this do 4K? For the CSI Bridge, ❗No:exclamation:. there is not enough bandwidth in the CSI bus for that much data. 1080p50 will max out the bandwidth For the USB capture devices: Technically yes, but they will downsample to something smaller to meet the usb2.0 bandwidth limitations, so the source may be 4k, but the stream will not. Is Pi-KVM an OS or its own Distro? Yes and No, Other than the some repacking and patches, its heavly based off an existing Arch Linux ARM. Why are you using Arch Linux? The developer was more familiar with Arch Linux so this was chosen as the base operating system. As a Linux distribution, it has more in common than not with other distributions.As an appliance, users are not expected to interact with the host operating system often, if at all. There are some distribution-specific differences, by default networking is done using either systemd-networkd or netctl but NetworkManager can be used as a replacement if one prefers. Can I power the Pi via POE? Yes! But you will still need to ensure you isolate the 5v connection between the Raspberry Pi and host PC to prevent backpower issues that can cause instability or damage to either the host PC or the Pi. Do I need a power splitter? Why do I need one? Yes for RPi4, No for ZeroW Yes, otherwise you could back power the pi and or the target You can get a Y cable from amazon and mod one of the leads - Please see getting started guide You can get a power splitter board from Tindi or PiShop (Links provided below) If you have the v3 HAT - This is built in I can’t get the KVM KB to work on my ZeroW!Make sure that you did NOT modify your config.txt file, this is the default: 12345678# See &#x2F;boot&#x2F;overlays&#x2F;README for all available optionsinitramfs initramfs-linux.img followkernelhdmi_force_hotplug&#x3D;1gpu_mem&#x3D;64enable_uart&#x3D;1dtoverlay&#x3D;tc358743,i2c_pins_28_29&#x3D;1dtoverlay&#x3D;disable-btdtoverlay&#x3D;dwc2,dr_mode&#x3D;peripheral Ensure that you have the cable(Needs to support both power/data) plugged into the right port, the one closest to the mini HDMI is the correct port Can I use a KB on my ZeroW? Yes but kb/mouse passthrough will not work. Its one or the other Host mode - Comment out dtoverlay=dwc2 Passthrough mode - Uncomment out dtoverlay=dwc2 Can you have the pi-kvm(RPi4) connected along with a monitor? A community member has had success with the following: https://www.amazon.com/gp/product/B08DQWLXF1 Some Alternitives If you have two outputs, you may be able to use screen mirroring from the OS but not BIOS If you have one output or need access from both a local monitor or Pi-KVM at boot time, one of the following options may work: Passthrough HDMI capture devices (sometimes referred to as a loop capture device). The Elgato devices DO NOT WORK! Look for Linux OS support when choosing a device, the expected price range is about $35-$70 US. Depending on your capture device, an HDMI splitter may work but will need what is called an EDID (Extended Device ID) generator, the monitor and capture device both generate EDID so the splitter must produce its own separate EDID for the host. Look for HDMI splitters - although there have been reports that these are not stable Please use the search function in Discord, some users have had sucess in getting this to work but your mileage may vary The better solution is to capture the stream in a dir and then use VLC to stream to that capture on another computer. This will result in fps loss. Wouldn’t it be good to have different hostnames for your multitude of pi-kvms?Yes! And it’s easy to do! Using a SSH session or the web terminal: Make sure you’re root, if you’re not root use the su command to become root Enter read write mode of the PiKVM by executing the rw command Execute: hostnamectl set-hostname yournewhostname.domain Optional: Edit /etc/kvmd/meta.yaml to alter the displayed hostname in the web UI Reboot the pikvm I can’t make edits?!?!? Did you issue a rw before updating/editing? In the Web Terminal, how do I get root? Type su - Put root for the password I want to do something not related to Pi-KVM It’s recommended that you review Arch documents related to what you want to do, while there are several folks in discord who can help, there is no obligation…they do it for the feels. So if you don’t get an answer within the time frame you are looking for, it’s advised you start google searching for what you want. Can this be used in any other distro’s like Rasbian? Run this in a Docker? Not at this time, maybe in the future My Pi keeps disconnecting from my wireless! What do I do? You can try the following: Edit “/etc/conf.d/wireless-regdom” and look for your region and uncomment it. Example: WIRELESS_REGDOM=”US” I want a static IP!! You can configure systemd-networkd for a static address for ethernet NIC. Config file is /etc/systemd/network/eth0.network For wireless adapter, config file is /etc/netctl/wlan0- See pikvm/wifi_config.md at master · pikvm/pikvm · GitHub for details on how to get basic wireless config with DHCP going. Afterwards, you’ll need to edit the /etc/netctl/wlan0- file changing the IP=dhcp line with the following lines updated to reflect your network:1234IP&#x3D;staticAddress&#x3D;(&#39;192.168.X.XXX&#x2F;24&#39;)Gateway&#x3D;(&#39;192.168.X.X&#39;)DNS&#x3D;(&quot;192.168.X.X 1.0.0.1 1.1.1.1&quot;) You can also reserve the IP in your dhcp server (Quicker) Why do I keep getting a different IP? Add to, /etc/systemd/network/eth0.network12[DHCP]ClientIdentifier&#x3D;mac Reserve the DHCP ip in your server/router You can replace systemd-networkd with NetworkManager, this has proven to fix the IP issue with DHCP for some routers HELP!! I can’t find the IP on the ZeroW/RPi4 Open a browser and type: pikvm, still doesnt work? Use the FING mobile app to scan your network, its free Install Angry IP scanner, tools/preferences/Display results in the results list/Select Alive hosts, modify IP range, hit start Using FF, navigate to https://pikvm (Depends on your network if this actually works, in most case’s will work)) Open web terminal and go to root, rw then nano /etc/issue add ‘IP: \\4’ Once you reboot, you will now see the IP in the upper left The below commands will verify that your Pi on on your network12345arp -a | grep below is a list of MAC&#39;s for Raspberry Pi B8:27:EB:xx:xx:xx B8-27-EB-xx-xx-xx B827.EBxx.xxxx DC:A6:32:xx:xx:xx DC-A6-32-xx-xx-xx DCA6.32xx.xxxx E4:5F:01:xx:xx:xx E4-5F-01-xx-xx-xx E45F.01xx.xxxxPower shell: arp -a | findstr &#39;b8-27-eb&#39; (Replace with the above, all lower case) Help! I ran out of room! What now? You’ve cached package updates you no longer need. Enter read/write mode by executing rw as root Execute the following as root to clear the package cache1rm -rf &#x2F;var&#x2F;cache&#x2F;pacman&#x2F;pkg&#x2F;* Exit read/write mode by executing ro as root You can also use gparted to resize partitions without losing data, although this may delete all of your data Can you connect a camera to this and still make pikvm functional? Yes, any cheapo webcam can be used in place of the usb dongle, please use the usb image I have a question that is not answered here!! Now what? Please look at all pins on Discord Please look in #news on Discord I want the v3 hat!! Where do I get it?? At this time it is not available, due to the current pandemic the factories are running at a much slower rate HELP!! Something isn’t working!! What was the last thing or most recent thing you did? Did you undo it? Did you hook this to anything else? If not why not? Did you try different cables?Can you use an iPad on PiKVM? Yes, with the correct hardware you can control an iPad Yes, activate VNC and use JUMP app(Full featured but more expensive), or bVNC(Not recommended, lack luster features but cheap). RealVNC does NOT workCan I use RealVNC to connect to PiKVM? No, RealVNC is not a real vnc so will not work How do I add my own SSL cert? If you have a certificate(:exclamation:Making a cert falls outside the scope of PIKVM - Please reference Linux documentation:exclamation:), replace the public key in /etc/kvmd/nginx/ssl/server.crt and private key in /etc/kvmd/nginx/ssl/server.key and restart the kvmd-nginx service. It should look like the following: 1234567cd &#x2F;etc&#x2F;kvmd&#x2F;nginxcat ssl.conf (Expection of what&#39;s inside the file)ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1 TLSv1;ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;ssl_certificate &#x2F;etc&#x2F;kvmd&#x2F;nginx&#x2F;ssl&#x2F;server.crt;ssl_certificate_key &#x2F;etc&#x2F;kvmd&#x2F;nginx&#x2F;ssl&#x2F;server.key;add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; includeSubDomains&quot; always; Things to do after initial install: Fix date: ‘timedatectl list-timezones’ then ‘timedatectl set-timezone America/Los_Angeles’ (Change to your location) Update Pi-KVM, follow #news on Discord for instructions Enable Avahi-Daemon (A Zeroconf daemon) to allow finding the pikvm via mDNS queries as pikvm.local pacman -S avahi nss-mdns gtk3 python-dbus python-gobject (You may or may not need this to make it work) Enable the Avahi daemon in order to make it persistent after reboot:1systemctl enable avahi-daemon.service Start the DBus (if not already running) &amp; Avahi daemons:12systemctl start dbus.servicesystemctl start avahi-daemon.service Setup a NFS share to give read/write storage on the read only pikvm Note: this does assume you already have an NFS server on your network and accessible to pikvm Source https://linuxhint.com/install_configure_nfs/1234pacman -S nfs-utilsshowmount -e 192.168.1.XXXmount -t nfs 192.168.1.XXX:&#x2F;volume1&#x2F;Data &#x2F;mnt&#x2F;Datanano &#x2F;etc&#x2F;fstab Add To the bottom of the file1192.168.1.XXX:&#x2F;volume1&#x2F;Data &#x2F;mnt&#x2F;Data nfs auto,rw,soft 0 0 Troubleshooting :exclamation:It is expected that you are aware of basic networking while working on this project and that you have read up on the project prior to going to Discord:exclamation: Do you know the IP? Can you ping the IP? Did you swap cables? Did you swap the eth port to a known working eth port? Do you have access to another router or switch? Did you change ports on the router/switch? RPi4 - Did you hook up a monitor? Once logged in, can you ping to your gateway? Other IP’s on the same network? Did you connect a monitor to the target? Does it work? Did you connect the PIKVM to the target directly? Does it work? Reboot target Try default image, do not update and test -copy/paste into a file, call it pi-info.sh, chmod +x pi-info.sh, ./pi-info.sh Same script is located here 1234567891011121314#!&#x2F;bin&#x2F;bashuptimeTMPFILE&#x3D;&quot;&#x2F;tmp&#x2F;pacmanquery&quot;; &#x2F;bin&#x2F;rm -f $TMPFILEpacman -Q | awk &#39;&#123;print $2, $1&#125;&#39; &gt; $TMPFILEchmod go+w $TMPFILEpistat &amp;&amp; echoprintf &quot;%-18s\\t%s\\n&quot; &quot;Version&quot; &quot;Package-Name&quot; &quot;----------------------&quot; &quot;-----------------------------&quot;PACKAGES&#x3D;&quot;firmware bootloader kvmd ustreamer nginx wpa wireless&quot;for PKG in $( echo $PACKAGES ); do printf &quot;%-18s\\t%s\\n&quot; $(grep $PKG $TMPFILE | sed &#39;s&#x2F;-[1-9]&#x2F;&#x2F;g&#39;)done | grep tc35``` - CSI12345678910111213141516&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;&#96;&#96;&#96;dmesg | egrep &#39;1-1.[245]|uvc&#39;&#96;&#96;&#96; - USB&#96;&#96;&#96;systemctl status kvmd&#96;&#96;&#96;&#96;&#96;&#96;systemctl status kvmd-otg&#96;&#96;&#96;- **hint:** look at kvmd-platform line of the output... make sure it matches the image they expect for the capture device and platform- Keyboard&#x2F;Mouse icons orange? Try a different cable (ALLOT are power only), try a different usb port- Should see the following if everything is in place&#96;&#96;&#96;ls -l &#x2F;dev&#x2F;kvmd*lrwxrwxrwx 1 root root 5 Apr 5 21:33 &#x2F;dev&#x2F;kvmd-hid-keyboard -&gt; hidg0lrwxrwxrwx 1 root root 5 Apr 5 21:33 &#x2F;dev&#x2F;kvmd-hid-mouse -&gt; hidg1lrwxrwxrwx 1 root root 6 Mar 15 09:07 &#x2F;dev&#x2F;kvmd-video -&gt; video0 Common Commands for troubleshooting Pi-KVM journalctl -u kvmd journalctl -u kvmd-vnc journalctl -u kvmd-ipmi Common ARCH commands search - pacman -Ss &#39;the thing&#39; install - pacman -S &#39;the thing&#39; remove - pacman -Rscnd &#39;the thing&#39; Common wifi commands iwconfig manipulate the basic wireless parameters iwlist allow’s you to initiate scanning and list frequencies, bit-rates, encryption keys… iwspy displays per node link quality iwpriv allow’s you to manipulate the Wireless Extensions specific to a driver (private) Some examples 1iw dev wlan0 scan | egrep &quot;signal:|SSID:&quot; | sed -e &quot;s&#x2F;\\tsignal: &#x2F;&#x2F;&quot; -e &quot;s&#x2F;\\tSSID: &#x2F;&#x2F;&quot; | awk &#39;&#123;ORS &#x3D; (NR % 2 &#x3D;&#x3D; 0)? &quot;\\n&quot; : &quot; &quot;; print&#125;&#39; | sort 1iwlist wlan0 scan | egrep &quot;Cell|ESSID|Signal|Rates&quot; 1iwlist wlan0 scan 1iw wlan0 info Bootup/power issues PiKVM won’t boot past “rainbow” screen Are you plugged into the right HDMI port? Needs to be the one next to the power Have you reflashed your SD card? PiKVM Complains about low power warnings Are you using a proper power supply? Not one you hacked together Some USB power bricks advertise 5V @ 2.1A or higher, but can’t deliver consistent 5V. Best to use rpi foundation recommended power supplies USB Video Capture Issues Make sure this is a capture card and not an adapter (HDMI-&gt;USB) HDMI-CSI Capture issues Have you reset the Target PC? Are you sure it’s a bridge and not an extender? There is a difference Did you make sure it’s plugged into the right port? It needs to say Camera NOT Display Did you try another ribbon cable? Did you reseat the ribbon cable? Is the ribbon cable facing the right way? Needs to be towards the PCB (Green or Black) Capturing video from non HDMI sources TBD Keyboard/Mouse Issues TBD OTG Keyboard/Mouse Connection TBD Arduino Keyboard Mouse Connection (UART wiring) TBD Arduino Keyboard/Mouse Connection (SPI Wiring) TBD ATX Control Issues TBD HDMI KVM Interface Issues TBD Connection issues TBD Misc stuff Fully working example of a Pi4 USB-HDMI KVM attached to AIMOS 4-port HDMI KVM switch (8 port is on AliExpress), with keyboard hotkey switching between inputs, and mass storage media emulation on a Pi Zero W https://docs.google.com/document/d/1wgBZHxwpbJWkJBD3I8ZkZxSDxt0DdNDDYRNtVoL_vK4 Useful scripts that enhance the Pi-KVM’s functionality https://pastebin.com/u/srepac Useful links https://www.tomshardware.com/how-to/kvm-over-ip-raspberry-pi - Very good article on PI-KVM setup Pi-KVM Power/Data OTG splitter boards https://www.pishop.us/product/usb-pwr-splitter/ (Look on Tindi for the same thing in the UK) https://www.pishop.us/product/usb-c-pwr-splitter/ (Look on Tindi for the same thing in the UK) Current 3D cases that support the various Pi-KVM hardware configurations https://www.thingiverse.com/search?q=pi-kvm&amp;type=things&amp;sort=relevant As of March 2021, Out of Stock or hard to get, all have exceptionally LONG shipping dates - Could try AliExpress or get a usb2hdmi dongle from Amazon, please ask or search in Discord for the best known working one 1234567Ezcoo KVM - Goes out of stock frequentlyCSI2-HDMI bridge w&#x2F; TC358743XBG chip - Goes out of stock freqently Alternative names for the same devices:Tiamu Sling Yazan Ningwang Essenc GeekwormFauge Haudang AKAT Docoop Katigan Lyusa (recommended by mdevaev)LNIMI cherrypop Lopbinte Uang Tuneway MustwellFacibom Binchil Cobeky Ctzrzyt Davitu Community recommended USB capture card Community recommended Loop device that allows Monitor+PiKVM","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/flashing_hid","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/flashing_hid/","link":"","permalink":"http://example.com/2021/03/02/pikvm/flashing_hid/","excerpt":"","text":"Flashing the Arduino HIDTTL Firmware (the default option for v0 or v2)This operation can be done using your RPi (except Pi Zero W). Here the common steps: Disconnect the RESET wire from the Arduino board. Connect the Arduino and RPi with a suitable USB cable. Log in to the Raspberry Pi using SSH (ssh root@&lt;addr&gt; with password root by default) or using keyboard and monitor. The Raspberry Pi obtains the network address over DHCP. Upload the firmware (USB keyboard &amp; mouse is used by default, on this step you can choose PS/2 keyboard):1234567[root@pikvm ~]# rw[root@pikvm ~]# systemctl stop kvmd[root@pikvm ~]# cp -r /usr/share/kvmd/hid ~[root@pikvm ~]# cd ~/hid[root@pikvm hid]# make[root@pikvm hid]# make install[root@pikvm hid]# reboot Connect the RESET wire, disconnect the USB cable, and reboot the RPi. With a Pi Zero W, you may consider building the firmware on a faster system and programming using USB or booting from another SD card and following the build steps using a clone of the kvmd repo. SPI FirmwareThis operation can be done using your Raspberry Pi without disconnecting any wires: Connect the Arduino and RPi with a suitable USB cable. Log in to the Raspberry Pi using SSH (ssh root@&lt;addr&gt; with password root by default) or using keyboard and monitor. The Raspberry Pi obtains the network address over DHCP. Build and upload the firmware (USB keyboard &amp; mouse is used by default)1234567[root@pikvm ~]# rw[root@pikvm ~]# systemctl stop kvmd[root@pikvm ~]# cp -r /usr/share/kvmd/hid ~[root@pikvm ~]# cd ~/hid[root@pikvm hid]# make spi[root@pikvm hid]# make install[root@pikvm hid]# reboot Common Errors Circuit IssuesCommon - Reset WireDifferent pins are used for the reset wire but serve a similar function. For programming the TTL firmware over USB, the reset wire should be disconnected. When programming using SPI, the reset wire needs to be connected through a transistor circuit and connected to GPIO25 (pin 22 on the GPIO header) SPI-specific WiringThe 3v3, ground, Reset (GPIO25), MISO, MOSI, SCLK, and CS1 need to be connected appropriately. SPIO_CS0 and SPIO_CS1 can both be used but the default configuration uses SPIO_CS1 for the Arduino Microcontroller (CS0 is used for another device on the v3). These generally follow a block as follows: 1234567Pin 0 2 4 2 0 0 .........GR.C.......Row # 12345678901234567890 ........3MMS........Pin 0 1 3 1 7 9 The most common error is an “off-by-one” error where pins are shifted by a row. Some cases have non-standard GPIO layouts so please be careful when following these instructions using a case that has a modified pinout. Library CompatibilityOn make install you may encounter the following error: 1&#x2F;root&#x2F;.platformio&#x2F;packages&#x2F;tool-avrdude&#x2F;avrdude: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory Create a symlink for this library: 1[root@pikvm ~]# ln -s /usr/lib/libtinfo.so.6 /usr/lib/libtinfo.so.5 And run make install again. If you have any problems or questions, contact us using Discord: https://discord.gg/bpmXfz5 Example SPI build + Flash Here's an end-to-end build and flash of the SPI HID firmware using the default options as described above. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265[root@pikvm ~]# rw[root@pikvm ~]# systemctl stop kvmd[root@pikvm ~]# cp -r /usr/share/kvmd/hid ~[root@pikvm ~]# cd ~/hid[root@pikvm hid]# make spimake _build E=spimake[1]: Entering directory &#x27;/root/hid&#x27;rm -f .currentplatformio run --environment spi************************************************************************************************************************************If you like PlatformIO, please:- follow us on Twitter to stay up-to-date on the latest project news &gt; https://twitter.com/PlatformIO_Org- star it on GitHub &gt; https://github.com/platformio/platformio- try PlatformIO IDE for embedded development &gt; https://platformio.org/platformio-ide************************************************************************************************************************************Processing spi (platform: atmelavr; board: micro; framework: arduino)------------------------------------------------------------------------------------------------------------------------------------Platform Manager: Installing atmelavrUnpacking [####################################] 100%Platform Manager: atmelavr @ 3.1.0 has been installed!The platform &#x27;atmelavr&#x27; has been successfully installed!The rest of the packages will be installed later depending on your build environment.Tool Manager: Installing platformio/toolchain-atmelavr @ ~1.50400.0Downloading [####################################] 100%Unpacking [####################################] 100%Tool Manager: toolchain-atmelavr @ 1.50400.190710 has been installed!Tool Manager: Installing platformio/framework-arduino-avr @ ~5.1.0Downloading [####################################] 100%Unpacking [####################################] 100%Tool Manager: framework-arduino-avr @ 5.1.0 has been installed!Tool Manager: Installing platformio/tool-avrdude @ *Tool Manager: tool-avrdude @ 1.60300.200527 has been installed!Tool Manager: Installing platformio/tool-scons @ ~4.40001.0Unpacking [####################################] 100%Tool Manager: tool-scons @ 4.40001.0 has been installed!Verbose mode can be enabled via `-v, --verbose` optionpatch([], [])patch([], [])CONFIGURATION: https://docs.platformio.org/page/boards/atmelavr/micro.htmlPLATFORM: Atmel AVR (3.1.0) &gt; Arduino MicroHARDWARE: ATMEGA32U4 16MHz, 2.50KB RAM, 28KB FlashDEBUG: Current (simavr) On-board (simavr)PACKAGES: - framework-arduino-avr 5.1.0 - tool-avrdude 1.60300.200527 (6.3.0) - toolchain-atmelavr 1.50400.190710 (5.4.0)LDF: Library Dependency Finder -&gt; http://bit.ly/configure-pio-ldfLDF Modes: Finder ~ chain, Compatibility ~ softLibrary Manager: Installing HID-Project @ 2.6.1Library Manager: HID-Project @ 2.6.1 has been installed!Library Manager: Installing git+https://github.com/Harvie/ps2dev#v0.0.3git version 2.30.0Cloning into &#x27;/root/hid/.platformio/.cache/tmp/pkg-installing-84arveu0&#x27;...Note: switching to &#x27;a043002178450772d72a58b0c42752a506fd4dea&#x27;.You are in &#x27;detached HEAD&#x27; state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by switching back to a branch.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -c with the switch command. Example: git switch -c &lt;new-branch-name&gt;Or undo this operation with: git switch -Turn off this advice by setting config variable advice.detachedHead to falseLibrary Manager: ps2dev @ 0.0.3+sha.a043002 has been installed!Library Manager: Installing digitalWriteFast @ 1.0.0Library Manager: digitalWriteFast @ 1.0.0 has been installed!Found 8 compatible librariesScanning dependencies...Dependency Graph|-- &lt;HID-Project&gt; 2.6.1| |-- &lt;HID&gt; 1.0|-- &lt;ps2dev&gt; 0.0.3+sha.a043002|-- &lt;digitalWriteFast&gt; 1.0.0|-- &lt;SPI&gt; 1.0Building in release modepatch -p1 -d /root/hid/.platformio/packages/framework-arduino-avr &lt; patches/no-main.patchpatching file cores/arduino/main.cpp&lt;lambda&gt;([], [])patch -p1 -d /root/hid/.platformio/packages/framework-arduino-avr &lt; patches/optional-usb-serial.patchpatching file cores/arduino/PluggableUSB.cpppatching file cores/arduino/USBCore.cpp&lt;lambda&gt;([], [])patch -p1 -d /root/hid/.platformio/packages/framework-arduino-avr &lt; patches/get-plugged-endpoint.patchpatching file cores/arduino/PluggableUSB.h&lt;lambda&gt;([], [])patch -p1 -d /root/hid/.pio/libdeps/spi/HID-Project &lt; patches/shut-up.patchpatching file src/KeyboardLayouts/ImprovedKeylayouts.h&lt;lambda&gt;([], [])patch -p1 -d /root/hid/.pio/libdeps/spi/HID-Project &lt; patches/no-hid-singletones.patchpatching file src/SingleReport/BootKeyboard.cpppatching file src/SingleReport/BootKeyboard.hpatching file src/SingleReport/BootMouse.cpppatching file src/SingleReport/BootMouse.hpatching file src/SingleReport/SingleAbsoluteMouse.cpppatching file src/SingleReport/SingleAbsoluteMouse.h&lt;lambda&gt;([], [])patch -p1 -d /root/hid/.pio/libdeps/spi/HID-Project &lt; patches/absmouse-win-fix.patchpatching file src/SingleReport/SingleAbsoluteMouse.cpp&lt;lambda&gt;([], [])Compiling .pio/build/spi/src/main.cpp.oCompiling .pio/build/spi/src/spi.cpp.oCompiling .pio/build/spi/lib2d3/HID/HID.cpp.oCompiling .pio/build/spi/libd81/HID-Project/MultiReport/AbsoluteMouse.cpp.oCompiling .pio/build/spi/libd81/HID-Project/MultiReport/Consumer.cpp.oArchiving .pio/build/spi/lib2d3/libHID.aIndexing .pio/build/spi/lib2d3/libHID.aCompiling .pio/build/spi/libd81/HID-Project/MultiReport/Gamepad.cpp.oCompiling .pio/build/spi/libd81/HID-Project/MultiReport/ImprovedKeyboard.cpp.oCompiling .pio/build/spi/libd81/HID-Project/MultiReport/ImprovedMouse.cpp.oCompiling .pio/build/spi/libd81/HID-Project/MultiReport/NKROKeyboard.cpp.oCompiling .pio/build/spi/libd81/HID-Project/MultiReport/SurfaceDial.cpp.oCompiling .pio/build/spi/libd81/HID-Project/MultiReport/System.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/BootKeyboard.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/BootMouse.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/RawHID.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/SingleAbsoluteMouse.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/SingleConsumer.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/SingleGamepad.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/SingleNKROKeyboard.cpp.oCompiling .pio/build/spi/libd81/HID-Project/SingleReport/SingleSystem.cpp.oCompiling .pio/build/spi/libd81/HID-Project/port/samd.cpp.oCompiling .pio/build/spi/libeaf/ps2dev/ps2dev.cpp.oArchiving .pio/build/spi/lib822/libdigitalWriteFast.aIndexing .pio/build/spi/lib822/libdigitalWriteFast.aCompiling .pio/build/spi/lib519/SPI/SPI.cpp.o.pio/libdeps/spi/ps2dev/src/ps2dev.cpp: In member function &#x27;int PS2dev::keyboard_reply(unsigned char, unsigned char*)&#x27;:.pio/libdeps/spi/ps2dev/src/ps2dev.cpp:243:17: warning: variable &#x27;enabled&#x27; set but not used [-Wunused-but-set-variable] unsigned char enabled; ^Archiving .pio/build/spi/libd81/libHID-Project.aArchiving .pio/build/spi/libFrameworkArduinoVariant.aIndexing .pio/build/spi/libFrameworkArduinoVariant.aIndexing .pio/build/spi/libd81/libHID-Project.aCompiling .pio/build/spi/FrameworkArduino/CDC.cpp.oArchiving .pio/build/spi/lib519/libSPI.aArchiving .pio/build/spi/libeaf/libps2dev.aIndexing .pio/build/spi/lib519/libSPI.aIndexing .pio/build/spi/libeaf/libps2dev.aCompiling .pio/build/spi/FrameworkArduino/HardwareSerial.cpp.oCompiling .pio/build/spi/FrameworkArduino/HardwareSerial0.cpp.oCompiling .pio/build/spi/FrameworkArduino/HardwareSerial1.cpp.oCompiling .pio/build/spi/FrameworkArduino/HardwareSerial2.cpp.oCompiling .pio/build/spi/FrameworkArduino/HardwareSerial3.cpp.oCompiling .pio/build/spi/FrameworkArduino/IPAddress.cpp.oCompiling .pio/build/spi/FrameworkArduino/PluggableUSB.cpp.oCompiling .pio/build/spi/FrameworkArduino/Print.cpp.oCompiling .pio/build/spi/FrameworkArduino/Stream.cpp.oCompiling .pio/build/spi/FrameworkArduino/Tone.cpp.oCompiling .pio/build/spi/FrameworkArduino/USBCore.cpp.oCompiling .pio/build/spi/FrameworkArduino/WInterrupts.c.oCompiling .pio/build/spi/FrameworkArduino/WMath.cpp.o.platformio/packages/framework-arduino-avr/cores/arduino/USBCore.cpp: In function &#x27;bool ClassInterfaceRequest(USBSetup&amp;)&#x27;:.platformio/packages/framework-arduino-avr/cores/arduino/USBCore.cpp:378:5: warning: unused variable &#x27;i&#x27; [-Wunused-variable] u8 i = setup.wIndex; ^Compiling .pio/build/spi/FrameworkArduino/WString.cpp.oCompiling .pio/build/spi/FrameworkArduino/abi.cpp.oCompiling .pio/build/spi/FrameworkArduino/hooks.c.oCompiling .pio/build/spi/FrameworkArduino/main.cpp.oCompiling .pio/build/spi/FrameworkArduino/new.cpp.oCompiling .pio/build/spi/FrameworkArduino/wiring.c.oCompiling .pio/build/spi/FrameworkArduino/wiring_analog.c.oCompiling .pio/build/spi/FrameworkArduino/wiring_digital.c.oCompiling .pio/build/spi/FrameworkArduino/wiring_pulse.S.oCompiling .pio/build/spi/FrameworkArduino/wiring_pulse.c.oCompiling .pio/build/spi/FrameworkArduino/wiring_shift.c.oArchiving .pio/build/spi/libFrameworkArduino.aIndexing .pio/build/spi/libFrameworkArduino.aLinking .pio/build/spi/firmware.elfBuilding .pio/build/spi/firmware.hexChecking size .pio/build/spi/firmware.elfAdvanced Memory Usage is available via &quot;PlatformIO Home &gt; Project Inspect&quot;RAM: [= ] 9.9% (used 253 bytes from 2560 bytes)Flash: [=== ] 34.7% (used 9952 bytes from 28672 bytes)=================================================== [SUCCESS] Took 56.86 seconds ===================================================Environment Status Duration------------- -------- ------------spi SUCCESS 00:00:56.861=================================================== 1 succeeded in 00:00:56.861 ===================================================************************************************************************************************************************************There is a new version 5.1.0 of PlatformIO available.Please upgrade it via `platformio upgrade` or `pip install -U platformio` command.Changes: https://docs.platformio.org/en/latest/history.html************************************************************************************************************************************echo -n spi &gt; .currentmake[1]: Leaving directory &#x27;/root/hid&#x27;[root@pikvm hid]# make installplatformio run --environment spi --target uploadProcessing spi (platform: atmelavr; board: micro; framework: arduino)------------------------------------------------------------------------------------------------------------------------------------Verbose mode can be enabled via `-v, --verbose` optionCONFIGURATION: https://docs.platformio.org/page/boards/atmelavr/micro.htmlPLATFORM: Atmel AVR (3.1.0) &gt; Arduino MicroHARDWARE: ATMEGA32U4 16MHz, 2.50KB RAM, 28KB FlashDEBUG: Current (simavr) On-board (simavr)PACKAGES: - framework-arduino-avr 5.1.0 - tool-avrdude 1.60300.200527 (6.3.0) - toolchain-atmelavr 1.50400.190710 (5.4.0)LDF: Library Dependency Finder -&gt; http://bit.ly/configure-pio-ldfLDF Modes: Finder ~ chain, Compatibility ~ softFound 8 compatible librariesScanning dependencies...Dependency Graph|-- &lt;HID-Project&gt; 2.6.1| |-- &lt;HID&gt; 1.0|-- &lt;ps2dev&gt; 0.0.3+sha.a043002|-- &lt;digitalWriteFast&gt; 1.0.0|-- &lt;SPI&gt; 1.0Building in release modeChecking size .pio/build/spi/firmware.elfAdvanced Memory Usage is available via &quot;PlatformIO Home &gt; Project Inspect&quot;RAM: [= ] 9.9% (used 253 bytes from 2560 bytes)Flash: [=== ] 34.7% (used 9952 bytes from 28672 bytes)Configuring upload protocol...AVAILABLE: customCURRENT: upload_protocol = customUploading .pio/build/spi/firmware.hexavrdude: AVR device initialized and ready to accept instructionsReading | ################################################## | 100% 0.00savrdude: Device signature = 0x1e9587 (probably m32u4)avrdude: NOTE: &quot;flash&quot; memory has been specified, an erase cycle will be performed To disable this feature, specify the -D option.avrdude: erasing chipavrdude: reading input file &quot;.pio/build/spi/firmware.hex&quot;avrdude: writing flash (9952 bytes):Writing | ################################################## | 100% 2.78savrdude: 9952 bytes of flash writtenavrdude: verifying flash memory against .pio/build/spi/firmware.hex:avrdude: load data flash data from input file .pio/build/spi/firmware.hex:avrdude: input file .pio/build/spi/firmware.hex contains 9952 bytesavrdude: reading on-chip flash data:Reading | ################################################## | 100% 2.33savrdude: verifying ...avrdude: 9952 bytes of flash verifiedavrdude: safemode: Fuses OK (E:CB, H:D8, L:FF)avrdude done. Thank you.=================================================== [SUCCESS] Took 7.54 seconds ===================================================Environment Status Duration------------- -------- ------------spi SUCCESS 00:00:07.536=================================================== 1 succeeded in 00:00:07.536 ===================================================[root@pikvm hid]# reboot","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/api","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/api/","link":"","permalink":"http://example.com/2021/03/02/pikvm/api/","excerpt":"","text":"APIThis document describes the Pi-KVM API. Since the system consists of microservices, here is a common API with a common entry point provided by Nginx. The examples above use curl and websocat with the -k parameter to disable SSL certificate verification, since the self-signed certificateis used in the default installation. Authorization: /api/authAll APIs are restricted to authorization. To make requests, you either need to authorize each request individually,or get a token and pass it as a cookie with each request. Single request authThere are two options here: Using X-headers. Just pass X-KVMD-User and X-KVMD-Passwd with the request: 1$ curl -k -H X-KVMD-User:admin -H X-KVMD-Passwd:admin https:&#x2F;&#x2F;pikvm&#x2F;api&#x2F;auth&#x2F;check Using HTTP Basic Auth. Please note: contrary to the standard, this method DOES NOT use the WWW-Authenticate header.HTTP Basic Auth in this implementation is intended only for compatibility with other systems, such as Prometheus. 1$ curl -k --user admin:admin https:&#x2F;&#x2F;pikvm&#x2F;api&#x2F;auth&#x2F;check Session-based cookie auth Authorize and get token for the user using POST /api/auth/login: 1234$ curl -k -v -X POST --data user&#x3D;admin --data passwd&#x3D;admin https:&#x2F;&#x2F;pikvm&#x2F;api&#x2F;auth&#x2F;login...&lt; Set-Cookie: auth_token&#x3D;796cb83b11de4fcb749bc1bad14a91fb06dede84672b2f847fef1e988e6900de; Path&#x3D;&#x2F;... On success the cookie auth_token will be received with 200 OK. On invalid user or password you will get 403 Forbidden. The handle GET /api/auth/check can be used for check the auth status. Return of 200 OK will signal that user is authenticated.If the token or any of the single-request auth methods are missing, 401 Unauthorized will be returned.In case of incorrect credentials or token, 403 Forbidden will be returned. The handle POST /api/auth/logout can be used to invalidate session token. The response codes will be similar to the previous handle. The main web socket: /api/wsMost of the data during the user’s work with pikvm is transmitted over a web socket. This includes mouse events, keyboard input, change the state of the various subsystems (such as ATX and Mass Storage Drive). Each event type will be described in the corresponding paragraph for its component. When connecting via a web socket, the client receives current states as separate events. Then, as the states change, it will receive new events. In a normal situation, opening a socket session triggers the video streamer to start. The streamer works as long as there is at least one client connected via a web socket. After the last connection is closed and the client timeout expires, the streamer will also be terminated. It is possible create a session that will not start the streamer and will not be counted when counting clients to stop the streamer. To do this, use the URL parameter stream=0: 1$ websocat -k wss:&#x2F;&#x2F;pikvm&#x2F;api&#x2F;ws?stream&#x3D;0 -H X-KVMD-User:admin -H X-KVMD-Passwd:admin Output with initial events 123456789101112&#123;&quot;event_type&quot;: &quot;gpio_model_state&quot;, &quot;event&quot;: &#123;&quot;scheme&quot;: &#123;&quot;inputs&quot;: &#123;&quot;led1&quot;: &#123;&quot;hw&quot;: &#123;&quot;driver&quot;: &quot;__gpio__&quot;, &quot;pin&quot;: 19&#125;&#125;, &quot;led2&quot;: &#123;&quot;hw&quot;: &#123;&quot;driver&quot;: &quot;__gpio__&quot;, &quot;pin&quot;: 16&#125;&#125;&#125;, &quot;outputs&quot;: &#123;&quot;button1&quot;: &#123;&quot;switch&quot;: false, &quot;pulse&quot;: &#123;&quot;delay&quot;: 0.1, &quot;min_delay&quot;: 0.1, &quot;max_delay&quot;: 0.1&#125;, &quot;hw&quot;: &#123;&quot;driver&quot;: &quot;__gpio__&quot;, &quot;pin&quot;: 26&#125;&#125;, &quot;button2&quot;: &#123;&quot;switch&quot;: false, &quot;pulse&quot;: &#123;&quot;delay&quot;: 0.1, &quot;min_delay&quot;: 0.1, &quot;max_delay&quot;: 0.1&#125;, &quot;hw&quot;: &#123;&quot;driver&quot;: &quot;__gpio__&quot;, &quot;pin&quot;: 20&#125;&#125;, &quot;relay1&quot;: &#123;&quot;switch&quot;: true, &quot;pulse&quot;: &#123;&quot;delay&quot;: 0.1, &quot;min_delay&quot;: 0.1, &quot;max_delay&quot;: 0.1&#125;, &quot;hw&quot;: &#123;&quot;driver&quot;: &quot;relay&quot;, &quot;pin&quot;: 0&#125;&#125;, &quot;relay2&quot;: &#123;&quot;switch&quot;: true, &quot;pulse&quot;: &#123;&quot;delay&quot;: 2.0, &quot;min_delay&quot;: 0.1, &quot;max_delay&quot;: 5.0&#125;, &quot;hw&quot;: &#123;&quot;driver&quot;: &quot;relay&quot;, &quot;pin&quot;: 1&#125;&#125;&#125;&#125;, &quot;view&quot;: &#123;&quot;header&quot;: &#123;&quot;title&quot;: &quot;Switches&quot;&#125;, &quot;table&quot;: [[&#123;&quot;type&quot;: &quot;label&quot;, &quot;text&quot;: &quot;Generic GPIO leds&quot;&#125;], null, [&#123;&quot;type&quot;: &quot;label&quot;, &quot;text&quot;: &quot;Test 1:&quot;&#125;, &#123;&quot;type&quot;: &quot;input&quot;, &quot;channel&quot;: &quot;led1&quot;, &quot;color&quot;: &quot;green&quot;&#125;, &#123;&quot;type&quot;: &quot;output&quot;, &quot;channel&quot;: &quot;button1&quot;, &quot;text&quot;: &quot;Click&quot;&#125;], [&#123;&quot;type&quot;: &quot;label&quot;, &quot;text&quot;: &quot;Test 2:&quot;&#125;, &#123;&quot;type&quot;: &quot;input&quot;, &quot;channel&quot;: &quot;led2&quot;, &quot;color&quot;: &quot;green&quot;&#125;, &#123;&quot;type&quot;: &quot;output&quot;, &quot;channel&quot;: &quot;button2&quot;, &quot;text&quot;: &quot;Click&quot;&#125;], null, [&#123;&quot;type&quot;: &quot;label&quot;, &quot;text&quot;: &quot;HID Relays /dev/hidraw0&quot;&#125;], null, [&#123;&quot;type&quot;: &quot;label&quot;, &quot;text&quot;: &quot;Relay #1:&quot;&#125;, &#123;&quot;type&quot;: &quot;output&quot;, &quot;channel&quot;: &quot;relay1&quot;, &quot;text&quot;: &quot;Boop 0.1&quot;&#125;], [&#123;&quot;type&quot;: &quot;label&quot;, &quot;text&quot;: &quot;Relay #2:&quot;&#125;, &#123;&quot;type&quot;: &quot;output&quot;, &quot;channel&quot;: &quot;relay2&quot;, &quot;text&quot;: &quot;Boop 2.0&quot;&#125;]]&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;info_extras_state&quot;, &quot;event&quot;: &#123;&quot;vnc&quot;: &#123;&quot;name&quot;: &quot;VNC&quot;, &quot;description&quot;: &quot;Show VNC information&quot;, &quot;icon&quot;: &quot;share/svg/vnc.svg&quot;, &quot;path&quot;: &quot;vnc&quot;, &quot;keyboard_cap&quot;: false, &quot;daemon&quot;: &quot;kvmd-vnc&quot;, &quot;port&quot;: 5900, &quot;place&quot;: 20, &quot;enabled&quot;: true&#125;, &quot;ipmi&quot;: &#123;&quot;name&quot;: &quot;IPMI&quot;, &quot;description&quot;: &quot;Show IPMI information&quot;, &quot;icon&quot;: &quot;share/svg/ipmi.svg&quot;, &quot;path&quot;: &quot;ipmi&quot;, &quot;keyboard_cap&quot;: false, &quot;daemon&quot;: &quot;kvmd-ipmi&quot;, &quot;port&quot;: 623, &quot;place&quot;: 21, &quot;enabled&quot;: true&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;info_hw_state&quot;, &quot;event&quot;: &#123;&quot;platform&quot;: &#123;&quot;type&quot;: &quot;rpi&quot;, &quot;base&quot;: &quot;Virtual Raspberry Pi&quot;&#125;, &quot;health&quot;: &#123;&quot;temp&quot;: &#123;&quot;cpu&quot;: 36.511, &quot;gpu&quot;: 35.0&#125;, &quot;throttling&quot;: &#123;&quot;raw_flags&quot;: 0, &quot;parsed_flags&quot;: &#123;&quot;undervoltage&quot;: &#123;&quot;now&quot;: false, &quot;past&quot;: false&#125;, &quot;freq_capped&quot;: &#123;&quot;now&quot;: false, &quot;past&quot;: false&#125;, &quot;throttled&quot;: &#123;&quot;now&quot;: false, &quot;past&quot;: false&#125;&#125;&#125;&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;info_meta_state&quot;, &quot;event&quot;: &#123;&quot;server&quot;: &#123;&quot;host&quot;: &quot;localhost.localdomain&quot;&#125;, &quot;kvm&quot;: &#123;&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;info_system_state&quot;, &quot;event&quot;: &#123;&quot;kvmd&quot;: &#123;&quot;version&quot;: &quot;1.102&quot;&#125;, &quot;streamer&quot;: &#123;&quot;app&quot;: &quot;ustreamer&quot;, &quot;version&quot;: &quot;1.25&quot;, &quot;features&quot;: &#123;&quot;WITH_OMX&quot;: false, &quot;WITH_GPIO&quot;: false, &quot;WITH_PTHREAD_NP&quot;: true, &quot;WITH_SETPROCTITLE&quot;: true, &quot;HAS_PDEATHSIG&quot;: true&#125;&#125;, &quot;kernel&quot;: &#123;&quot;system&quot;: &quot;Linux&quot;, &quot;release&quot;: &quot;5.8.10-arch1-1&quot;, &quot;version&quot;: &quot;#1 SMP PREEMPT Thu, 17 Sep 2020 18:01:06 +0000&quot;, &quot;machine&quot;: &quot;x86_64&quot;&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;wol_state&quot;, &quot;event&quot;: &#123;&quot;enabled&quot;: false, &quot;target&quot;: &#123;&quot;ip&quot;: &quot;255.255.255.255&quot;, &quot;port&quot;: 9, &quot;mac&quot;: &quot;&quot;&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;gpio_state&quot;, &quot;event&quot;: &#123;&quot;inputs&quot;: &#123;&quot;led1&quot;: &#123;&quot;online&quot;: true, &quot;state&quot;: false&#125;, &quot;led2&quot;: &#123;&quot;online&quot;: true, &quot;state&quot;: false&#125;&#125;, &quot;outputs&quot;: &#123;&quot;button1&quot;: &#123;&quot;online&quot;: true, &quot;state&quot;: false, &quot;busy&quot;: false&#125;, &quot;button2&quot;: &#123;&quot;online&quot;: true, &quot;state&quot;: false, &quot;busy&quot;: false&#125;, &quot;relay1&quot;: &#123;&quot;online&quot;: false, &quot;state&quot;: false, &quot;busy&quot;: false&#125;, &quot;relay2&quot;: &#123;&quot;online&quot;: false, &quot;state&quot;: false, &quot;busy&quot;: false&#125;&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;hid_state&quot;, &quot;event&quot;: &#123;&quot;online&quot;: true, &quot;keyboard&quot;: &#123;&quot;online&quot;: true, &quot;leds&quot;: &#123;&quot;caps&quot;: false, &quot;scroll&quot;: false, &quot;num&quot;: false&#125;&#125;, &quot;mouse&quot;: &#123;&quot;online&quot;: true&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;atx_state&quot;, &quot;event&quot;: &#123;&quot;enabled&quot;: true, &quot;busy&quot;: false, &quot;leds&quot;: &#123;&quot;power&quot;: false, &quot;hdd&quot;: false&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;msd_state&quot;, &quot;event&quot;: &#123;&quot;enabled&quot;: true, &quot;online&quot;: true, &quot;busy&quot;: false, &quot;storage&quot;: &#123;&quot;size&quot;: 234950152192, &quot;free&quot;: 23514271744, &quot;images&quot;: &#123;&#125;, &quot;uploading&quot;: false&#125;, &quot;drive&quot;: &#123;&quot;image&quot;: null, &quot;connected&quot;: false, &quot;cdrom&quot;: true&#125;, &quot;features&quot;: &#123;&quot;multi&quot;: true, &quot;cdrom&quot;: true&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;streamer_state&quot;, &quot;event&quot;: &#123;&quot;limits&quot;: &#123;&quot;max_fps&quot;: 40&#125;, &quot;params&quot;: &#123;&quot;desired_fps&quot;: 30, &quot;quality&quot;: 80&#125;, &quot;snapshot&quot;: &#123;&quot;saved&quot;: null&#125;, &quot;streamer&quot;: null, &quot;features&quot;: &#123;&quot;quality&quot;: true, &quot;resolution&quot;: false&#125;&#125;&#125;&#123;&quot;event_type&quot;: &quot;loop&quot;, &quot;event&quot;: &#123;&#125;&#125; After connecting the client receives a bundle of states of all KVMD subsystems. After the batch is completed, it sends a loop event, which means that the websocket has entered event loop mode. Now it will send new states and respond to client’s requests. Another type of event is ping, which can be sent by the client: &#123;&quot;event_type&quot;: &quot;ping&quot;, &quot;event&quot;: &#123;&#125;&#125;. If the server is running, it will respond with pong: &#123;&quot;event_type&quot;: &quot;pong&quot;, &quot;event&quot;: &#123;&#125;&#125;. System info: /api/infoOn GET this handle will return general information about the Pi-KVM device. If you specify the fields query parameter, only the requested category will be selected, like fields=system,hw. By default all categories will be displayed: 1$ curl -k -H X-KVMD-User:admin -H X-KVMD-Passwd:admin http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;info Example 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&#123; &quot;ok&quot;: true, &quot;result&quot;: &#123; &quot;extras&quot;: &#123; // Installed applications; null on internal error &quot;ipmi&quot;: &#123; &quot;daemon&quot;: &quot;kvmd-ipmi&quot;, &quot;description&quot;: &quot;Show IPMI information&quot;, &quot;enabled&quot;: true, &quot;icon&quot;: &quot;share/svg/ipmi.svg&quot;, &quot;keyboard_cap&quot;: false, &quot;name&quot;: &quot;IPMI&quot;, &quot;path&quot;: &quot;ipmi&quot;, &quot;place&quot;: 21, &quot;port&quot;: 623 &#125;, &quot;vnc&quot;: &#123; &quot;daemon&quot;: &quot;kvmd-vnc&quot;, &quot;description&quot;: &quot;Show VNC information&quot;, &quot;enabled&quot;: true, &quot;icon&quot;: &quot;share/svg/vnc.svg&quot;, &quot;keyboard_cap&quot;: false, &quot;name&quot;: &quot;VNC&quot;, &quot;path&quot;: &quot;vnc&quot;, &quot;place&quot;: 20, &quot;port&quot;: 5900 &#125; &#125;, &quot;hw&quot;: &#123; // Hardware info &quot;health&quot;: &#123; &quot;temp&quot;: &#123; &quot;cpu&quot;: 36.511, // /sys/class/thermal/thermal_zone0/temp / 1000; null on error &quot;gpu&quot;: 35.0 // vcgencmd measure_temp; null on error &#125;, &quot;throttling&quot;: &#123; // vcgencmd get_throttled; null on error &quot;parsed_flags&quot;: &#123; &quot;freq_capped&quot;: &#123; &quot;now&quot;: false, &quot;past&quot;: false &#125;, &quot;throttled&quot;: &#123; &quot;now&quot;: false, &quot;past&quot;: false &#125;, &quot;undervoltage&quot;: &#123; &quot;now&quot;: false, &quot;past&quot;: false &#125; &#125;, &quot;raw_flags&quot;: 0 &#125; &#125;, &quot;platform&quot;: &#123; &quot;base&quot;: &quot;Raspberry Pi 4 Model B Rev 1.1&quot;, // /proc/device-tree/model; null on error &quot;type&quot;: &quot;rpi&quot; &#125; &#125;, &quot;meta&quot;: &#123; // /etc/kvmd/meta.yaml; null on error &quot;kvm&quot;: &#123;&#125;, &quot;server&quot;: &#123; &quot;host&quot;: &quot;localhost.localdomain&quot; &#125; &#125;, &quot;system&quot;: &#123; &quot;kernel&quot;: &#123; &quot;machine&quot;: &quot;x86_64&quot;, &quot;release&quot;: &quot;5.8.14-arch1-1&quot;, &quot;system&quot;: &quot;Linux&quot;, &quot;version&quot;: &quot;#1 SMP PREEMPT Wed, 07 Oct 2020 23:59:46 +0000&quot; &#125;, &quot;kvmd&quot;: &#123; &quot;version&quot;: &quot;2.1&quot; &#125;, &quot;streamer&quot;: &#123; &quot;app&quot;: &quot;ustreamer&quot;, &quot;features&quot;: &#123; // &#123;&#125; on error &quot;HAS_PDEATHSIG&quot;: true, &quot;WITH_GPIO&quot;: false, &quot;WITH_OMX&quot;: false, &quot;WITH_PTHREAD_NP&quot;: true, &quot;WITH_SETPROCTITLE&quot;: true &#125;, &quot;version&quot;: &quot;2.1&quot; // &quot;&quot; on error &#125; &#125; &#125;&#125; Each category is represented by its own event in the websocket (info_hw_state, info_system_state, etc). The event content has the same format as the category content in API. System log: /api/logOn GET this handle will display messages from all KVMD services as plain text. The follow=1 request parameter turns the request into an infinite one and you will receive new log messages in real time. The seek parameter runs the log for the specified time in seconds. For example, seek=3600 will show the log for the last hour. Both the seek and follow parameters can be used together. Get ATX state: /api/atxOn GET it will show current ATX state. Example 1234567891011&#123; &quot;ok&quot;: true, &quot;result&quot;: &#123; &quot;busy&quot;: false, // True if ATX is busy performing an operation and does not accept commands &quot;enabled&quot;: true, &quot;leds&quot;: &#123; &quot;hdd&quot;: false, &quot;power&quot;: false &#125; &#125;&#125; Set ATX PSU state: /api/atx/powerOn POST it will change ATX power supply state to desired.Parameters: action describes desired state: on - turned on (do nothing in case PSU is already on); off - turned off (aka soft-off), emulates short-press on the power button; off_hard - emulates long (5+ seconds) press on the power button; reset_hard emulates pressing reset button (hardware hot reset). wait - boolean. Says if call should return immediately or just after finishing operation. Emulate pressing buttons on computer case: /api/atx/clickOn POST send button press events to {front-}panel header (like you pressing buttins on your computer’s case).Parameters: button specifies the desired computer case button you would like to press. Currently supported options are: power — for short press on power button, power_long — for pressing POWER button for 4+ seconds (force OFF), reset — to initiate cold-reset wait Boolean. Says if call should return immediately or just after finishing operation. To be continued ===&gt;Unfortunately, the developer doesn’t have enough time to fully describe the API. You can find all existing APIs in the KVMD source tree. We would appreciate your help with documentation.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/arduino_hid","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/arduino_hid/","link":"","permalink":"http://example.com/2021/03/02/pikvm/arduino_hid/","excerpt":"","text":"Hardware Arduino HID instead of the OTGUsing Arduino HID on non-v0 platforms is useful if you need a simple and primitive keyboard/mouse emulator device. For example when used with a hardware KVM switch which does not recognize composite HID. You can also use the Arduino HID to emulate the PS/2 keyboard. USB keyboard &amp; mouse Build and connect HID according to the diagram (the bottom part with transistor, level-shifter and Arduino). Switch to RW-mode using command rw. Add these lines to /etc/kvmd/override.yaml (remove &#123;&#125; in the file before):12345kvmd: hid: type: serial reset_pin: 4 device: /dev/kvmd-hid Create file /etc/udev/rules.d/99-kvmd-extra.rules:1KERNEL&#x3D;&#x3D;&quot;ttyAMA0&quot;, SYMLINK+&#x3D;&quot;kvmd-hid&quot; Run systemctl disable getty@ttyAMA0.service. Remove console=ttyAMA0,115200or console=serial0,115200 and kgdboc=ttyAMA0,115200 or kgdboc=serial0,115200 from /boot/cmdline.txt. Flash the Arduino HID. Run reboot. PS/2 keyboardUsing the PS/2 firmware currently has the following limitations: The possibility of using the switchable USB HID is excluded. PS/2 mouse is not supported right now (but it will). Both of these problems will be solved in the nearest future and the two different firmware versions will be combined into one universal one. To select the PS/2 firmware, you need to follow the instructions for USB, but with one exception. Before make you need to edit file platformio.ini. Open it and find these lines: 1234567891011121314151617181920212223[_common]build_flags = -DHID_PS2_KBD_CLOCK_PIN=7 -DHID_PS2_KBD_DATA_PIN=5 -DHID_USB_CHECK_ENDPOINT# ----- The default config with dynamic switching ----- -DHID_DYNAMIC -DHID_WITH_USB -DHID_SET_USB_KBD -DHID_SET_USB_MOUSE_ABS# ----- PS2 keyboard only -----# -DHID_WITH_PS2# -DHID_SET_PS2_KBD# ----- PS2 keyboard + USB absolute mouse -----# -DHID_WITH_USB# -DHID_WITH_PS2# -DHID_SET_PS2_KBD# -DHID_SET_USB_MOUSE_ABS# ----- PS2 keyboard + USB relative mouse -----# -DHID_WITH_USB# -DHID_WITH_PS2# -DHID_SET_PS2_KBD# -DHID_SET_USB_MOUSE_REL By default, the firmware works with USB HID and supports dynamic mode switching. You can choose one of the other modes by commenting some lines and uncommenting others. This example to use a USB mouse and PS/2 keyboard: 123456789101112131415...# ----- The default config with dynamic switching -----# -DHID_DYNAMIC# -DHID_WITH_USB# -DHID_SET_USB_KBD# -DHID_SET_USB_MOUSE_ABS# ----- PS2 keyboard only -----...# ----- PS2 keyboard + USB absolute mouse ----- -DHID_WITH_USB -DHID_WITH_PS2 -DHID_SET_PS2_KBD -DHID_SET_USB_MOUSE_ABS# ----- PS2 keyboard + USB relative mouse -----... Next, you need to connect Arduino pins to the female PS/2 port of your motherboard. Choose the purple port. If your motherboard only have one port, it’s probably universal and can be used either for the keyboard or for the mouse. Most likely, it is painted in two colors: green and purple. You can use it either. Follow this diagram:| Female PS/2 port (front view) | Pinout ||——————————-|——–|| | Arduino pin 7 &lt;-&gt; PS/2 CLOCKArduino pin 5 &lt;-&gt; PS/2 DATAArduino GND pin &lt;-&gt; PS/2 GND | Connect VIN pin of Arduino to any Raspberry’s 5v pin for PS/2 only device. But you don’t need to connect the Arduino VIN pin if you connected USB (Arduino will get power through it). SPI connection to Arduino MicroUsing an SPI connection, an Arduino Micro or compatible can be flashed from the Pi and used as an HID keyboard and mouse. Unlike UART, SPI does not share pins with Bluetooth on the Raspberry Pi so the Bluetooth radio does not need to be disabled. Before powering either device, double-check the connections. The following should be wired from the Pi to either the level shifter or the Arduino. While the Arduino tolerates 3.3V logic input, 5V outputs from the Arduino can damage or destroy the Raspberry Pi and must not be connected directly to 3.3V GPIO pins directly. Parts ListThere are very few parts needed besides the Raspberry Pi to build the solution. Some parts may be purchased with or without headers, if headers are not pre-soldered, it may be necessary to order some breakaway header strips and solder them to the boards prior to assembly unless the wires will be soldered directly to the boards. Raspberry Pi Zero W or Pi 4 are the most popular boards for this solution, pre-soldered headers recommended Arduino Micro (or compatible) microcontroller board with pre-soldered headers recommended Logic Level Converter. This may be RX/TX, Bidirectional, or Single Supply Dupont wires (female to male pin) recommended for breadboard or other suitable means of making the connections Optional: Breakaway headers for the logic level converter Optional: Breadboard large enough to accomodate the parts Optional: Header pins for connection to a breadboard Note: A smaller “Pro Micro” board is available in a 3.3V model but the SS connection (RX_LED) is not available as a separate pin or solderable hole. If using this board, a jumper wire can be soldered to the resistor for the RX_LED but there is risk of burning the resistor, the LED, the board, or other components in the process. Advantages of this board include not requiring a logic level converter and reduced breadboard or board space for building the solution. List of connections to be madeFor the primary functionality, most connections are made using a 4-channel bidirectional level shifter Pi 3v3 to LV on the level shifter Pi Ground to LV GND Arduino GND to HV GND GPIO10 (MOSI) via the level shifter to MOSI on the Arduino GPIO9 (MISO) via the level shifter to MISO on the Arduino GPIO11 (SPIO_SCLK) via the level shifter to SCK on the Arduino GPIO7 (SPIO_CE1_N) via the level shifter to SS (or RX_LED) on the Arduino An additional circuit is used with a transistor to reset the HID for mode changes and for SPI programming as follows: GPIO25 to PNP base on transistor PNP emitter to ground PNP collector to RST on the Arduino Pictures of this setup are also available in full resolution for download to assist for both the Raspberry Pi and the microcontroller board. A smaller version of the images has been included on this page and can be downloaded. Raspberry Pi Closeup Breadboard with Arduino Programming assumes the Arduino is powered via USB, either from the connected host or the Pi itself. If the USB is not connected, 5 V may be provided by the Raspberry Pi GPIO but should be disconnected prior to connecting USB to the microcontroller’s USB port. The Raspberry Pi does not have backcurrent protection, a circuit using one or more Schottky diodes can be built to OR power from multiple sources but it’s easier and more cost effective to avoid conflict and voltage differences between power supplies by leaving the 5 V wire disconnected. Preparing the installation for SPI devices and programmingAs of the latest package release, the kdmd service supports SPI. It should be sufficient to ensure the packages are up-to-date with the latest release, the programmer is installed, and the SPI device overlay is loaded at boot. Switch the filesystem to read-write mode with rw Update the system with pacman -Syu for the latest packages Install the avrdude programmer with pacman -S avrdude-svn Add dtoverlay=spi0-1cs to /boot/config.txt Reboot with reboot or systemctl reboot Flashing the Arduino microcontrollerInstructions on flashing the microcontroller can be found on the page Flash the Arduino HID. If programming fails, ensure the Arduino is powered and check the wiring again. If there is a misconfiguration, power off the Pi and the Arduino, correct the wiring, and try again. Note it is not recommended or required to supply 5V power from the Raspberry Pi if the microcontroller is USB powered, if the issue appears to be power related it may be removed from the solution and replaced with a powered USB connection if it will aid in troubleshooting but check all other wires first to ensure there are no shorts. Wiring problems are a common issue but there could be other reasons for programming not to complete. While it is not possible to list every possible problem and solution here, there is an active user community on Discord at https://discord.gg/bpmXfz5 with others familiar with the solution and willing to help. Enable the SPI configuration and restart kvmdOnce the installation has completed, all that should remain is to add the following configuration to /etc/kvmd/override.yaml and restart the kvmd service. If the first line exists due to existing overrides, omit that line and either add or update the hid section as appropriate. 12345678kvmd: hid: type: spi chip: 0 bus: 0 sw_cs_pin: 7 reset_pin: 25 reset_inverted: true After saving the changes to /etc/kvmd/override.yaml, restart kvmd and clear your browser cache. The command to restart kvmd is 1systemctl restart kvmd If your device is still in read-write mode, ro will put the SD back in read-only mode.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/bluetooth_hid","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/bluetooth_hid/","link":"","permalink":"http://example.com/2021/03/02/pikvm/bluetooth_hid/","excerpt":"","text":"Bluetooth HIDPi-KVM is able to emulate a Bluetooth keyboard &amp; mouse.This is not the main case of using Pi-KVM since you still need it to pair with a remote host, but can be used for something like mobile KVM. :exclamation: Using Bluetooth HID requires additional configuration of the operating system. For v2, this means losing the UART port,since it will be used by Bluetooth. Also, Bluetooth operation was tested only on RPi4 and v2 platform. Other boards may require different system service settings. :exclamation: Bluetooth mouse can work only in relative mode. The reason is that many Bluetooth host drivers do not correctly implement HID descriptors. Horizontal scrolling is not supported for the same reason. Configuring the OS Switch filesystem to RW-mode, perform update and install some packages: 123# rw# pacman -Syu# pacman -S bluez bluez-utils raspberrypi-bluetooth Edit /boot/config.txt and comment these lines: 12#enable_uart&#x3D;1#dtoverlay&#x3D;disable-bt Create an empty directory /var/lib/bluetooth and add mountpoint to /etc/fstab: 12# mkdir &#x2F;var&#x2F;lib&#x2F;bluetooth# echo &#39;tmpfs &#x2F;var&#x2F;lib&#x2F;bluetooth tmpfs nodev,nosuid,mode&#x3D;0755 0 0&#39; &gt;&gt; &#x2F;etc&#x2F;fstab Override and enable the services: 12345678# mkdir &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;bluetooth.service.d# cat &lt;&lt; EOF &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;bluetooth.service.d&#x2F;override.conf[Service]ExecStart&#x3D;ExecStart&#x3D;&#x2F;usr&#x2F;lib&#x2F;bluetooth&#x2F;bluetoothd --noplugin&#x3D;*EOF# systemctl enable bluetooth# systemctl enable raspberrypi-btuart Override kvmd service: 123456# mkdir &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kvmd.service.d# cat &lt;&lt; EOF &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kvmd.service.d&#x2F;override.conf[Service]AmbientCapabilities&#x3D;CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_ADMIN CAP_SETUID CAP_SETGID CAP_CHOWNCapabilityBoundingSet&#x3D;CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_ADMIN CAP_SETUID CAP_SETGID CAP_CHOWNEOF Add following lines to /etc/kvmd/override.yaml: 123kvmd: hid: type: bt Perform reboot: reboot. To reverse, uncomment lines from Step 2 and remove lines in Step 6, reboot Using Bluetooth HID After a reboot, the Pi-KVM will be ready for detection and pairing with no auth. You will see the Pi-KVM HID device. Once the server is connected, Pi-KVM will no longer be discoverable and pairable to other clients until you unpair the server. If something went wrong, use the web menu System -&gt; Reset keyboard &amp; mouse. This will cause unpair the device and switch the Pi-KVM to public mode before the first client is connected.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/building_os","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/building_os/","link":"","permalink":"http://example.com/2021/03/02/pikvm/building_os/","excerpt":"","text":"Building the OSThe Pi-KVM OS is based on Arch Linux ARM and contains all the required packages and configs for it to work. To build the OS you will need x86_64 Linux machine with: kernel &gt;= 5.8 glibc &gt;= 2.33 docker &gt;= 19.03.13 Docker must be enabled in privileged mode. Latest Arch Linux is working. When starting with a clean OS you need to install and configure docker (after adding your user to the docker group you must log out and log back in), as well as git and make. 1234[user@localhost ~]$ sudo apt-get install git make curl binutils -y[user@localhost ~]$ curl -fsSL https://get.docker.com -o get-docker.sh[user@localhost ~]$ sudo sh get-docker.sh[user@localhost ~]$ sudo usermod -aG docker $USER Re-login to apply the changes. Git checkout the build toolchain: 12[user@localhost ~]$ git clone https://github.com/pikvm/os[user@localhost ~]$ cd os Determine the target hardware configuration (platform): Choose the board: BOARD=rpi4 for Raspberry Pi 4 or BOARD=zerow, BOARD=rpi2, BOARD=rpi3 for other options. Choose the platform: PLATFORM=v2-hdmi for RPi4 or ZeroW with HDMI-CSI bridge. PLATFORM=v0-hdmi for RPi 2 or 3 with HDMI-CSI bridge and Arduino HID. PLATFORM=v2-hdmiusb for RPi4 with HDMI-USB dongle. PLATFORM=v0-hdmiusb for RPi 2 or 3 with HDMI-USB dongle and Arduino HID. Other options are for legacy or specialized Pi-KVM boards (WIP). Create the config file config.mk for the target system. You must specify the path to the SD card on your local computer (this will be used to format and install the system) and the version of your Raspberry Pi and platform. You can change other parameters as you wish. Please note: if your password contains the # character, you must escape it using a backslash like ROOT_PASSWD = pass\\#word. 123456789101112131415161718192021222324252627[user@localhost os]$ cat config.mk# rpi3 for Raspberry Pi 3; rpi2 for the version 2, zerow for ZeroWBOARD = rpi4# Hardware configurationPLATFORM = v2-hdmi# Target hostnameHOSTNAME = pikvm# ru_RU, etc. UTF-8 onlyLOCALE = en_US# See /usr/share/zoneinfoTIMEZONE = Europe/Moscow# For SSH root userROOT_PASSWD = root# Web UI credentials: user=admin, password=&lt;this&gt;WEBUI_ADMIN_PASSWD = admin# IPMI credentials: user=admin, password=&lt;this&gt;IPMI_ADMIN_PASSWD = admin# SD card deviceCARD = /dev/mmcblk0 If you want to configure wifi (for ZeroW board for example) you must add these lines to config.mk: 12WIFI_ESSID = &quot;my-network&quot;WIFI_PASSWD = &quot;P@$$word&quot; Build the OS. It may take about one hour depending on your Internet connection: 1[user@localhost os]$ make os 5a. Put SD card into card reader and install OS (you should disable automounting beforehand: systemctl stop udisk2 or something like that): 1[user@localhost os]$ make install 5b. Make the image to copy elsewhere and burn on to SD 1[user@localhost os]$ make image Image is then available as a bziped file in images/ After installation remove the SD card and insert it into your RPi. Turn on the power. The RPi will try to get an IP address using DHCP on your LAN. It will then be available via SSH. If you can’t find the device’s address, try using the following command: 1[user@localhost os]$ make scan Only for v0: Flash the Arduino HID. Congratulations! Your Pi-KVM will be available via SSH (ssh root@&lt;addr&gt; with password root by default) and HTTPS (try to open in a browser the URL https://&lt;addr&gt;, the login admin and password admin by default). For HTTPS a self-signed certificate is used by default. The latest versions of Chrome do not allow access to the page with a self signed certificate. You can proceed by typing thisisunsafe and Chrome will then load the page To change the root password use command passwd via SSH or webterm. To change Pi-KVM web password use kvmd-htpasswd set admin. As indicated on the login screen use rw to make the root filesystem writable, before issuing these commands. After making changes, make sure to run the command ro. Important note for HDMI-USB dongle users only. Because of this, many video capture devices tell the server’s video card that the HDMI cable is supposedly disconnected. This may lead to the fact that if you boot the server without an active stream, the server will not detect your capture card. This is easy to fix: Switch filesystem to RW-mode:1# rw Edit file /etc/kvmd/override.yaml and add these lines:1234kvmd: streamer: forever: true cmd_append: [--slowdown] Finish:12# ro# systemctl restart kvmd 27.08.2020 note about systemd: the latest version of Arch Linux has a slightly broken systemd. The problem is that SSH to the Pi-KVM host may not work the first time, but the second or third. The Pi-KVM build environment contains a workaround for this problem: in the file /etc/pam.d/system-login line -session optional pam_systemd.so is commented. This does not have any negative impact on the PI-KVM functionality, but if you want to, after fixing the systemd (in a couple of months with the next update), you can uncomment this line. Further HelpIf you have any problems or questions, contact us using Discord: https://discord.gg/bpmXfz5 Subscribe to our Subreddit to follow news and releases: https://www.reddit.com/r/pikvm","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/community","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/community/","link":"","permalink":"http://example.com/2021/03/02/pikvm/community/","excerpt":"","text":"Community ProjectsThis page contains derivative projects from our community that can be very useful.This includes additional software, additional software, unofficial ports to other platforms and alternative firmwareand even PCB and case designs for Pi-KVM. Software Pi-KVM port to x86 using docker Serial HID using STM32 (work in progress) Hardware PCB: OTG splitter, ATX controller and some other parts","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/config","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/config/","link":"","permalink":"http://example.com/2021/03/02/pikvm/config/","excerpt":"","text":"YAML SyntaxThis page provides a basic overview of correct YAML syntax, which is how Ansible playbooks (our configuration management language) are expressed. We use YAML because it is easier for humans to read and write than other common data formats like XML or JSON. Further, there are libraries available in most programming languages for working with YAML. You may also wish to read working with playbooks at the same time to see how this is used in practice. YAML BasicsFor Ansible, nearly every YAML file starts with a list. Each item in the list is a list of key/value pairs, commonly called a “hash” or a “dictionary”. So, we need to know how to write lists and dictionaries in YAML. There’s another small quirk to YAML. All YAML files (regardless of their association with Ansible or not) can optionally begin with --- and end with .... This is part of the YAML format and indicates the start and end of a document. All members of a list are lines beginning at the same indentation level starting with a &quot;- &quot; (a dash and a space): --- # A list of tasty fruits - Apple - Orange - Strawberry - Mango ... A dictionary is represented in a simple key: value form (the colon must be followed by a space): # An employee record martin: name: Martin D&#39;vloper job: Developer skill: Elite More complicated data structures are possible, such as lists of dictionaries, dictionaries whose values are lists or a mix of both: # Employee records - martin: name: Martin D&#39;vloper job: Developer skills: - python - perl - pascal - tabitha: name: Tabitha Bitumen job: Developer skills: - lisp - fortran - erlang Dictionaries and lists can also be represented in an abbreviated form if you really want to: --- martin: &#123;name: Martin D&#39;vloper, job: Developer, skill: Elite&#125; [&#39;Apple&#39;, &#39;Orange&#39;, &#39;Strawberry&#39;, &#39;Mango&#39;] These are called “Flow collections”. Ansible doesn’t really use these too much, but you can also specify a boolean value (true/false) in several forms: create_key: yes needs_agent: no knows_oop: True likes_emacs: TRUE uses_cvs: false Use lowercase ‘true’ or ‘false’ for boolean values in dictionaries if you want to be compatible with default yamllint options. Values can span multiple lines using | or &gt;. Spanning multiple lines using a “Literal Block Scalar” | will include the newlines and any trailing spaces. Using a “Folded Block Scalar” &gt; will fold newlines to spaces; it’s used to make what would otherwise be a very long line easier to read and edit. In either case the indentation will be ignored. Examples are: include_newlines: | exactly as you see will appear these three lines of poetry fold_newlines: &gt; this is really a single line of text despite appearances While in the above &gt; example all newlines are folded into spaces, there are two ways to enforce a newline to be kept: fold_some_newlines: &gt; a b c d e f same_as: &quot;a b\\nc d\\n e\\nf\\n&quot; Let’s combine what we learned so far in an arbitrary YAML example. This really has nothing to do with Ansible, but will give you a feel for the format: --- # An employee record name: Martin D&#39;vloper job: Developer skill: Elite employed: True foods: - Apple - Orange - Strawberry - Mango languages: perl: Elite python: Elite pascal: Lame education: | 4 GCSEs 3 A-Levels BSc in the Internet of Things That’s all you really need to know about YAML to start writing Ansible playbooks. GotchasWhile you can put just about anything into an unquoted scalar, there are some exceptions. A colon followed by a space (or newline) &quot;: &quot; is an indicator for a mapping. A space followed by the pound sign &quot; #&quot; starts a comment. Because of this, the following is going to result in a YAML syntax error: foo: somebody said I should put a colon here: so I did windows_drive: c: …but this will work: windows_path: c:\\windows You will want to quote hash values using colons followed by a space or the end of the line: foo: &#39;somebody said I should put a colon here: so I did&#39; windows_drive: &#39;c:&#39; …and then the colon will be preserved. Alternatively, you can use double quotes: foo: &quot;somebody said I should put a colon here: so I did&quot; windows_drive: &quot;c:&quot; The difference between single quotes and double quotes is that in double quotes you can use escapes: foo: &quot;a \\t TAB and a \\n NEWLINE&quot; The list of allowed escapes can be found in the YAML Specification under “Escape Sequences” (YAML 1.1) or “Escape Characters” (YAML 1.2). The following is invalid YAML: .text&#125;1foo: &quot;an escaped \\&#39; single quote&quot; Further, Ansible uses ““ for variables. If a value after a colon starts with a “{“, YAML will think it is a dictionary, so you must quote it, like so: foo: &quot;&#123;&#123; variable &#125;&#125;&quot; If your value starts with a quote the entire value must be quoted, not just part of it. Here are some additional examples of how to properly quote things: foo: &quot;&#123;&#123; variable &#125;&#125;/additional/string/literal&quot; foo2: &quot;&#123;&#123; variable &#125;&#125;\\\\backslashes\\\\are\\\\also\\\\special\\\\characters&quot; foo3: &quot;even if it&#39;s just a string literal it must all be quoted&quot; Not valid: foo: &quot;E:\\\\path\\\\&quot;rest\\\\of\\\\path In addition to &#39; and &quot; there are a number of characters that are special (or reserved) and cannot be used as the first character of an unquoted scalar: [] &#123;&#125; &gt; | * &amp; ! % # ` @ ,. You should also be aware of ? : -. In YAML, they are allowed at the beginning of a string if a non-space character follows, but YAML processor implementations differ, so it’s better to use quotes. In Flow Collections, the rules are a bit more strict: a scalar in block mapping: this &#125; is [ all , valid flow mapping: &#123; key: &quot;you &#123; should [ use , quotes here&quot; &#125; Boolean conversion is helpful, but this can be a problem when you want a literal yes or other boolean values as a string. In these cases just use quotes: non_boolean: &quot;yes&quot; other_string: &quot;False&quot; YAML converts certain strings into floating-point values, such as the string 1.0. If you need to specify a version number (in a requirements.yml file, for example), you will need to quote the value if it looks like a floating-point value: version: &quot;1.0&quot;","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/cookbook","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/03/02/pikvm/cookbook/","link":"","permalink":"http://example.com/2021/03/02/pikvm/cookbook/","excerpt":"","text":"Some random and useful recipesTake a HDMI screenshot via console on Pi-KVM1# curl --unix-socket &#x2F;run&#x2F;kvmd&#x2F;ustreamer.sock http:&#x2F;&#x2F;localhost&#x2F;snapshot -o screen.jpg Get installed KVMD version via console1# pacman -Q | grep kvmd Upload .ISO images manuallySpecifically to v2. Remount internal storage to rw (read-write): 1# kvmd-helper-otgmsd-remount rw Upload the .ISO image(s) to /var/lib/kvmd/msd/images via scp or similar. Create an empty file in /var/lib/kvmd/msd/meta/ with the exact name (case sensitive!) of the uploaded image. This will indicate Pi-KVM that the uploaded image is okay and can be used. For example: 1&#x2F;var&#x2F;lib&#x2F;kvmd&#x2F;msd&#x2F;meta&#x2F;ubuntu-18.04.4-desktop-amd64.iso.complete Remount internal storage back to ro (read-only): 1# kvmd-helper-otgmsd-remount ro Enable Serial-over-USB connectionSpecifically to v2. This can be used for terminal access from the managed server to the Pi-KVM, or for any other purpose that requires a serial connection. In the last case, you only need to perform step 1 and reboot. Edit /etc/kvmd/override.yaml (remove &#123;&#125; if this your first configuration entry) and add these lines: 1234otg: devices: serial: enabled: true Run the following command: 1# echo ttyGS0 &gt;&gt; &#x2F;etc&#x2F;securetty Create the directory /etc/systemd/system/getty@ttyGS0.service.d and add a file file named ttyGS0.override into it. Afterwards edit the file and copy this into it: 1234[Service]TTYReset=noTTYVHangup=noTTYVTDisallocate=no Run these comands: 12# systemctl enable getty@ttyGS0.service# reboot Once Pi-KVM is rebooted you will have access to a virtual serial port on the server that the USB is connected to. Use mingetty, screen, putty, or something like this to access the kvm from the server. The port is called /dev/ttyAMA0. Enable Ethernet-over-USB networkSee here. Mass Storage DrivesSpecifically to v2. Unless explicitly disabled by default, Pi-KVM creates only one drive for Mass Storage emulation. However, you can create additional drives and manage them manually via the terminal. This is useful if you want to boot the server from a ISO CD (specified in the web interface), then connect a virtual flash drive to the server and download some files from to Pi-KVM from it. :exclamation: The presence of an additional Mass Storage device should not interfere with the boot, but for reasons of compatibility paranoia, this is disabled by default. We recommend setting up the drives in advance, making sure that booting from the ISO CD is still working, and then using the drives as needed. How to enable extra drives: Switch the root filesystem to rw mode. Edit /etc/kvmd/override.yaml (remove &#123;&#125; if this your first configuration entry) and add these lines: 12345678otg: devices: drives: enabled: true # Set it to true to enable count: 1 # +1 drive, default value default: # Default configuration for the all extra drives cdrom: false # Default value (false for the generic flash drive) rw: false # Read-only by default If you specify count: N, you will create N additional drives configured the same way, as described in the default section. Reboot. How to create RW flash drive: Switch the root filesystem to rw mode: 1# rw Create the empty image file of the desire size (1Gb in this example). 1# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;root&#x2F;flash.img bs&#x3D;1M count&#x3D;1000 status&#x3D;progress Connect it to the drive 1: 1# kvmd-otgmsd -i 1 --set-rw&#x3D;1 --set-cdrom&#x3D;0 --set-image&#x3D;&#x2F;root&#x2F;flash.img After that you will have access to the flash drive from the server. :exclamation: Drive 0 represents a drive that is controlled via a web interface and API. Don’t use it with kvmd-otgmsd if you don’t know exactly what you’re doing. View the driver state: 12345 # kvmd-otgmsd -i 1 Image file: &#x2F;root&#x2F;flash.img CD-ROM flag: no RW flag: yes5. To disable the flash drive and view the files on it from the KVM, run: kvmd-otgmsd -i 1 –unlock –eject 12 :exclamation: This command will interrupt the current IO operation on **ALL DRIVES** including the one that is managed via the web interface. The same result is achieved by clicking the disable media button in the web interface. Right now, the Linux kernel does not allow to distinguish between internal threads that manage different drives. It is recommended to eject the media when you know that this will not cause problems for the other media.6. Don&#39;t forget to remount the root filesystem to read-only mode: ro 123456789101112131415161718192021222324257. You can download the resulting image via SCP or mount it as a loop device on the Pi-KVM.### Disable mass storage emulationTo disable mass storage emulation altogether, you can place the following piece of configuration into &#x2F;etc&#x2F;kvmd&#x2F;override.yaml &#96;&#96;&#96; yaml kvmd: msd: type: disabled&#96;&#96;&#96; ## Create a Microsoft Windows based Flash disk imageThis procedure will create a disk image of a USB stick. This is mostly required for Microsoft Windows (TM) based images since they are larger than the CDROM based limit of 2.2GB.You can create a bootable USB stick with the normal Microsoft tools, e.g. Media Creation Tool.Creating a bootable USB stick can also be made from an ISO file with other tools like Rufus.Without resizing, the full size of the USB stick will be used, so keep the stick as small as possible (e.g. 4GB or 8GB) but still large enough for all Windows files. The Media Creation tool will tell you what the minimum size is.Before creating the image file, you can use a tool like &quot;EaseUS Partition Master Free&quot; or &quot;GParted&quot; to resize the main FAT32 partition on the USB stick. This will save space on PiKVM.You can also perform these steps on a separate unix machine and transfer the image over to pikvm with e.g. SCP.Or, on Windows you could use a program like PassMark ImageUSB (only for full USB size images) or &#39;dd&#39; for Windows to create the image. Then use WinSCP to transfer the image over to PiKVM.Once you have the desired USB stick perform the following on the RPi to create the image directly to the PiKVM image storage folder.1. Insert Windows based USB stick into Pi4, generated with Microsoft USB creation tool. SSH to PiKVM as root. dmesg [ 3025.025401] usb-storage 2-1:1.0: USB Mass Storage device detected [ 3025.038911] scsi host0: usb-storage 2-1:1.0 [ 3026.132248] scsi 0:0:0:0: Direct-Access Kingston DataTraveler 3.0 PMAP PQ: 0 ANSI: 6 [ 3026.771425] sd 0:0:0:0: [sda] 15360000 512-byte logical blocks: (7.86 GB/7.32 GiB) [ 3026.790276] sd 0:0:0:0: [sda] Write Protect is off [ 3026.802530] sd 0:0:0:0: [sda] Mode Sense: 23 00 00 00 [ 3026.804450] sd 0:0:0:0: [sda] No Caching mode page found [ 3026.814082] sd 0:0:0:0: [sda] Assuming drive cache: write through [ 3026.908712] sda: sda1 [ 3026.922794] sd 0:0:0:0: [sda] Attached SCSI removable disk [root@pikvm ~]# 123 USB devices shows as &quot;sda&quot;. We will use &quot;sda1&quot; as the Microsoft Windows (TM) partition.2. mount msd folder as read&#x2F;write kvmd-helper-otgmsd-remount rw 13. Create image of USB data PARTITION to an image file, this will take some time, in this case about 12 minutes (RPi4). dd if=/dev/sda1 of=/var/lib/kvmd/msd/images/windows10-2004.bin bs=8M status=progress 4458545152 bytes (4.5 GB, 4.2 GiB) copied, 736 s, 6.1 MB/s 531+1 records in 531+1 records out 4458545152 bytes (4.5 GB, 4.2 GiB) copied, 736.213 s, 6.1 MB/s 123456784. Correct ownership of new image and make sure the website reports the file as complete (pay attention to the different folder). &#96;&#96;&#96; # chown kvmd:kvmd &#x2F;var&#x2F;lib&#x2F;kvmd&#x2F;msd&#x2F;images&#x2F;windows10-2004.bin # touch &#x2F;var&#x2F;lib&#x2F;kvmd&#x2F;msd&#x2F;meta&#x2F;windows10-2004.bin.complete &#96;&#96;&#96;5. Remount msd folder as read only &#96;&#96;&#96; # kvmd-helper-otgmsd-remount ro On PiKVM webpage, under Storage select the new image and connect it in Drive Mode: Flash to the server. Boot the server and select boot device like you normally would. E.g. in a AMI BIOS the boot device is called “Linux File-CD Gadget 0504”. Create a drive image on macOS Open Disk Utility. File &gt; New Image &gt; Blank Image. Save As: pikvm-image.dmg. Name: pikvm-image. Size: 100 MB (or whatever size you want). Format: MS-DOS (FAT). Partitions: Single partition - GUID Partition Map. Image Format: read/write disk image. Click Save. The drive will automatically be mounted. Copy files (such as BIOS updates) onto the new image (via terminal or drag and drop in Finder). Eject image. Upload image to Pi-KVM interface under “Drive”. Select Drive Mode: Flash and then Connect drive to Server. You should be able to then mount it locally on the server, or reboot the device to do things like BIOS updates. Using Ethernet wiznet w5500 with ZeroWRead here","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/edid","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/edid/","link":"","permalink":"http://example.com/2021/03/02/pikvm/edid/","excerpt":"","text":"EDIDEDID is information about the video modes supported by the video capture device.In the case of Pi-KVM, this is an HDMI CSI bridge. Usually, you don’t need to change this, since the default configuration is quite flexible,but sometimes, for example for strange UEFIs/BIOSes, this may be necessary (the story). The EDID is stored on the Pi-KVM in the file /etc/kvmd/tc358743-edid.hex. If you write new data there, it will be applied on the Pi-KVM reboot. You can also apply the new EDID without rebooting to make sure it works: Switch filesystem to RW-mode: rw. Create file with EDID /root/edid.hex (examples of file contents are shown below). Apply EDID using the command v4l2-ctl --device=/dev/kvmd-video --set-edid=file=/root/edid.hex --fix-edid-checksums. DO NOT REBOOT the Pi-KVM. Just your PC. Check the UEFI/BIOS. If everything works, you can write the same data to /etc/kvmd/tc358743-edid.hex. Switch filesystem to RO-mode: ro. The examples below are tested on these devices, but they are also suitable for others. To edit or create EDID you can use AW EDID Editor. 1280x1024 as preferred resolution, Gigabyte GA-H77-DS3H00 FF FF FF FF FF FF 00 52 62 88 88 00 88 88 88 1C 15 01 03 80 00 00 78 0A EE 91 A3 54 4C 99 26 0F 50 54 25 40 00 01 00 01 00 01 00 01 00 01 00 01 00 01 01 01 01 D5 1B 00 50 50 00 19 40 08 20 B8 00 80 00 10 00 00 1E EC 2C 80 A0 70 38 1A 40 30 20 35 00 40 44 21 00 00 1E 00 00 00 FC 00 50 49 2D 4B 56 4D 20 56 69 64 65 6F 0A 00 00 00 FD 00 32 3D 0F 2E 0F 00 00 00 00 00 00 00 00 01 4D 02 03 04 00 DE 0D 20 A0 30 58 12 20 30 20 34 00 F0 B4 00 00 00 18 E0 15 00 A0 40 00 16 30 30 20 34 00 00 00 00 00 00 18 B4 14 00 A0 50 D0 11 20 30 20 35 00 80 D8 10 00 00 18 AB 22 A0 A0 50 84 1A 30 30 20 36 00 B0 0E 11 00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 45 1920x1080 as preferred resolution, Gigabyte GA-H77-DS3H, Intel NUC00 FF FF FF FF FF FF 00 52 62 88 88 00 88 88 88 1C 15 01 03 80 00 00 78 0A EE 91 A3 54 4C 99 26 0F 50 54 25 40 00 01 00 01 00 01 00 01 00 01 00 01 00 01 01 01 01 D3 2C 80 A0 70 38 1A 40 30 20 35 00 40 44 21 00 00 1E 7E 1D 00 A0 50 00 19 40 30 20 37 00 80 00 10 00 00 1E 00 00 00 FC 00 50 49 2D 4B 56 4D 20 56 69 64 65 6F 0A 00 00 00 FD 00 32 3D 0F 2E 0F 00 00 00 00 00 00 00 00 01 C4 02 03 04 00 DE 0D 20 A0 30 58 12 20 30 20 34 00 F0 B4 00 00 00 18 E0 15 00 A0 40 00 16 30 30 20 34 00 00 00 00 00 00 18 B4 14 00 A0 50 D0 11 20 30 20 35 00 80 D8 10 00 00 18 AB 22 A0 A0 50 84 1A 30 30 20 36 00 B0 0E 11 00 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 45 Default EDIDIf for some reason you need to go back to the default EDID (changing attached device etc), you can find it locally on the Pi at /usr/share/kvmd/configs.default/kvmd/tc358743-edid.hex (cp /usr/share/kvmd/configs.default/kvmd/tc358743-edid.hex /etc/kvmd/tc358743-edid.hex) or in the kvmd repo.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/ezcoo","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/ezcoo/","link":"","permalink":"http://example.com/2021/03/02/pikvm/ezcoo/","excerpt":"","text":"ezCoo managed multiport KVM switchThe ezCoo managed switch can be controlled by Pi-KVM to allow it to connect to multiple hosts. A typical scenario is a single Pi-KVM device which can control and switch between multiple hosts or servers using the ezCoo switch. UI elements can be added to the GPIO dropdown to allow switching between hosts from the Pi-KVM webpage. The instructions here were tested with the ezCoo SW41HA HDMI 4x1 switch. The following was testing on a Raspberry Pi 4 but should also work on the Pi 2 and 3. This document was informed by multiple users on the Pi-KVM Discord and the author appreciates their efforts. :exclamation: While most images of the switch do not show the sides, there is a Micro USB port on the side of the ezCoo switch. This is the management port, which is controlled via COM port on the ezCoo KVM. When plugged into the Raspberry Pi, it appears as /dev/ttyUSB0. :exclamation: Audio was not tested, it is assumed to be non-functional. ConnectionsFrom a high level, the ezCoo switch uses standard connections to the host machines (USB-A to USB-B and HDMI). The Raspberry Pi OTG connector (the one coming from the USB-C port on a Pi 4 via the custom splitter cable or device) should be connected to the USB 3 port on the ezCoo switch. There is an additional USB cable connected to the managed port on the switch. Connect the USB-A cable from the Raspberry Pi OTG port to ezCoo switch USB 3 port on the front of the switch. Note: If this cable is connected to the keyboard port of the ezCoo switch the mouse will not be present. Connect the HDMI out from the ezCoo switch to the Raspberry Pi CSI-2 to HMDI input. Other users have reported HMDI encoder USB dongles as working. Connect a USB-A to Micro USB cable from the Raspberry Pi to the management port on the side of the ezCoo switch. Connect host USB and HDMI cables from the ezCoo switch to the machines to be managed per the switch instructions. At this point the KVM switch should be present as a device on the Pi-KVM. SSH into Pi-KVM and ensure a device like /dev/ttyUSB0 is present. The following instructions assume this is the KVM switch. :exclamation: There is a limitation in the underlying Pi-KVM software related to plugging video cables from a host which is already powered and connected to a monitor to a Raspberry Pi CSI2-HDMI encoder. These limitations apply equally when using the ezCoo KVM switch. If video is not present in Pi-KVM, try keeping all host machines off and connecting them directly to the ezCoo switch before powering the hosts on. Adding UI elements to control the KVM switchThe UI can be updated to add buttons to switch between KVM inputs and indicators for which input is currently selected. The instructions below will make these available in the Pi-KVM UI after clicking the “GPIO” menu button in the KVM view. SSH into Pi-KVM Enable read-write mode on the sd card via rw Edit the /etc/kvmd/override.yaml file and include the following. Note the assumption that the KVM switch is present on /dev/ttyUSB0:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849kvmd: gpio: drivers: ez: type: ezcoo device: /dev/ttyUSB0 scheme: ch0_led: driver: ez pin: 0 mode: input ch1_led: driver: ez pin: 1 mode: input ch2_led: driver: ez pin: 2 mode: input ch3_led: driver: ez pin: 3 mode: input ch0_button: driver: ez pin: 0 mode: output switch: false ch1_button: driver: ez pin: 1 mode: output switch: false ch2_button: driver: ez pin: 2 mode: output switch: false ch3_button: driver: ez pin: 3 mode: output switch: false view: table: - [&quot;#Input 1&quot;, ch0_led, ch0_button] - [&quot;#Input 2&quot;, ch1_led, ch1_button] - [&quot;#Input 3&quot;, ch2_led, ch2_button] - [&quot;#Input 4&quot;, ch3_led, ch3_button] Return to read-only mode for the sd card via ro Restart the kvmd service: systemctl restart kvmd If you are still not getting KB output, issue a ls -la /dev/tty* | grep USB , if no output change cables (Alot of cables are power only) Switching between hosts in the UITo switch between hosts, enter the KVM UI and click the “GPIO” menu. You should see 4 inputs, one of which will have a green circle indicating it is currently selected. Click the other inputs to change the selected host.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/faq","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/faq/","link":"","permalink":"http://example.com/2021/03/02/pikvm/faq/","excerpt":"","text":"FAQ &amp; TroubleshootingAs a first step, we recommend carefully reading our documentation on GitHub. Most steps to successfully set up your Pi-KVM are already described there. If you run into any issues you can check this page which will list common errors. If that still doesn’t help you you’re welcome to raise an issue ticket or join our Discord for further help. Navigation Common questions First steps Video problems USB problems (keyboard, mouse, mass storage) Web UI problems Hardware problems (Wi-Fi, ATX, etc) Common questionsCan I connect multiple servers to a single Pi-KVM? Click to view Yes, but it will require additional work to set up. See this page. How can I get the access to Pi-KVM in my local network over Internet? Click to view You can use port forwarding for port 443 on your router if it has an external IP address. In all other cases, you can use the excellent free VPN service Tailscale, which is configured on Pi-KVM with a few simple commands. Can I use Pi-KVM with non-Raspberry boards (Orange, Nano, etc)? Click to view Yes, but you will have to prepare the operating system yourself. As for the Pi-KVM software, you will need to replace some config files (such as UDEV rules). If you are a developer or an experienced system administrator, you will not have any problems with this. In addition, we are open to patches. If you need help with this, please contact us via Discord. First stepsWhat is the default password? How do I change it? Click to view There are two types of accounts: OS and Pi-KVM (web interface) accounts. The system account root can be used for SSH/UART access and has the password root. The web interface account is called admin and has the password admin. The Pi-KVM account cannot be used for SSH access and vice versa. To change passwords, use the following commands (under root): 12345su - # If you&#x27;re in the webtermrw # Switch filesystem to read-write modepasswd root # Change OS root passwordkvmd-htpasswd set admin # Change web ui admin passwordro # Back to read-only How do I get root access in the web terminal? Click to view The web terminal works with the account kvmd-webterm. This is a regular user with no administrator privileges and. In addition, sudo and login are disabled for this user for security reasons. To get root access, you need to use the su - command (minus is important) and enter the root password. Where is the Pi-KVM configuration located? Click to view Almost all KVMD (the main daemon controlling Pi-KVM) configuration files located in /etc/kvmd. You can also find nginx configs and SSL certificates there. KVMD configs use YAML syntax. The specific platform parameters can be found in the file /etc/kvmd/main.yaml and you should never edit it. Use /etc/kvmd/override.yaml to redefine the system parameters. Another files that are also not recommended for editing have read-only permissions. If you edit any of these files, you will need to manually make changes to them when you upgrade your system. You can view the current configuration and all available KVMD parameters using the command kvmd -m. I can’t edit any file on Pi-KVM. Why is the system in read-only mode? Click to view The Pi-KVM file system is always mounted in read-only mode. This measure prevents it from being damaged by a sudden power outage. To change the configuration you must first switch the filesystem to write mode using the command rw from root. After the changes, be sure to run the command ro to switch it back to read-only. How do I update Pi-KVM with the latest software? Click to view Pi-KVM OS is based on Arch Linux ARM and is fully updated from the repository by a regular package manager. Connect to your Pi-KVM via ssh and run: 123rwpacman -Syureboot :exclamation: Pacman saves all installed packages in a compressed format so that you can roll back to the old version if something goes wrong. After you’ve updated and made sure everything works, it makes sense to clear the package cache so that it doesn’t take up space on the SD card: rw; rm -rf /var/cache/pacman/pkg; ro. Video problemsPi-KVM does not show the video from the computer at all Click to view * Double-check that the video capture device is connected correctly. For the [CSI bridge](/README.md#for-the-hdmi-csi-bridge), this should be exactly the camera port, for the [USB dongle](/README.md#for-the-hdmi-usb-dongle), strictly the port indicated in the picture. * Some laptops do not output any signal until you switched the output (usually via the FN + and an F5 key on the keyboard). * Your computer may have turned on sleep mode for the monitor. Move the mouse and turn it off. The video works in the booted OS, but not in the BIOS/UEFI Click to view The problem appears on Intel NUC, GA-H77-DS3H, and some other devices with using CSI bridge. All you need to do is change the EDID data. This is the information about supported resolutions that the CSI bridge reports to your computer. Glitchy or wrong BIOS/UEFI resolution Click to view On some motherboards, the BIOS may be displayed at a lower resolution, or with some rendering issues/glitches, specially on newer ASUS ones. Like this: This can be solved by enabling the Compatibility Support Module (CSM) in your BIOS, usually under the Boot options. If you can’t or don’t want to enable the CSM, you can try connecting a DisplayPort monitor, or a dummy plug. If you remove the DP cable/adapter the bug will reappear. If none of this works, try connecting the DP cable first, boot into the BIOS, disable the CSM and shutdown (do not restart) your PC. Then, boot into the BIOS and enable the CSM before shutting down your PC. Then connect the HDMI and turn your PC on again. CSI bridge does not work with official Raspberry Pi PoE HAT Click to view Details here. The reason is that the official HAT has a built-in fan controller that conflicts with the TC358743 chip of the bridge. The solution is to disable the fan control and connect it to the power line so that it works continuously. To turn off the controller you need to add the line disable_poe_fan=1 to /boot/config.txt. The video freezes a few seconds after the start, restarting the Web UI or VNC does not help Click to view The story is here. Very-very rarely, Raspberry boards can have a hardware defect that causes some of the chip blocks to be unstable under normal power. The solution is to slightly increase the power supply, as in overclocking. Add over_voltage=1 (or over_voltage=2 if previous doesn’t help) to /boot/config.txt and perform reboot. To make sure that you are facing this particular problem, first perform a diagnostic: Boot the Pi-KVM without the specified options. Open Web-UI and wait for freezing. Click System -&gt; Reset Stream. Click System -&gt; Open log and make sure that the log contains messages like H264: Can&#39;t wait for the VCOS semaphore. Make sure that the last message from ustreamer was H264: Configuring MMAL encoder (not counting messages about connecting and disconnecting stream clients). No image from computer with Linux + Awesome WM Click to view Sometimes Awesome WM on Linux can’t recognize a video output change on a cable. That is, if the cable was first inserted into the monitor, and then you reconnected it to Pi-KVM - it may happen that you will not see the image. It seems that the problem is Awesome WM, since for example with KDE, it is not reproducable. If you turn on your workstation with Pi-KVM already connected, everything will work fine. USB problems (keyboard, mouse, mass storage, etc)My computer does not recognize USB of Pi-KVM v2+ at all Click to view Make sure that you have used the correct USB cable with DATA lines to connect the OTG port for the Raspberry to the computer. You may have decided to use a USB hub instead of a Y-cable and it won’t work. Use good cables and follow the instructions :) In very rare cases, some motherboards contain a buggy BIOS that does not understand the composite USB device because BIOS doesn’t implement the USB stack correctly. In this case, we can suggest the Arduino HID emulator from v0 platform with v2. BIOS/UEFI does not recognize USB of v2+, but computer does Click to view If you are using a USB hub or USB PCI controller, this may not be handled by your BIOS. Try to use another USB port. Some ports may have a built-in hub on the motherboard and a buggy BIOS that can’t handle it. The keyboard works in BIOS/UEFI, but the mouse does not Click to view The BIOS does not support absolute mouse mode, which is preferred by Pi-KVM. In this case, you can enable relative positioning mode. Mass storage drive working (I can boot an image from Pi-KVM v2+), but keyboard/mouse does not Click to view In very rare cases, some motherboards contain a buggy BIOS that does not understand the composite USB device because BIOS doesn’t implement the USB stack correctly. In this case, we can suggest the Arduino HID emulator from v0 platform with v2+. Thus the Pi-KVM will be connected by two USB cables to the motherboard: one of them will be responsible for the keyboard and mouse, the other for everything else. I can’t get into UEFI/FileVault when booting my Mac using Pi-KVM v2+ Click to view * The problem is specific to early-model Macs and does not occur on ARM-based Macs (Apple M1 or so). UEFI does not initialize the keyboard of the composite device during boot, however, if you use the standard keyboard to get to the UEFI/FileVault menu, you will see that the keyboard, mouse, and mass storage will work fine. In this case, we can suggest the [Arduino HID emulator](arduino_hid.md) from v0 platform with v2+. Thus, the Pi-KVM will be connected by two USB cables to the Mac: one of them will be responsible for the keyboard and mouse, the other for everything else. Big mouse latency on another Raspberry as managed server Click to view Unusual case: RPi4 is used as a Pi-KVM to control RPi3. In this case, the mouse delay may be several seconds. To fix it, just add line usbhid.mousepoll=0 to /boot/config.txt to the server (i.e. RPI3 in our case) and reboot it. Web UI problemsChrome Certificate Issue Click to view The latest versions of Chrome do not allow access to the page with a self signed certificate, so if you see the following screen when loading the pi-kvm website: You can proceed by typing thisisunsafe and Chrome will then load the page. Pressing ESC in full screen mode causes this to close Click to view Your browser does not support keyboard lock. Right now, only Chrome implements this. I can’t use this on iOS: the Web UI network indicator flashes yellow Click to view Safari on iOS contains an old bug that prevents a web application from connecting over a web socket if you use a self-signed certificate on the server (the default for Pi-KVM). There are two solutions: Install a valid SSL certificate for Pi-KVM host to /etc/kvmd/nginx/ssl. Disable HTTPS at all in /etc/kvmd/nginx/nginx.conf. To do this, comment some lines like in this file and restart web server: systemctl restart kvmd-nginx. :exclamation: Don’t do this for insecure networks or the Internet. Your passwords and what you type on the keyboard will be transmitted in unencrypted form. The Web UI doesn’t work properly in Firefox while it works fine in Chrome Click to view This might be related to your specific hardware combination or browser hardware acceleration. Try disabling hardware acceleration in Firefox or updating your GPU and chipset drivers. Unexpected interruption while loading the image for Mass storage drive Click to view If problems occur when uploading even a small disk image it may be due to unstable network operation or antivirus software. It is well known that Kaspersky antivirus cuts off Pi-KVM connections during uploading, so you should add the Pi-KVM website to Kaspersky’s list of exceptions or not filter web requests with the antivirus. Antivirus programs can also affect the performance of certain interface elements, for example the quality slider. For Kaspersky, the steps to add the network address of Pi-KVM’s website to the exclusion list is: Protection -&gt; Private browsing -&gt; Categories and exclusions -&gt; Exclusions. I can’t copy clipboard contents from the server (the machine controlled via Pi-KVM) to the client Click to view The clipboard only works from the client to the server not vice versa. There is currently no way to do it. Hardware problems (Wi-Fi, ATX, etc)No Wi-Fi on Raspberry Pi Zero W Click to view Some Zeros contain a defective Wi-Fi chip. You can either return the device to the store, or try the software workaround. LEDs/Switches does not work in ATX control Click to view Double check your wiring as per the documentation. Make sure you placed the relays (G3VM-61A1) in the correct orientation. The relays for switches (Power, Reset) have a different orientation than the ones for LEDs.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/flashing_os","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/flashing_os/","link":"","permalink":"http://example.com/2021/03/02/pikvm/flashing_os/","excerpt":"","text":"Flashing the OS imageDownload the appropriate memory card image from https://pikvm.org/download.html. Select it based on the board, platform, and the video capture device you are using. For example: choose v2-hdmi-rpi4.img.bz2 for Raspberry Pi 4 with HDMI-to-CSI capture bridge. Note: right now, pre-compiled images are only available for the Raspberry Pi 4 and ZeroW. In all other cases, you will need to build the operating system yourself. But don’t worry, it’s very simple. Using Linux CLIDecompress and flash image and follow to the final steps. Be careful when choosing your device path: 12# bzip2 -d v2-hdmi-rpi4.img.bz2# dd if&#x3D;v2-hdmi-rpi4.img of&#x3D;&#x2F;dev&#x2F;mmcblkX Using balenaEtcher (Linux, MacOS and Windows) Download and install balenaEtcher. Even on modern computers it might be faster to first extract the compressed image first. A bug in a balenaEtcher prior to version 1.5.108 caused it to use large amounts of RAM and a tediously slow flashing process. Extract the image using your favorite archive software. If you don’t have one that supports .bz2 images (on Windows for example) - 7-Zip is a great (free) choice.Flashing the compressed image directly: 12 minutes; extracting first (1 minute on an SSD) and flashing afterwards only takes ~3 minutes. Run Balena Etcher: Press Flash from file and select the image: Insert the memory card into the card reader. Press Select target and choose your memory card: Press Flash! button. Wait for the process to finish. Get yourself a coffee or do some stretching. :wink: If an error occurs during flashing, repeat the process: The final steps Important for ZeroW. In order for your device to connect to Wi-Fi, you will have to tell it which network to use with which password. To do this, mount the first partition of the memory card (FAT32) and edit the pikvm.txt file there. Do not remove line FIRSTBOOT=1, just add your wifi settings like this: 123FIRSTBOOT&#x3D;1WIFI_ESSID&#x3D;&quot;mynet&quot;WIFI_PASSWD&#x3D;&quot;p@s$$w0rd&quot; Save, unmount and follow the next step. When the process is complete, pull out the memory card and insert it into the Raspberry Pi. Connect the Raspberry Pi to the power supply. Your device will obtain the IP address via DHCP automatically. :exclamation:Windows users: balenaEtcher will automatically safely remove the memory card. If you are using a Windows version prior to Windows 10 1809 and a different flashing software, you should do the safe remove manually. After power-up, Pi-KVM OS generates unique SSH keys and certificates. Do not turn off the Raspberry Pi until it’s fully booted. If you set up Wi-Fi in step 1, it won’t be able to connect to the network on the first boot. You need to wait 10 minutes for all the OS preparations to complete, then just restart the device. On the second boot, the Raspberry will connect to the network without any problems. Congratulations! Your Pi-KVM will be available via SSH (ssh root@&lt;ip-address&gt; with the password root by default) and HTTPS. In most networks you should be able to reach Pi-KVM via any browser with the URL https://pikvm/. If that doesn’t work you’ll need to find the IP address manually in your router and try it via https://&lt;ip-address&gt;. The default login username is admin with admin as the password). For HTTPS a self-signed certificate is used by default. Your browser will give you a warning about an invalid SSL certificate which you can safely ignore. Please see this page for additional functionality https://github.com/pikvm/pikvm/tree/master/pages To change the root password use command passwd via SSH or webterm. To change Pi-KVM web password use kvmd-htpasswd set admin. As indicated on the login screen, you need to use rw to make the root filesystem writable before issuing these commands. After making changes, make sure to run the command ro to switch the filesystem back to read-only. If you are using a web terminal, use the su - command to get root access (enter the root password). After installation, we recommend you to update your operating system: 1234rwpacman -Syypacman -Sureboot Pacman saves all installed packages in a compressed format so that you can roll back to the old version if something goes wrong. After you’ve updated and made sure everything works, it makes sense to clear the package cache so that it doesn’t take up space on the SD card: 1234# rw# pacman -Sc# rm -rf &#x2F;var&#x2F;cache&#x2F;pacman&#x2F;pkg# ro Important note for HDMI-USB dongle users only. Because of this, many video capture devices tell the server’s video card that the HDMI cable is supposedly disconnected. This may lead to the fact that if you boot the server without an active stream, the server will not detect your capture card. This is easy to fix: Switch filesystem to RW-mode:1# rw Edit file /etc/kvmd/override.yaml and add these lines:1234kvmd: streamer: forever: true cmd_append: [--slowdown] Finish:12# ro# systemctl restart kvmd If you have any problems or questions, contact us using Discord: https://discord.gg/bpmXfz5 Subscribe to our Subreddit to follow news and releases: https://www.reddit.com/r/pikvm","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/gpio","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/gpio/","link":"","permalink":"http://example.com/2021/03/02/pikvm/gpio/","excerpt":"","text":"GPIOGPIO (general-purpose input/output) is a series of digital interfaces that can be used to connect relays, LEDs, sensors, and other components. :exclamation: Note: Using GPIO on a Pi-KVM was designed as a feature for advanced users, so please familiarize yourself with the topic to make sure you understand how to use use it before setting it up. Otherwise you might damage your Raspberry Pi or components. When talking about Pi-KVM and GPIO it refers not solely to the physical interface of the Raspberry Pi, but also to various plugins (for example, for USB relays) that can also be used transparently by emulating an abstract GPIO API. ConfigurationSetting up GPIO is considerably complex. The interface is divided into several layers for flexibility. Any configuration is performed using a file /etc/kvmd/override.yaml which uses the YAML syntax. We will look at each part of the configuration individually with an example for each. Sections should be combined under shared keys. Wrong: 123456kvmd: gpio: drivers: ...kvmd: gpio: scheme: ... Correct: 1234kvmd: gpio: drivers: ... scheme: ... DriversThe first part of the configuration refers to the hardware layer, which defines which IO channels are used (standard GPIO pins of the Raspberry Pi, an USB relay, and so on). If you just want to use GPIO with the default settings you can skip to the next section Scheme. Each hardware input/output requires a individual driver configuration entry. Each driver has a type (which refers to the plugin that handles the communication between Pi-KVM and the hardware) and a unique name. This allows you to either can add multiple drivers of the same type with different settings or connect multiple USB HID relays. :exclamation: Each driver requires a unique name. Names surrounded by double underscore are system reserved and should not be used. The only exception to this is the default GPIO driver with the name __gpio__, representing the physical GPIO interface of the Raspberry Pi. The configuration section for __gpio__ is only required in your /etc/kvmd/override.yaml if you want to change the default settings. It can be omitted if you are fine with the defaults. 123456789101112131415kvmd: gpio: drivers: # This example shows how the default __gpio__ driver settings can be changed. It can be omitted if you are fine with the defaults. __gpio__: # Names surrounded by double underscore are system reserved type: gpio # Refers to the plugin name handling the communication # You can define another gpio driver for some reason my_gpio: type: gpio # Refers to the plugin name handling the communication # Example for a USB HID relay connected to Pi-KVM relay: type: hidrelay # Eefers to the plugin name handling the communication device: /dev/hidraw0 # The path to the linux device SchemeThe second part defines how the various driver channels are configured. Each channel has a unique name, a mode (input or output), a pin number, and a reference to the driver configured in the previous part. :exclamation: Names that starts and ends with two underscores (like __magic__) are reserved. Two interaction modes are available for outputs: pulse and switch. In pulse mode, the output quickly switches its state to logical 1 and back (just like pressing a button). In switch mode, it saves (toggles) the state that the user set. When Pi-KVM is started/rebooted (any time the KVMD daemon is started or stopped) all output channels are reset to 0. This can be changed using the initial parameter. For example, initial=true for logic 1 on startup. If you don’t specify a driver for the channel in the scheme the default driver, __gpio__ will be used. Parameter Type Allowed values Default Description led1, button1, relay1, etc. string a-Z, numbers, _, - A section for the named channel pin integer X &gt;= 0 Refers to a GPIO pin or driver’s pin/port mode enum input or output Defines if a channel is used for input or output, may be limited by driver plugin Input only debounce float x &gt;= 0 0.1 Debounce time in seconds. 0 for disable debounce Output only switch bool true or false true Enables or disables the switch mode on the channel (enabled by default). initial nullable bool true, false or null false Defines the initial state of the switch upon boot, null for don’t make changes (the last one does not supported by generic GPIO) inverted bool true or false false Inverts the active logical level pulse A section header to define switch pulse configuration delay float X &gt;= 0 0.1 Defines the pulse time in seconds, 0 for disable pulsing min_delay float X &gt;= 0.1 0.1 max_delay float X &gt;= 0.1 0.1 Example configuration 1234567891011121314151617181920212223242526272829303132kvmd: gpio: scheme: # A certain device sends signals to the RPi and we want the Pi-KVM to display this as an led led1: pin: 19 # GPIO pin number on the RPi mode: input led2: pin: 16 # GPIO pin number on the RPi mode: input # Two outputs of RPi&#x27;s GPIO button1: pin: 26 # GPIO pin number on the RPi mode: output switch: false # Disable switching, only pulse available button2: pin: 20 # GPIO pin number on the RPi mode: output switch: false # Disable switching, only pulse available relay1: # Channel 1 of the relay /dev/hidraw0 pin: 0 # Numerating starts from 0 mode: output # Relays can&#x27;t be inputs initial: null # Don&#x27;t reset the state to 0 when initializing and terminating KVMD relay2: # Channel 2 pin: 1 mode: output # Relays can&#x27;t be inputs initial: null pulse: delay: 2 # Default pulse value max_delay: 2 # The pulse interval can be between min_delay=0.1 (by default) and max_delay=2 ViewThis is the last part of the required configuration. It defines how the previous driver and channel configuration is rendered on the Web interface. Here’s an example for the example configuration above: 123456789101112131415kvmd: gpio: view: header: title: Switches # the menu title table: # The menu items are rendered in the form of a table of text labels and controls - [&quot;#Generic GPIO leds&quot;] # Text starting with the sharp symbol will be a label - [] # creates a horizontal separator and starts a new table - [&quot;#Test 1:&quot;, led1, button1] # Text label, one input, one button with text &quot;Click&quot; - [&quot;#Test 2:&quot;, led2, button2] - [] # creates a horizontal separator and starts a new table - [&quot;#HID Relays /dev/hidraw0&quot;] - [] # creates a horizontal separator and starts a new table - [&quot;#Relay #1:&quot;, &quot;relay1|Boop 0.1&quot;] # Text label and button with alternative text - [&quot;#Relay #2:&quot;, &quot;relay2|Boop 2.0&quot;] # Text label and button with alternative text This will be rendered as: Some rules and customization options: Text starting with the # symbol will be a label. To place a channel in a cell, use the name you defined in the scheme. Inputs are displayed as round LEDs. Outputs are displayed as a switch AND a button. If the switch mode is disabled, only a button will be displayed. If pulse is disabled, only a switch will be shown. To change the LED’s color specify it after the channel name like &quot;led1|red&quot;. Available: green, yellow and red. To change title of the button, write some its name like &quot;relay1|My cool relay&quot;. Buttons and switches can request confirmation on acting. To do this write its name like &quot;relay1|confirm|My cool relay&quot;. The third argument with a title is required in this case. Hardware modules and pseudo-driversRaspberry’s GPIOThe driver gpio provides access to regular GPIO pins with input and output modes. It uses /dev/gpiochip0 and the libgpiod library to communicate with the hardware. Does not support saving state between KVMD restarts (meaning initial=null). You can use the interactive scheme when selecting the pins to use. Please note that when selecting a pin for a channel, you need to use a logical number instead of a physical number. That is, if you want to use a physical pin with the number 40, the channel must have the number 21 corresponding to the logical GPIO21. Channels should not use duplicate pins. You can also not use already used pins. To see which pins are currently used, run the command gpioinfo. USB HID RelayThe driver hidrelay provides access to cheap managed USB HID relays that can be found on AliExpress. This driver does not support input mode, only output. To use it, you need to specify the path to the device file (like /dev/hidraw0) using the device parameter. Additionally, we recommend to configure access rights and static device name using UDEV rules. For example, create /etc/udev/rules.d/99-kvmd-extra.rules: 1SUBSYSTEM&#x3D;&#x3D;&quot;usb&quot;, ATTR&#123;idVendor&#125;&#x3D;&#x3D;&quot;16c0&quot;, ATTR&#123;idProduct&#125;&#x3D;&#x3D;&quot;05df&quot;, MODE&#x3D;&quot;666&quot; Channels should not use duplicate physical numbers. The driver supports saving state between KVMD restarts (meaning initial=null). ezCoo KVM switchYou can use GPIO to control KVM port switching. This usually requires the use of relays and buttons, but for the ezCoo switch there is a special ezcoo driver that simulates GPIO by sending commands to the switch via serial port. So you can make a menu in Pi-KVM to control the multiport switch. IPMIThe driver ipmi provides the ability to send IPMI commands (on, off, reset) and show the power status of the remote host. In fact, this is not a hardware driver, but something like a pseudo-GPIO. Each “pin” is actually responsible for a specific IPMI operation of ipmitool: Pin Type Command 0 input ipmitool ... power status, can be used to draw the LED in the menu 1 output ipmitool ... power on, sends the on command (and only this), so like all other outputs it should be a button 2 output ipmitool ... power off 3 output ipmitool ... power cycle 4 output ipmitool ... power reset 5 output ipmitool ... power diag 6 output ipmitool ... power soft You are supposed to define one driver per host: 1234567891011121314151617181920212223242526kvmd: gpio: drivers: my_server: type: ipmi host: myserver.local user: admin passwd: admin scheme: my_server_status: driver: my_server pin: 0 mode: input my_server_on: driver: my_server pin: 1 mode: output switch: off my_server_off: driver: my_server pin: 2 mode: output switch: off view: table: - [my_server_status, &quot;my_server_on|On&quot;, &quot;my_server_off|Off&quot;]","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"vscode 插件记录","slug":"vscode/插件","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/vscode/插件/","link":"","permalink":"http://example.com/2021/03/02/vscode/%E6%8F%92%E4%BB%B6/","excerpt":"","text":"scope4code ccls c/c++ eclipse keymap git history gitlens","categories":[{"name":"vscode","slug":"vscode","permalink":"http://example.com/categories/vscode/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/mouse","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/mouse/","link":"","permalink":"http://example.com/2021/03/02/pikvm/mouse/","excerpt":"","text":"Mouse modesThere are two modes of pointer device: absolute and relative. In absolute mode, the input device transmits the exact coordinates (X,Y) where the cursor should be moved. This is how touchscreens or drawing tablets work. In relative mode, only the relative offset (dX,dY) to the current position is transmitted, which is unknown to the input device itself. This is a regular mouse. By default, Pi-KVM uses absolute positioning mode as the most convenient for the user and software.However, this is not always supported by the BIOS/UEFI.For such cases, support is provided for the relative mode of operation, which can be enabled in the config. When using relative mode, the browser will exclusively capture your mouse when you click on the stream window in Pi-KVM once.When you press Esc, the browser releases the mouse. Important notesThe relative mouse generates a huge number of events that can be poorly transmitted over the network or very slowly perceived by the BIOS/UEFI driver. To solve this problem, mouse events are optimized using a vector sum. This mode is enabled by default and is available in the web menu System -&gt; Squash mouse moves. You can try disabling this if you have problems with mouse acceleration. This is the best and most reasonable compromise right now. Also currently the relative mouse mode is not supported by Pi-KVM VNC server yet. The reason is that none of the recommended clients support the QEMU Pointer Motion Change extension.We expect to implement this in TigerVNC. The relative mode is also not supported by mobile browsers. Enabling the relative mouse on the v2 platform (OTG HID) Switch filesystem to RW-mode using command rw. Edit /etc/kvmd/override.yaml and add these lines:1234kvmd: hid: mouse: absolute: false Perform reboot. After that reboot your PC. If the mouse is still not detected by the BIOS/UEFI, try disabling horizontal scrolling to achieve the maximum compatibility:12345kvmd: hid: mouse: absolute: false horizontal_wheel: false Don’t forget to perform reboot. Enabling the relative mouse on the v0 platform (serial HID)Mode switching for Arduino HID can be performed on-the-fly starting with KVMD 2.6 and the corresponding firmware. No additional actions are required.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/multiport","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/multiport/","link":"","permalink":"http://example.com/2021/03/02/pikvm/multiport/","excerpt":"","text":"Multiport KVM over IPThere are many ways to do this, but the best and most documented one right now is to use the ezCoo KVM switch. Also, Pi-KVM can be connected to a multi-port HDMI/USB switch and the switch’s buttons can be connected via optocouplers to the Pi’s GPIO to switch channels. If your KVM switches channels using keyboard shortcuts, there is a chance that it will not be able to work with OTG (v2 platform, see below), since it does not fully implement the USB stack. In this case, you will have to use an Arduino board to emulate the keyboard &amp; mouse (Pi-KVM supports this configuration). ❗WARNING:exclamation: - AiMOS has a back powering issue that makes the Pi behave differently, there is a work around here List of tested KVMsHere the status is: ✔ - Everything is working as expected. There may be some subtleties. ☹ - The switch does not work with OTG (v2) and requires an Arduino HID or soldering GPIO to switch channels or something like that. ✘ - The keyboard or mouse does not work at all, the switch loses the image, etc. Model Status Notes ezCoo SW41HA HDMI 4x1 switch ✔ Using with Pi-KVM Ali’s noname ✔ Here are the details Aimos 8-port HDMI USB-C KVM Switch ✔ Similar to Ali’s noname model, available in 4/8port editions, has same HDMI bridge boot problem/solution using a Marmitek 312 UHD HDMI splitter See here for details TESmart 8 PORT - HDMI KVM SWITCH ✔ Use OTG with USB 2.0 Hub only, no hotkey support. Switching available with serial or IP-to-serial interface using fixed IP (/31 peer-to-peer addressing supported). Sample script on GitHub","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/prometheus","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/prometheus/","link":"","permalink":"http://example.com/2021/03/02/pikvm/prometheus/","excerpt":"","text":"Prometheus metricsPrometheus is one of the popular monitoring systems.It pulls service’s endpoint to get metrics in a simple text format.Pi-KVM has the ability to export some information to this system such as the server’s ATX state, Pi’s temperature, GPIO state and some other things. Configure PrometheusTo enable Prometheus getting metrics from pikvm following config could be used: 12345678910scrape_configs: - job_name: &quot;pikvm&quot; metrics_path: &quot;/api/export/prometheus/metrics&quot; basic_auth: username: admin password: admin static_configs: - targets: [&quot;https://pikvm&quot;] tls_config: insecure_skip_verify: true # For self-signed certificate Output exampleThis example includes the GPIO from the PI-KVM’s test config. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071$ curl -k -HX-KVMD-User:admin -HX-KVMD-Passwd:admin https://pikvm/api/export/prometheus/metrics# TYPE pikvm_atx_enabled gaugepikvm_atx_enabled 1# TYPE pikvm_atx_power gaugepikvm_atx_power 0# TYPE pikvm_gpio_input_online_led1 gaugepikvm_gpio_input_online_led1 0# TYPE pikvm_gpio_input_state_led1 gaugepikvm_gpio_input_state_led1 0# TYPE pikvm_gpio_input_online_led2 gaugepikvm_gpio_input_online_led2 0# TYPE pikvm_gpio_input_state_led2 gaugepikvm_gpio_input_state_led2 0# TYPE pikvm_gpio_output_online_button1 gaugepikvm_gpio_output_online_button1 0# TYPE pikvm_gpio_output_state_button1 gaugepikvm_gpio_output_state_button1 0# TYPE pikvm_gpio_output_online_button2 gaugepikvm_gpio_output_online_button2 0# TYPE pikvm_gpio_output_state_button2 gaugepikvm_gpio_output_state_button2 0# TYPE pikvm_gpio_output_online_relay1 gaugepikvm_gpio_output_online_relay1 0# TYPE pikvm_gpio_output_state_relay1 gaugepikvm_gpio_output_state_relay1 0# TYPE pikvm_gpio_output_online_relay2 gaugepikvm_gpio_output_online_relay2 0# TYPE pikvm_gpio_output_state_relay2 gaugepikvm_gpio_output_state_relay2 0# TYPE pikvm_hw_temp_cpu gaugepikvm_hw_temp_cpu 36.511# TYPE pikvm_hw_temp_gpu gaugepikvm_hw_temp_gpu 35.0# TYPE pikvm_hw_throttling_freq_capped_now gaugepikvm_hw_throttling_freq_capped_now 0# TYPE pikvm_hw_throttling_freq_capped_past gaugepikvm_hw_throttling_freq_capped_past 0# TYPE pikvm_hw_throttling_throttled_now gaugepikvm_hw_throttling_throttled_now 0# TYPE pikvm_hw_throttling_throttled_past gaugepikvm_hw_throttling_throttled_past 0# TYPE pikvm_hw_throttling_undervoltage_now gaugepikvm_hw_throttling_undervoltage_now 0# TYPE pikvm_hw_throttling_undervoltage_past gaugepikvm_hw_throttling_undervoltage_past 0# TYPE pikvm_hw_throttling_raw_flags gaugepikvm_hw_throttling_raw_flags 0* Connection #0 to host localhost left intact","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/tailscale","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/tailscale/","link":"","permalink":"http://example.com/2021/03/02/pikvm/tailscale/","excerpt":"","text":"Tailscale VPNYou can use Tailscale to access Pi-KVM on the internal network. This is a convenient and free (for private use) tool for organizing a small VPN network. InstallationOn the Pi-KVM side Use these commands:12345# rw# pacman -Syy# pacman -S tailscale-pikvm# systemctl enable --now tailscaled# tailscale up Follow the link to authorize this installation. After success, perform soft reboot using reboot command to make sure that everything will work correctly. Perform command ip addr show tailscale0 to view the Tailscale IP address. On the workstation side Download and install tailscale for your OS: https://tailscale.com/download Check the page https://login.tailscale.com/admin/machines to view your VPN network. Follow the URL in the web browser: https://&lt;tailscale_kvm_ip&gt; and you will see Pi-KVM web interface.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/troubleshooting","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/troubleshooting/","link":"","permalink":"http://example.com/2021/03/02/pikvm/troubleshooting/","excerpt":"","text":"See here.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/usb_ethernet","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/usb_ethernet/","link":"","permalink":"http://example.com/2021/03/02/pikvm/usb_ethernet/","excerpt":"","text":"Ethernet-over-USB networkSpecifically to v2. When combined with configuring a DNS server, FTP, or SMB (for example), this is a powerful way to extend the capabilities of Pi-KVM. :exclamation: The USB-Ethernet features are experimental, so some of the default settings may be changed in future releases. Edit /etc/kvmd/override.yaml (remove &#123;&#125; if this your first configuration entry) and add these lines: 1234567otg: devices: ethernet: enabled: true driver: ecm host_mac: 48:6f:73:74:50:43 kvm_mac: 42:61:64:55:53:42 The host_mac address will be used on the server’s network interface. The kvm_mac means the address that will be assigned to the local interface on the Pi-KVM. The KVM interface will be called usb0network interface. If the host_mac or kvm_mac is not specified, a random value will be used. The driver parameter means the protocol that will be used for the USB network. The default value is ecm so it can be passed it this example. Other possible values are eem, ncm and rndis. To automatically configure the USB network on the server recommended using the service kvmd-otgnet. It configures the firewall, assigns an address to the local Pi-KVM interface usb0 and starts DHCP so the managed server can get the IPv4 address. By default, the address 169.254.0.1/28 to interface usb0 will be assigned. One of the other addresses from the network 169.254.0.0./28 will be assigned to the server when it requests it via DHCP. For security reasons, all incoming connections from the server to the Pi-KVM side are blocked (except for ICMP and UDP port 67 which is used for DHCP). If you want to allow access from the server to the Pi-KVM interface, then you need to add ports 80 and 443 to the whitelist using /etc/kvmd/override.yaml file like this: 123otgnet: firewall: allow_tcp: [80, 443] To view other available configuration parameters, use the command kvmd -m. To enable the service, use the command systemctl enable kvmd-otgnet. Perform reboot. Routing via Pi-KVMBy default, kvmd-otgnet will configure network connection between Pi-KVM and the server host only. The server host will not be able to reach other hosts beyond Pi-KVM. If the full network access is required from the server host through the USB-Ethernet feature (access all hosts Pi-KVM can access), additional settings are needed in /etc/kvmd/override.yaml. Run echo &quot;net.ipv4.ip_forward = 1&quot; &gt; /etc/sysctl.d/99-kvmd-extra.conf. Add network interface to forward requests to (default gateway) by adding a line forward_iface: &lt;interface name&gt; under firewall:. Typically it would be eth0 if the built-in ethernet port is used:: 123otgnet: firewall: forward_iface: eth0 Add DNS server to provide host name resolution service. For example, adding 8.8.8.8 as DNS server requires addition of dnsmasq dhcp options. This can be done by adding following lines to /etc/kvmd/override.yaml: 1234otgnet: commands: post_start_cmd_append: - &quot;--dhcp-option=6,8.8.8.8&quot; Combining above two together:: 123456otgnet: firewall: forward_iface: eth0 commands: post_start_cmd_append: - &quot;--dhcp-option=6,8.8.8.8&quot; Don’t forget reboot.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/v3","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/v3/","link":"","permalink":"http://example.com/2021/03/02/pikvm/v3/","excerpt":"","text":"Pi-KVM v3 Tech infoInstallation Build the device. Install the operating system (choose the v3 image). Power it up If your kit includes the display and/or the fan, you’ll need to turn them on after installation: 1234rwsystemctl enable --now kvmd-oled # For the displaysystemctl enable --now kvmd-fan # For the fanro V3 Shield Description USB for the power 1v 3A is strongly recommended. The official Raspberry Pi 4 power supply is perfect for this. Power (green) and activity (red) LEDsShow the device status. The red LED lights up when there is disk activity. USB serial consoleHardware serial console to login and configure the Raspberry Pi via a terminal emulator. It operates at a speed of 115200 baud. Just plug in the USB and you will see a USB-TTL device on your host. USB serial console status LEDThe console has independent power from the USB connected host, so you can reboot the Pi and not lose the connection to the console. The LED indicates the presence of power via USB. COM serial consoleFor connection, the so-called CISCO-style serial cable is used (on the one hand, RJ45, on the other, COM port). You can buy any suitable cable or make your own. If you do not need console access to the Pi-KVM, this port can be used to access the server. PoE pinsPi-KVM is compatible with PoE hats. These pins are used for power supply. UART jumpersThe two jumpers installed here provide communication between the console ports (3, 5) and the UART of Raspberry. By removing them, you will get access to the UART. Audio capture jumpersThe Pi-KVM can capture audio. Although this is not yet implemented in the software, the hardware capability is already present and you can use the arecord command to record audio. These pins are used for this purpose. If you need additional GPIO pins, you can remove these jumpers, comment line dtoverlay=tc358743-audio in /boot/config.txt, and use the GPIO 19, 20 and 21 as you see fit. HDMI reset jumperCurrently unused. In the future, it will be used for hardware resetting of the video capture chip. If you remove it, you will be able to use the GPIO 17 GPIO pinsWith the exception of the used pins, the rest are at your service. ATX controller interfaceUse the ethernet straight cable to connect the ATX adapter (included). Connect the wires of the power button, reset button, and the power and HDD LEDs inside your server enclosure to the adapter. 1-Wire &amp; Neo-pixel interfaceUnused right now. For neopixel used GPIO 13 (same as for the red status LED). OTG USBThe port to connect to the server. Here, the keyboard, mouse, disk, and so on are emulated. OTG USB AUXFor fans of soldering. You can use these pins to connect OTG if you have installed Pi-KVM inside the server case. HDMI inputFrom 640x480 to 1920x1080 50Hz (max). Service USBUse the dual USB-C bridge (included) to connect the Rspberry and v3 shield with this port. HDMI 5v LED HDMI 3.3v LED AUM socketTo connect an Advanced USB Module that provides an alternative way to emulate the keyboard and mouse and mass storage. CSI socketUse a wide flat cable to connect to the Raspberry Pi. 5v fan connectorConnector for controlling a 5v fan with PWM support. 5v power pinsTo receive or alternatively supply power to the Pi-KVM. Top secretCurrently unused. I2C for the display","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/video","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/video/","link":"","permalink":"http://example.com/2021/03/02/pikvm/video/","excerpt":"","text":"VideoCurrently, Pi-KVM uses MJPEG for video transmission. This is a simple and widely supported, but not very effective video format.In the near future, it is planned to support H264, and then switch to it as the main one. The H264 implementation is still under development, but right now you can use it to record video from your server.To do this, uStreamer supports simultaneous MJPEG and H264 encoding since version 3.0. Video recording:exclamation: Best of all this feature only works for HDMI to CSI bridge. For the USB HDMI dongle, there will be a decrease in FPS to 10-15 for 1080p. Work in progress. Perform full system update to get the latest uStreamer and install ffmpeg:123rwpacman -Syupacman -S ffmpeg For USB dongle only: Add line gpu_mem=256 to /boot/config.txt. Perform reboot command. Run rw after the reboot. Add memory sink options to /etc/kvmd/override.yaml. This is necessary to get a dump of the video stream:1234kvmd: streamer: cmd_append: - &quot;--h264-sink=kvmd::ustreamer::h264&quot; Restart kvmd: systemctl restart kvmd. H264 encoding is almost CPU-free, so if you use RPi4 or RPi3, you can leave the option permanently. To record a video, you need to enable the stream (open the web interface or connect via VNC). Then run something like this in the console:12rwustreamer-dump --sink kvmd::ustreamer::h264 --output - | ffmpeg -use_wallclock_as_timestamps 1 -i pipe: -c:v copy test.mp4 Press Ctrl+C to stop recording. You video will be in the file test.mp4. After finishing work, do not forget to switch the file system to read-only mode using ro command.","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/vnc","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/vnc/","link":"","permalink":"http://example.com/2021/03/02/pikvm/vnc/","excerpt":"","text":"VNCAs an alternative to the web interface, you can use VNC with various desktop clients. The main advantage of VNC over the browser is the ability to expand the image to the full screen, as well as complete interception of all keyboard keys. In some cases, VNC will be more responsive than the browser, especially on weak computers. :exclamation: Please note: we strongly advise against using VNC without X.509 or TLS encryption on untrusted networks! Otherwise your password will be transmitted over the network in plain text. Unfortunately, this is the reality of the VNC protocol. Enabling VNC on the Pi-KVM side Switch Pi-KVM filesystem to read-write mode using command rw. Optional: Change client’s keyboard layout if you’re using an non-US keyboard. To do this edit file /etc/kvmd/override.yaml :exclamation: (remove &#123;&#125; before adding lines): 12vnc: keymap: /usr/share/kvmd/keymaps/ru All available keymaps are located in /usr/share/kvmd/keymaps: Optional: Some VNC clients (for example TightVNC) can’t use user/password authentication. In this case you can enable passphrases mode in /etc/kvmd/override.yaml: 1234vnc: auth: vncauth: enabled: true To set passphrases edit file /etc/kvmd/vncpasswd. Enable kvmd-vnc daemon. VNC will be available on the port 5900: systemctl enable --now kvmd-vnc. Switch filesystem back to read-only: ro. Configuring the clientWe recommend TigerVNC for a better experience on desktop.Here are our recommended settings for TigerVNC: Compression tab: Choose Tight encoding as preferred and color-level Full. Disable automatic quality adjust settings Auto Select. Enable Allow JPEG compression. Security tab: Enable None, X.509 TLS and Anonymous TLS encryption (or choose one preferred mode). Enable Username and password authentication. For iOS and Android the recommended application is bVNC: Google Play App Store","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/wifi_config","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/wifi_config/","link":"","permalink":"http://example.com/2021/03/02/pikvm/wifi_config/","excerpt":"","text":"Setting up WiFi / WLANThe following describes how to setup a WiFi connection on the default pikvm builds based on Arch Linux. The process might vary for other Linux distros.I’d recommend to do this while having a display and keyboard connected directly to the Raspberry Pi as you will loose network connectivity once you connect to a WiFi.Alternatively you can connect to the pikvm via ssh. The built-in Terminal (available through the browser) should also work. Note: I’m omitting any sudo prefix for commands as the default installation runs as root anyway. If your installation does not run as root you’ll have to add sudo in front of each command. Make filesystem writeableBy default the pikvm filesystem is read-only. In order to make changes you’ll need to switch to read-write mode. Do this by typing rw in the console. 1rw Enable WiFi auto roaming modeIf you want your Raspberry Pi to automatically connect to any configured and available WiFi networks you have to set the following option. On Raspberry Pis wlan0 is the default name of the wlan device. 1systemctl enable netctl-auto@wlan0.service Create WiFi profilesvia GUIYou can create WiFi profiles either manually or by using wifi-menu - GUI. This requires the WiFi you want to connect to in signal range. 1wifi-menu -o The -o makes sure that the WiFi passphrase is stored encrypted. Otherwise it will be stored in cleartext in the profile file. wifi-menu will scan for all available WiFi networks and provide you a list: Select the WiFi you want to connect to and give the profile file a name. The default name is wlan0-wifiname: Enter the WPA-Passphrase: Afterwards wifi-menu will try to connect to the WiFi. If you’re connected via ssh or the Web Terminal you’ll loose connection to the Raspberry Pi. Most DHCP servers will give the Raspberry Pi a new (and usually different) IP address for each interface (LAN / WLAN). If everything worked out you should be connected to your WiFi now. wifi-menu created a new profile file for you in /etc/netctl. manuallyIf you want to store the WiFi passphrase encrypted you have to generate it via wpa_passphrase: 1wpa_passphrase wifiname this_is_my_great_and_secure_key_1234567890 Copy the second hexadecimal string without psk=. In this example 814c45d0f88f60636532b034c463639a506670f8ba3c7965e62cdbc1989f6d66.Create a new file with the editor of your choice: 1nano &#x2F;etc&#x2F;netctl&#x2F;wlan0-wifiname or 1vi &#x2F;etc&#x2F;netctl&#x2F;wlan0-wifiname Copy the following template into the file and modify it with your parameters.Attention: Please note the \\“ after Key= is required for encrypted passphrases. If you want to put your WiFi passphrase in cleartext the \\“ is not required. See this for the quoting rules and more WiFi profile configuration options. 1234567Description&#x3D;&#39;My great WiFi&#39;Interface&#x3D;wlan0Connection&#x3D;wirelessSecurity&#x3D;wpaESSID&#x3D;wifinameIP&#x3D;dhcpKey&#x3D;\\&quot;814c45d0f88f60636532b034c463639a506670f8ba3c7965e62cdbc1989f6d66 Save the file and you’re good to go. You can manually connect to the profile you’ve just created with: 1netctl-auto switch-to wlan0-wifiname 5GHz WiFi in the USIf you want to connect to a 5GHz WiFi in the US and it’s not listed, create /etc/wpa_supplicant/wpa_supplicant-wlan0.conf with a single line country=US, and enable it with: 1systemctl enable wpa_supplicant@wlan0 Make filesystem read-only againDo this by typing ro in the console 1ro Additional resources Arch Linux Wiki for netctl","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"Pi-KVM","slug":"pikvm/ipmi","date":"2021-03-02T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/03/02/pikvm/ipmi/","link":"","permalink":"http://example.com/2021/03/02/pikvm/ipmi/","excerpt":"","text":"IPMI BMCIPMI is an old protocol for remote server management.It can be useful for managing a large number of machines with Pi-KVM. Its advantage is that it is supported by many enterprise systems. :exclamation: Although Pi-KVM supports the IPMI protocol, we strongly recommend that you DO NOT USE IToutside of trusted networks due to the protocol’s insecurity. Use Redfish or KVMD API instead of it. To enable ipmi IPMI BMC follow these steps: Switch the filesystem to the RW-mode: 1# rw Setup IPMI account in file /etc/kvmd/ipmipasswd. Enable kvmd-ipmi daemon: 1# systemctl enable --now kvmd-ipmi Switch the filesystem back to the RO: 1# ro Here some examples (on the remote PC): 12$ ipmitool -I lanplus -U admin -P admin -H pikvm power status$ ipmitool -I lanplus -U admin -P admin -H pikvm power on IPMI SoL IPMI supports the ability to get console access to the server using Serial-over-LAN. Pi-KVM can act as a proxy for your server’s COM port. To use this feature, you will need a USB-COM adapter that you need to connect to the Pi-KVM. The COM port of the adapter need to be connected to the server. As with IPMI BMC, you need to configure kvmd-vnc and add the following configuration to /etc/kvmd/override.yaml: 1234ipmi: sol: device: /dev/ttyUSB0 # Path of your USB-COM adapter speed: 115200 After enabling kvmd-ipmi, all requests that it receives over the network regarding the COM port will be forwarded to your server. For example: 1$ ipmitool -I lanplus -U admin -P admin -H pikvm sol activate RedfishRedfish is a more modern server management protocol designed to replace IPMI.It is based on HTTP and fixes many security issues. If possible, we recommend using it instead of IPMI, or using the KVMD API. There’re not special actions required to use Redfish. In addition, Redfish will use regular Pi-KVM credentials.But for systems that have been upgraded to KVMD 2.0 (not a clean image installation), you will probably need to editthe /etc/kvmd/nginx/kvmd.ctx-server.conf file to add these lines at the end: 12345location /redfish &#123; proxy_pass http://kvmd; include /etc/kvmd/nginx/loc-proxy.conf; auth_request off;&#125; :exclamation: Don’t be confused by the parameter auth_request off. KVMD performs authorization on its own.The only open HTTP entrypoint is /redfish/v1, which returns a static document and does not change the state of the Pi-KVM. It’s safe. If there is a file in your system after the update /etc/kvmd/nginx/kvmd.ctx-server.conf.pacnew you can just move it: 1# mv &#x2F;etc&#x2F;kvmd&#x2F;nginx&#x2F;kvmd.ctx-server.conf.pacnew &#x2F;etc&#x2F;kvmd&#x2F;nginx&#x2F;kvmd.ctx-server.conf :exclamation: Be careful not to lose your local changes if you have done anything with this file before. To access the Redfish API, use HTTP Basic Auth. Also you can use the redfishtool: 123$ redfishtool -S Never -r pikvm root$ redfishtool -S Never -u admin -p admin -r pikvm Systems$ redfishtool -S Never -u admin -p admin -r pikvm Systems reset ForceOff","categories":[{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"}],"tags":[]},{"title":"UEFI --- dsc 语法","slug":"uefi/uefi_dsc","date":"2021-02-22T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/22/uefi/uefi_dsc/","link":"","permalink":"http://example.com/2021/02/22/uefi/uefi_dsc/","excerpt":"","text":"语法例子 变量定义与判断 1234567891011DEFINE SECURE_BOOT_ENABLE = FALSE!if $(SECURE_BOOT_ENABLE) == TRUE PlatformSecureLib|OvmfPkg/Library/PlatformSecureLib/PlatformSecureLib.inf TpmMeasurementLib|SecurityPkg/Library/DxeTpmMeasurementLib/DxeTpmMeasurementLib.inf AuthVariableLib|SecurityPkg/Library/AuthVariableLib/AuthVariableLib.inf!else TpmMeasurementLib|MdeModulePkg/Library/TpmMeasurementLibNull/TpmMeasurementLibNull.inf AuthVariableLib|MdeModulePkg/Library/AuthVariableLibNull/AuthVariableLibNull.inf!endif Section Section的大致格式如下：[oo.xx.zz]。这里oo是必选的，而xx、zz等需要根据oo的值来确定是否存在以及具体是什么内容。下面就介绍这些常用的Section关键字。 12345678910111213141516171819[Defines] PLATFORM_NAME = LearnUefi PLATFORM_GUID = 5a9e7754-d81b-49ea-85ad-69eaa7b1539b PLATFORM_VERSION = 0.1 DSC_SPECIFICATION = 0x00010005 OUTPUT_DIRECTORY = Build/LearnUefiPkg SUPPORTED_ARCHITECTURES = X64 BUILD_TARGETS = NOOPT|DEBUG|RELEASE SKUID_IDENTIFIER = DEFAULT FLASH_DEFINITION = LearnUefiPkg/LearnUefiPkg.fdf # # Defines for default states. These can be changed on the command line. # -D FLAG=VALUE # DEFINE SECURE_BOOT_ENABLE = FALSE DEFINE NETWORK_IP6_ENABLE = FALSE DEFINE HTTP_BOOT_ENABLE = FALSE DEFINE SMM_REQUIRE = FALSE 这个Section用来指定编译选项。EDK可以在Windows、Linux和Mac上编译，所以这里的宏也可以指定不同的系统，且EDK包含很多的语言，所以也可以指定。此外，比较特别的一点是，BIOS包含的模块有不同的类型，不同类型会对应不同的体系架构，比如PEIM需要的是32位的编译，DXE之后需要64位的编译，等等。所以这个Section还有一些变种： 123456[BuildOptions] [BuildOptions.common][BuildOptions.$(ARCH)][BuildOptions.common.CodeBase][BuildOptions.$(ARCH).CodeBase][BuildOptions.$(ARCH).CodeBase.$(MODULE_TYPE)] [LibraryClasses]这个Section定义了所以使用到的库函数。由于库可以使用在不同的阶段和架构，所以它也分为不同的子类，如下所示： 1234567891011121314[LibraryClasses][LibraryClasses.common][LibraryClasses.$(ARCH)][LibraryClasses.common.$(MODULE_TYPE)][LibraryClasses.$(ARCH).$(MODULE_TYPE) ]越精细的范围覆盖越通用的范围[LibraryClasses] PcdLib|MdePkg/Library/BasePcdLibNull/BasePcdLibNull.inf[LibraryClasses.common] BaseCryptLib|CryptoPkg/Library/BaseCryptLib/BaseCryptLib.inf[LibraryClasses.common.SEC] TimerLib|OvmfPkg/Library/AcpiTimerLib/BaseRomAcpiTimerLib.inf QemuFwCfgLib|OvmfPkg/Library/QemuFwCfgLib/QemuFwCfgSecLib.inf [PcdsXXX]PCD的Section有不同的种类，对应不同的PCD类型，如下所示： 123456789[PcdsFeatureFlag][PcdsFixedAtBuild][PcdsDynamicDefault][PcdsPatchableInModule][PcdsFeatureFlag] gEfiMdeModulePkgTokenSpaceGuid.PcdHiiOsRuntimeSupport|FALSE gEfiMdeModulePkgTokenSpaceGuid.PcdStatusCodeUseSerial|FALSE gEfiMdeModulePkgTokenSpaceGuid.PcdStatusCodeUseMemory|TRUE [Components]该Section中包含所以需要编译的模块，同样由于模块的不同，这里也会对应不同的变种： 12345678910111213[Components][Components.common][Components.$(ARCH)][Components] OvmfPkg/ResetVector/ResetVector.inf # # SEC Phase modules # OvmfPkg/Sec/SecMain.inf &#123; &lt;LibraryClasses&gt; NULL|MdeModulePkg/Library/LzmaCustomDecompressLib/LzmaCustomDecompressLib.inf &#125;","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]},{"title":"UEFI --- PCD 语法","slug":"uefi/uefi_pcd","date":"2021-02-22T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/22/uefi/uefi_pcd/","link":"","permalink":"http://example.com/2021/02/22/uefi/uefi_pcd/","excerpt":"","text":"PCD 1TokenSpaceGuidCName.PcdCName TokenSpaceGuidCName是一个GUID，PcdCName是一个变量名，两者合起来构成了唯一的PCD变量 PCD 变量有如下类型 （ 主要是访问方式不同 ）： FeatureFlag PCD：它最终返回的是一个TRUE或者FALSE，用于判断条件中；123456[PcdsFeatureFlag] gUefiOemPkgTokenSpaceGuid.PcdTestFeatureVar|FALSE|BOOLEAN|0x30000001访问： DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestBooleanVar: %d\\n&quot;, FeaturePcdGet (PcdTestFeatureVar)));DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestBooleanVar: %d\\n&quot;, PcdGetBool (PcdTestFeatureVar))); PatchableInModule PCD：这种变量的值可以在编译的时候确定，这个不算特别，特别的是它可以在编译完成的二进制文件上通过工具来修改值；1234[PcdsPatchableInModule]gUefiOemPkgTokenSpaceGuid.PcdPatchableVar|0x00ABCDEF|UINT32|0x50000001DEBUG ((EFI_D_ERROR, &quot;[beni]PcdPatchableVar: 0x%x\\n&quot;, PcdGet32 (PcdPatchableVar))); FixedAtBuild PCD：静态值，在编译的时候确定，整个UEFI阶段不可变；1234567891011[PcdsFixedAtBuild]gUefiOemPkgTokenSpaceGuid.PcdTestVar1|0xA5|UINT8|0x20000001gUefiOemPkgTokenSpaceGuid.PcdTestVar2|0xA5A5|UINT16|0x20000002gUefiOemPkgTokenSpaceGuid.PcdTestVar3|0xA5A5A5A5|UINT32|0x20000003gUefiOemPkgTokenSpaceGuid.PcdTestVar4|0xA5A5A5A5A5A5A5A5|UINT64|0x20000004访问： DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar1: 0x%x.\\n&quot;, PcdGet8 (PcdTestVar1)));DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar2: 0x%x.\\n&quot;, PcdGet16 (PcdTestVar2)));DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar3: 0x%x.\\n&quot;, PcdGet32 (PcdTestVar3)));DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar4: 0x%x.\\n&quot;, PcdGet64 (PcdTestVar4))); Dynamic PCD：前面的三种类型可以认为是静态的PCD，而这里以及之后的是动态的PCD；它的特点是可以在UEFI运行的过程中通过Set宏来修改值；在《edk-ii-build-specification.pdf》中有说明该种类型的PCD必须在DSC中在列一遍，但是实际使用似乎并不是必须的；1234[PcdsDynamic]gUefiOemPkgTokenSpaceGuid.PcdOemVersion|0xABCDDCBA|UINT32|0x40000001DEBUG ((EFI_D_ERROR, &quot;[beni]PcdOemVersion: 0x%x\\n&quot;, PcdGet32 (PcdOemVersion))); DynamicEx PCD：跟Dynamic PCD类似，算是加强版，使用宏PcdGetEx/PcdSetEx来访问变量； PCD变量值的类型： BOOLEAN类型 整型（UINT8，UINT16等） VOID *类型 example : 12[PcdsDynamic] gUefiOemPkgTokenSpaceGuid.PcdOemVersion|0xFFFFFFFF|UINT32|0x40000001 PcdsDynamic PCD类型 PcdOemVersion PCD变量名 0xFFFFFFFF default 值 UINT32 类型 0x40000001 token–&gt; Token是一个32位的整型，在DEC中每个PCD都有一个独一无二的Token PCD 读写值: 1PcdGet32(PcdOemVersion)) 要使用读写函数，需要依赖pcd.inf模块： Pcd.inf模块分为PEI和DXE两个版本，分别放在PEI阶段和DXE阶段的最前面，只有整个模块初始化完成之后，才能够开始正常使用PCD宏来访问Dynamic PCD变量。 以DXE阶段的Pcd.inf模块为例，它主要做了两件事情： 初始化该阶段使用的PCD数据库； 安装各种处理PCD需要的Protocol； 可能用到的protocol: 1234567891011121314151617181920212223242526272829303132333435363738394041////// This service abstracts the ability to set/get Platform Configuration Database (PCD).///typedef struct &#123; PCD_PROTOCOL_SET_SKU SetSku; PCD_PROTOCOL_GET8 Get8; PCD_PROTOCOL_GET16 Get16; PCD_PROTOCOL_GET32 Get32; PCD_PROTOCOL_GET64 Get64; PCD_PROTOCOL_GET_POINTER GetPtr; PCD_PROTOCOL_GET_BOOLEAN GetBool; PCD_PROTOCOL_GET_SIZE GetSize; PCD_PROTOCOL_GET_EX_8 Get8Ex; PCD_PROTOCOL_GET_EX_16 Get16Ex; PCD_PROTOCOL_GET_EX_32 Get32Ex; PCD_PROTOCOL_GET_EX_64 Get64Ex; PCD_PROTOCOL_GET_EX_POINTER GetPtrEx; PCD_PROTOCOL_GET_EX_BOOLEAN GetBoolEx; PCD_PROTOCOL_GET_EX_SIZE GetSizeEx; PCD_PROTOCOL_SET8 Set8; PCD_PROTOCOL_SET16 Set16; PCD_PROTOCOL_SET32 Set32; PCD_PROTOCOL_SET64 Set64; PCD_PROTOCOL_SET_POINTER SetPtr; PCD_PROTOCOL_SET_BOOLEAN SetBool; PCD_PROTOCOL_SET_EX_8 Set8Ex; PCD_PROTOCOL_SET_EX_16 Set16Ex; PCD_PROTOCOL_SET_EX_32 Set32Ex; PCD_PROTOCOL_SET_EX_64 Set64Ex; PCD_PROTOCOL_SET_EX_POINTER SetPtrEx; PCD_PROTOCOL_SET_EX_BOOLEAN SetBoolEx; PCD_PROTOCOL_CALLBACK_ONSET CallbackOnSet; PCD_PROTOCOL_CANCEL_CALLBACK CancelCallback; PCD_PROTOCOL_GET_NEXT_TOKEN GetNextToken; PCD_PROTOCOL_GET_NEXT_TOKENSPACE GetNextTokenSpace;&#125; PCD_PROTOCOL;","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]},{"title":"PCI 设备访问","slug":"pci_device/pci_device","date":"2021-02-22T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/02/22/pci_device/pci_device/","link":"","permalink":"http://example.com/2021/02/22/pci_device/pci_device/","excerpt":"","text":"win 10 列出PCI设备 1wmic path win32_pnpentity where &quot;deviceid like &#x27;%PCI%&#x27;&quot; get name,deviceid","categories":[{"name":"PCI","slug":"PCI","permalink":"http://example.com/categories/PCI/"}],"tags":[]},{"title":"UEFI --- env 语法","slug":"uefi/uefi_env","date":"2021-02-22T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/22/uefi/uefi_env/","link":"","permalink":"http://example.com/2021/02/22/uefi/uefi_env/","excerpt":"","text":"内容 好像都是定义的宏，要用项目的feature控制类似如下： 12EDK_GLOBAL EMULATIO_XX_ONLY = NOEDK_GLOBAL EMULATIO_XX_GIO_ONLY = YES","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]},{"title":"vim base operation","slug":"vim/vim_base_operation","date":"2021-02-10T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/10/vim/vim_base_operation/","link":"","permalink":"http://example.com/2021/02/10/vim/vim_base_operation/","excerpt":"","text":"安装 1sudo apt-getinstall vim// Ubuntu 其他平台，可以自行谷歌。 新手指南 vimtutor// vim 教程上面是史上最简单，最全面的Vim基础教程，至今无人超越。 下面是作者基于上面的归纳： 移动光标 12345678910# hjkl# 2w 向前移动两个单词# 3e 向前移动到第 3 个单词的末尾# 0 移动到行首# $ 当前行的末尾# gg 文件第一行# G 文件最后一行# 行号+G 指定行# &lt;ctrl&gt;+o 跳转回之前的位置# &lt;ctrl&gt;+i 返回跳转之前的位置 退出 123# &lt;esc&gt; 进入正常模式# :q! 不保存退出# :wq 保存后退出 删除 123456# x 删除当前字符# dw 删除至当前单词末尾# de 删除至当前单词末尾，包括当前字符# d$ 删除至当前行尾# dd 删除整行# 2dd 删除两行 修改 1234# i 插入文本# A 当前行末尾添加# r 替换当前字符# o 打开新的一行并进入插入模式 撤销 12# u 撤销# &lt;ctrl&gt;+r 取消撤销 复制粘贴剪切 12345# v 进入可视模式# y 复制# p 粘贴# yy 复制当前行# dd 剪切当前行 状态 1#&lt;ctrl&gt;+g 显示当前行以及文件信息 查找 1234567# / 正向查找（n：继续查找，N：相反方向继续查找）# ？ 逆向查找# % 查找配对的 &#123;，[，(# :set ic 忽略大小写# :set noic 取消忽略大小写# :set hls 匹配项高亮显示# :set is 显示部分匹配 替换 123# :s/old/new 替换该行第一个匹配串# :s/old/new/g 替换全行的匹配串# :%s/old/new/g 替换整个文件的匹配串 折叠 1234# zc 折叠# zC 折叠所有嵌套# zo 展开折叠# zO 展开所有折叠嵌套 执行外部命令 123:!shell 执行外部命令.vimrc.vimrc 是 Vim 的配置文件，需要我们自己创建： Vim12curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Neovim123curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim其他平台，可以查看 vim-plug[1]。 基本配置 cd Home // 进入 Home 目录touch .vimrc // 配置文件 取消备份12set nobackupset noswapfile 文件编码1setencoding=utf-8 显示行号1setnumber 取消换行1setnowrap 显示光标当前位置1setruler 设置缩进123set cindentset tabstop=2set shiftwidth=2 突出显示当前行1setcursorline 查找123set icset hlsset is 左下角显示当前vim模式1setshowmode 代码折叠12#启动 vim 时关闭折叠代码set nofoldenable 主题123syntax enableset background=darkcolorscheme solarized ◈ altercation/vim-colors-solarized2◈ Anthony25/gnome-terminal-colors-solarized3 插件配置 树形目录 123456789101112131415161718192021222324252627282930313233343536373839404142434445Plug &#x27;scrooloose/nerdtree&#x27;Plug &#x27;jistr/vim-nerdtree-tabs&#x27;Plug &#x27;Xuyuanp/nerdtree-git-plugin&#x27;autocmd vimenter * NERDTreemap &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;let NERDTreeShowHidden=1let g:NERDTreeShowIgnoredStatus = 1let g:nerdtree_tabs_open_on_console_startup=1let g:NERDTreeIndicatorMapCustom = &#123; \\ &quot;Modified&quot; : &quot;✹&quot;, \\ &quot;Staged&quot; : &quot;✚&quot;, \\ &quot;Untracked&quot; : &quot;✭&quot;, \\ &quot;Renamed&quot; : &quot;➜&quot;, \\ &quot;Unmerged&quot; : &quot;═&quot;, \\ &quot;Deleted&quot; : &quot;✖&quot;, \\ &quot;Dirty&quot; : &quot;✗&quot;, \\ &quot;Clean&quot; : &quot;✔︎&quot;, \\ &#x27;Ignored&#x27; : &#x27;☒&#x27;, \\ &quot;Unknown&quot; : &quot;?&quot; \\ &#125;# o 打开关闭文件或目录# e 以文件管理的方式打开选中的目录# t 在标签页中打开# T 在标签页中打开，但光标仍然留在 NERDTree# r 刷新光标所在的目录# R 刷新当前根路径# X 收起所有目录# p 小写，跳转到光标所在的上一级路径# P 大写，跳转到当前根路径# J 到第一个节点# K 到最后一个节点# I 显示隐藏文件# m 显示文件操作菜单# C 将根路径设置为光标所在的目录# u 设置上级目录为根路径# ctrl + w + w 光标自动在左右侧窗口切换# ctrl + w + r 移动当前窗口的布局位置# :tabc 关闭当前的 tab# :tabo 关闭所有其他的 tab# :tabp 前一个 tab# :tabn 后一个 tab# gT 前一个 tab# gt 后一个 tab ◈ scrooloose/nerdtree4◈ vim-nerdtree-tabs5◈ nerdtree-git-plugin6 代码，引号，路径补全123Plug &#x27;Valloric/YouCompleteMe&#x27;Plug &#x27;Raimondi/delimitMate&#x27;Plug &#x27;Shougo/deoplete.nvim&#x27;, &#123; &#x27;do&#x27;: &#x27;:UpdateRemotePlugins&#x27; &#125; ◈ Valloric/YouCompleteMe7◈ Raimondi/delimitMate8◈ Shougo/deoplete.nvim9 语法高亮，检查12345678910111213141516171819Plug &#x27;sheerun/vim-polyglot&#x27;Plug &#x27;w0rp/ale&#x27;let g:ale_linters = &#123;\\ &#x27;javascript&#x27;: [&#x27;eslint&#x27;],\\ &#x27;css&#x27;: [&#x27;stylelint&#x27;],\\&#125;let g:ale_fixers = &#123;\\ &#x27;javascript&#x27;: [&#x27;eslint&#x27;],\\ &#x27;css&#x27;: [&#x27;stylelint&#x27;],\\&#125;let g:ale_fix_on_save = 1let g:ale_sign_column_always = 1let g:ale_sign_error = &#x27;●&#x27;let g:ale_sign_warning = &#x27;▶&#x27;nmap &lt;silent&gt; &lt;C-k&gt; &lt;Plug&gt;(ale_previous_wrap)nmap &lt;silent&gt; &lt;C-j&gt; &lt;Plug&gt;(ale_next_wrap) ◈ w0rp/ale10◈ sheerun/vim-polyglot11 文件，代码搜索12Plug &#x27;rking/ag.vim&#x27;Plug &#x27;kien/ctrlp.vim&#x27; ◈ kien/ctrlp.vim12◈ ggreer/the_silver_searcher13◈ rking/ag.vim14 加强版状态栏1234Plug &#x27;vim-airline/vim-airline&#x27;Plug &#x27;vim-airline/vim-airline-themes&#x27;let g:airline_theme=&#x27;papercolor&#x27; ◈ vim-airline/vim-airline15◈ vim-airline/vim-airline-themes16 代码注释123456789101112131415161718Plug &#x27;scrooloose/nerdcommenter&#x27;# &lt;leader&gt;cc // 注释# &lt;leader&gt;cm 只用一组符号注释# &lt;leader&gt;cA 在行尾添加注释# &lt;leader&gt;c$ /* 注释 */# &lt;leader&gt;cs /* 块注释 */# &lt;leader&gt;cy 注释并复制# &lt;leader&gt;c&lt;space&gt; 注释/取消注释# &lt;leader&gt;ca 切换 // 和 /* */# &lt;leader&gt;cu 取消注释let g:NERDSpaceDelims = 1let g:NERDDefaultAlign = &#x27;left&#x27;let g:NERDCustomDelimiters = &#123; \\ &#x27;javascript&#x27;: &#123; &#x27;left&#x27;: &#x27;//&#x27;, &#x27;leftAlt&#x27;: &#x27;/**&#x27;, &#x27;rightAlt&#x27;: &#x27;*/&#x27; &#125;, \\ &#x27;less&#x27;: &#123; &#x27;left&#x27;: &#x27;/**&#x27;, &#x27;right&#x27;: &#x27;*/&#x27; &#125; \\ &#125; ◈ scrooloose/nerdcommenter17 git12Plug &#x27;airblade/vim-gitgutter&#x27;Plug &#x27;tpope/vim-fugitive&#x27; ◈ airblade/vim-gitgutter18◈ tpope/vim-fugitive19 Markdown12345Plug &#x27;suan/vim-instant-markdown&#x27;let g:instant_markdown_slow = 1let g:instant_markdown_autostart = 0# :InstantMarkdownPreview ◈ suan/vim-instant-markdown20 Emmet12345678Plug &#x27;mattn/emmet-vim&#x27;let g:user_emmet_leader_key=&#x27;&lt;Tab&gt;&#x27;let g:user_emmet_settings = &#123; \\ &#x27;javascript.jsx&#x27; : &#123; \\ &#x27;extends&#x27; : &#x27;jsx&#x27;, \\ &#125;, \\ &#125; ◈ mattn/emmet-vim21 html 51Plug&#x27;othree/html5.vim&#x27; ◈ othree/html5.vim22 css 312345678Plug &#x27;hail2u/vim-css3-syntax&#x27;Plug &#x27;ap/vim-css-color&#x27;augroup VimCSS3Syntax autocmd! autocmd FileType css setlocal iskeyword+=-augroup END ◈ hail2u/vim-css3-syntax23◈ ap/vim-css-color24 JavaScipt123456789101112131415161718Plug &#x27;pangloss/vim-javascript&#x27;let g:javascript_plugin_jsdoc = 1let g:javascript_plugin_ngdoc = 1let g:javascript_plugin_flow = 1set foldmethod=syntaxlet g:javascript_conceal_function = &quot;ƒ&quot;let g:javascript_conceal_null = &quot;ø&quot;let g:javascript_conceal_this = &quot;@&quot;let g:javascript_conceal_return = &quot;⇚&quot;let g:javascript_conceal_undefined = &quot;¿&quot;let g:javascript_conceal_NaN = &quot;ℕ&quot;let g:javascript_conceal_prototype = &quot;¶&quot;let g:javascript_conceal_static = &quot;•&quot;let g:javascript_conceal_super = &quot;Ω&quot;let g:javascript_conceal_arrow_function = &quot;⇒&quot;let g:javascript_conceal_noarg_arrow_function = &quot; &quot;let g:javascript_conceal_underscore_arrow_function = &quot; &quot;set conceallevel=1 ◈ pangloss/vim-javascript25（注：上述脚本中存在特殊字符，有的情况下显示不正确，请直接用上述链接的内容。） React12Plug &#x27;mxw/vim-jsx&#x27;let g:jsx_ext_required = 0 ◈ mxw/vim-jsx26 Prettier12345678Plug &#x27;prettier/vim-prettier&#x27;, &#123; \\ &#x27;do&#x27;: &#x27;yarn install&#x27;, \\ &#x27;for&#x27;: [&#x27;javascript&#x27;, &#x27;typescript&#x27;, &#x27;css&#x27;, &#x27;less&#x27;, &#x27;scss&#x27;, &#x27;json&#x27;, &#x27;graphql&#x27;] &#125;let g:prettier#config#bracket_spacing = &#x27;true&#x27;let g:prettier#config#jsx_bracket_same_line = &#x27;false&#x27;let g:prettier#autoformat = 0autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql PrettierAsync# :Prettier ◈ prettier/vim-prettier27 总结最后，呈上参考配置 .vimrc28，如果关于 vim 有更好的 idea，欢迎在评论中交流。 My vimrc config 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849set nuset ts=2set hlsearch set etset expandtabnoremap &lt;A-up&gt; :call feedkeys( line(&#x27;.&#x27;)==1 ? &#x27;&#x27; : &#x27;ddkP&#x27; )&lt;CR&gt;noremap &lt;A-down&gt; ddp&quot; tags 设置set tags=tags; set autochdirif has(&quot;cscope&quot;) set csprg=/usr/bin/cscope &quot;指定用来执行 cscope 的命令 set csto=1 &quot;先搜索tags标签文件,再搜索cscope数据库 set cst &quot;使用|:cstag|(:cs find g),而不是缺省的:tag set nocsverb &quot;不显示添加数据库是否成功 &quot; add any database in current directory if filereadable(&quot;cscope.out&quot;) cs add cscope.out &quot;添加cscope数据库 endif &quot;显示添加成功与否 set csverbendif:set cscopequickfix=s-,c-,d-,i-,t-,e-nmap &lt;C-\\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;i :cs find i ^&lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;$&lt;CR&gt;nmap &lt;C-\\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;&quot; quick exit nmap &lt;ESC&gt; :wqsyntax onset nocp","categories":[{"name":"vim","slug":"vim","permalink":"http://example.com/categories/vim/"}],"tags":[]},{"title":"bios issue fiexd","slug":"interview/bios_related","date":"2021-02-09T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/02/09/interview/bios_related/","link":"","permalink":"http://example.com/2021/02/09/interview/bios_related/","excerpt":"","text":"1. softfuse struck A5EF1. softfuse struck A5EF","categories":[{"name":"interview","slug":"interview","permalink":"http://example.com/categories/interview/"}],"tags":[]},{"title":"interview","slug":"interview/interview","date":"2021-02-09T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/02/09/interview/interview/","link":"","permalink":"http://example.com/2021/02/09/interview/interview/","excerpt":"","text":"中断 中断分为上半部和下半部，上半部关中断；下半部开中断，处理可以延迟的事情。下半部有workqueue/softirq/tasklet三种方式顶半部，硬件作答，快速响应底半部，延时执行 local_irq_disable和disable_irq区别： workquence 工作队列允许重新调度甚至是睡眠,workqueue_struct d-&gt;workINIT_WORK(&amp;d-&gt;work, work_task);schedule_work(&amp;d-&gt;work); 指定cpudestroy_workqueue() softirq 无法sleep静态定义软中断数组softirq_vec, 存放各自的中断处理函数softirq_action 每个CPU都有一个这样的数组，谁发起，谁执行 内核限制32个， 如mac_tx, mac_rx, tasklet, 定时器使用： void open_softirq(int nr, void (*action)(struct softirq_action *)) 添加中断回调函数。 raise_softirq() 触发软中断 ，就是在pre-cpu变量__softirq_pending上置位。然后local_softirq_pending() 检测那些pending， 执行invoke_softirq() 如果多个softirq pending, 按数组顺序执行。 网络收发软中断有超时机制，和次数限制。 tasklet 演示40ms 无法睡眠pre-cpu 维护一tasklet list , tasklet一旦挂入一个cpu的tasklet表，就只会在该cpu上运行，哪怕被重新调度使用： DECLARE_TASKLET(&amp;port-&gt;tasklet, callback, data) tasklet_schedule(&amp;port-&gt;tasklet); tasklet_kill(&amp;port-&gt;tasklet); tasklet_disable(&amp;port-&gt;tasklet);只用于disable tasklet , 而local_bh_disable/enable 是disable bh 操作 softirq/tasklet. tasklet_enable(&amp;port-&gt;tasklet); runqueue linux 就绪队列struct runqueue，每个CPU都有一个执行队列，队列中以work的形式执行每个任务。 进程 进程切换，有能力挂起正在CPU上执行的进程，和恢复执行。进程调度由schedule()函数实现 complete 进程同步机制 struct completion { unsigned int done;/用于同步的原子量/ 类似信号量，等待一个减1 wait_queue_head_t wait;/等待事件队列/};用法： 这个变量可以静态地声明和初始化： DECLARE_COMPLETION(my_comp); 或者动态初始化： struct completion my_comp; init_completion(&amp;my_comp); wait_for_completion(struct completion *comp);等待其他事件完成 ， 将当前进程放入wait quence尾，sch超时唤醒后，循环检测done是否可用 其他事件完成后调用complete(struct completion *comp); 唤醒等待该事件的所在进程 notify 机制， 模块之间通信 struct notifier_block{ int (*notifier_call)(struct notifier_block *self, unsigned long, void *); struct notifier_block *next; int priority;};notifier_chain_registernotifier_call_chain devicefs DEVICE_ATTR 需要绑定设备struct device_attribute { struct attribute attr; ssize_t (*show)(struct device *dev, struct device_attribute *attr,char *buf); ssize_t (*store)(struct device *dev, struct device_attribute *attr,const char *buf, size_t count);};DEVICE_ATTR 实现一些这样的设备属性结构sysfs_create_file(&amp;mydevice-&gt;kobj, &amp;dev_attr_mydevice.attr); 绑定设备与设备属性 debugfs 无需绑定设备，mount debugfs 之后就可以在该目录下找到我们的节点debugfs_create_dir(const char *name, struct dentry *parent);debugfs_create_file(“stats”, S_IRUGO | S_IWUSR, client-&gt;debugfs,client, &amp;debugfs_stats_ops); 绑定文件和函数操作集合 Cmake mafile工程的构建工具 简单语法： include_directories (“${PROJECT_SOURCE_DIR}/MathFunctions”) 添加include add_subdirectory (MathFunctions) 添加子目录 add_executable (Tutorial tutorial.cxx) 定义一个可执行文件，以及依赖的源文件 target_link_libraries (Tutorial MathFunctions) 链接库 makefile $@ 表示目标文件$^ 表示所有的依赖文件$&lt; 表示第一个依赖文件$? 表示比目标还要新的依赖文件列表 原子操作 锁的使用： spinlock: 死等，或者挂起当前进程 一次只有一个thread获取锁 因为可以睡眠，所以可以在BH中使用。使用： spin_lock 关闭内核抢占，也就是说同时只能一个进程获取这个锁，不关闭的，其他的进程抢占，抢占之后发现需要之前的进程解锁才能继续执行，就会导致死锁。 spin_lock_bh spin_lock_softirq 加了这把锁，本地软中断会被禁用。 使用场景： 比如配合tasklet，害怕被软中断sch，又请求锁住的资源，造成死锁。 spin_lock_irq 加了这把锁，本地软中断会被禁用。本地hard irq会被禁用。 spin_lock_irqsave 禁用本地hard irq ， 但是会保存中断状态，配合spin_unlock_irqrestore 进入退出，还原中断状态。 spin_lock_nested 为了配合lockdep 机制，防止误报重复上锁的 互斥锁mutex， 锁住线程共享资源 pthread_mutex_lock 无法获取该所示，进入阻塞（睡眠，这些睡眠的线程会排队访问互斥量），pthread_mutex_trylock 就不会阻塞，直接返回ebusy 读写锁rwlock pthread_rwlock_rdlock(pthread_rwlock_t *rwpt);pthread_rwlock_wrlock(pthread_rwlock_t *rwpt);pthread_rwlock_unlock(pthread_rwlock_t *rwpt); 死锁的例子 2个线程持有2把锁，交叉互锁，出现死锁。 进程空间 进程为什么是4G寻址空间， 一个指针是4字节 32位，寻址能力是2的32次方，是4G.32位linux , 一个进程空间4G，内核占1G，用户留3G，一个线程默认8M(但是因为还要包括 栈区，txt,data， heap 所以实际是大概6M)，所以最多380个左右线程进程栈16K.虚拟空间的3G还要分区： ①栈空间：特点是由系统管理，先进后出，里面放了局部变量、函数形参、自动变量。 ②堆空间：特点是由用户管理，先进后出，我们可以用malloc、ralloc、calloc来分配空间。 alloc(sizeof(int)); 物理连续内存 vmalloc属性：可能睡眠、虚拟地址连续、物理地址不连续、size对齐到页；所以不适合小内存分配，开销较大。 realloc(p, SIZE * 2); 为已经分配空间的指针重新分配空间。 如果新的空间小于旧的空间，则指针不变， 如果大于， 则申请更大空间，然后拷贝原来的内容， 清空就的指针空间。 calloc(SIZE, sizeof(int)); 和malloc 一样，但是会全部初始化为0,不需要memset. ③数据段：数据段里面又分三块，第一块是bss，保存未初始化的全局变量；第二块是rodata，保存了常量；第三块 是.data（静态数据区）保存了初始化的全局变量还有static修饰的变量。 ④代码段：存放了源代码。 kernel/userspace 空间 kernel 空间分区userspace 空间分区 arm 终端流程： 中断流程， A系列不支持中断嵌套 M系列支持 进入中断 保存CPSR到对应cpu的SPSR_mode 关中断 切换到异常状态 保存PC到LR 设置PC到中断向量表中的对应处理函数地址中 恢复中断 恢复 SPSR_mode 到 CPSR 恢复 lr_mode 到 PC 恢复普通寄存器：R0-R7，操作sp将栈中将数据恢复。 devmem 访问dts定义的内存范围内的外设寄存器访问，操作的是物理寄存器 物理内存，虚拟内存如何组织映射。 虚拟地址空间比可用的物理内存大很多，因此只有最常用的部分才与物理页帧关联这不是问题，因为大多数程序只占用实际可用内存的一小部分 野指针 指针在被定义的时候，如果程序不对其进行初始化的话，它会随机指向一个区域，不能判断是否为NULL。 strcpy strcmp strlen 排序算法有哪些 冒泡排序选择排序插入排序希尔排序归并排序 迭代法 递归法快速排序 迭代法 递归法 c 函数型参处于那个内存空间 （可以尝试从汇编调用函数开始理解） 形参的传递在arm架构中，如果你的参数少于三个，则是通过R0或R0、R1或R0、R1、R2传递过去的，如果多余三个则是多出来的是通过堆栈传递的 实参是放栈上的 行参是一个占位符，它没有数据 发生函数调用时，实参的值会传递给形参 形参和实参虽然可以同名，但它们之间是相互独立的，互不影响，因为实参在函数外部有效，而形参在函数内部有效。 函数返回值将会又主函数开辟一个临时的新的内存空间来保存 如下例子：x86平台上，前3个参数传递给了 core 寄存器，就是arm中的R0/R1/R2通用寄存器，后面的参数压栈了 2分法查找 AT 命令 lcd 原理 frambuffer 机制 http ftp TCP/IP 协议 spsr cpsr[31:28/条件标志，执行汇编的算数运算时，表示运算结果]NZCV[27:8] 保留[7：5 | 7:I/irq使能 6:F/快中断 5：T状态位，arm/thumb] t=1 强制进入未定义指令中断[4:0] 模式 物理/虚拟地址映射 32位linux总地址4G 一级页表页大小4K, 共4G/4k个页，每1M个页组成1个页目录，1M个页目录是一个固定入口地址， 存在CR3 中。二级页表存储1M页目录 页目录地址-&gt; CR3寄存器一个虚拟地址的组成： DIRECTORY [22：31] 可表示1024个页目录（PGD） TABLE[12：21] 可表示1024个页表（PTE) OFFSET[22：31] 可表示4096个物理内存 copy_to_user/copy_form_user 虚拟内存地址对应的物理内存与内核虚拟内存地址对应的物理内存 mmap 用户空间虚拟地址与物理地址的map 目标是在用户空间访问硬件，所有可以省去映射到kernel虚拟空间这一步。 ioremap 内核空间虚拟地址与物理地址的map IPC 机制 信号 信号量 管道 消息队列 itouch hexgon SDK running time logger , fastRPC TDDI , 时序同步 屏幕基本 一个像素8bit RGB信号发生时间 vsync 到一帧的最后一个像素 -&gt; 发出VBP(帧后的同步时间) -&gt; hsync 行同步信号 -&gt; HBP行后同步时间 -&gt; 一行像素 -&gt; HFP行前同步信号 -&gt; VFP帧前同步信号 android 版本更新时间节点 霍尔器件的驱动移植 霍尔器件是磁感应器件，上电后，当检测到磁性物体靠近，中断脚就会产生一个高脉冲。1，在DWS文件中配置上电，中断等管脚，然后在DTS中编写基础配置；2，编写一个字符驱动，内含中断注册，检测，并向上层提供调用接口。 improveTouch 1，高通android参考机外设improveTouch研发，区别于传统的第三方touch， improveTouch核心算法主要放在dsp中运算，通过userspace nativea app控制，kernel driver向input子系统转发触摸事件。2，算法组维护adsp中的hal，算法，系统组负责平台的移植 userspace/kernel的代码维护。3，我主要是编写 dts/driver 的代码，通过pinctrl/set_regulator等kernel api 管理硬件资源,维护usersapce的代码，开发版本的整合，wiki文档的更新。解决内部测试团队发现的bug。4，其他芯片平台有过secureTouch的开发例子,对于新的touch驱动做一个移植，跑通。主要是在kernel 和trustzone子系统中添加code。 crash 工具的使用，死机问题分析 mem 我理解是DDR devmem 访问dts定义的内存范围内的外设寄存器访问，操作的是物理寄存器 http ftp TCP/IP 协议 触摸屏突然不亮检查流程 上电，reset电路，总线通信。getevent检查多点触摸协议报点是否有，是否符合报点规范。 stack 栈由高到低生长 kernel栈16K uart 子系统 网络 子系统 misc驱动 input系统 多点触摸协议 手势检测 M7 i2c 发出从地址后，没有ack 从地址不对？ 轮寻一定范围的地址，查看是否有ack.M7的时钟 200/300/400Mi2c 低中高时钟 100K/ Rtos 与 linux的区别 主要区别在于实时性 sn3193 类似芯片 关键参数流程 bl0,bl1,bl2,bl3 ( sanxin 4412 )的区别，与联系 为什么需要bootloader 存在，没有bootloader 当然可以启动系统。有bootloader的好处，系统升级。只要将对应的image 放在某个地址，重启就可以了。不需要接烧写器烧写。 bl0, blx 就类似于不同阶段，不同功能的bootloader, 分多个也是为了方便升级替换 （ 典型应用 : fastboot flash bootloader xxx.bin ） BL0：三星公司固化到SOC内部的ROM（iROM），里面主要是尽可能只做uboot加载，尽可能消除其他的影响（关闭WDT、禁用IRQ、关闭cache等等），接下来就是从外设拷贝加载BL1BL1：没什么特殊功能，特点就是经过加密的，而且BL1由三星公司提供好的，完成对BL2的加载到iRAM运行。要想在开发板上移植运行后续的代码，通过签名的方式实现软件和硬件合法性的匹配BL2：由平台研发人员编写，根据SOC外内存硬件不同、工作频率不同，进行初始化设置，完成后续代码加载到初始化后的内存中运行","categories":[{"name":"interview","slug":"interview","permalink":"http://example.com/categories/interview/"}],"tags":[]},{"title":"Linux Crash Tool","slug":"tool/linux_crash","date":"2021-02-09T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/09/tool/linux_crash/","link":"","permalink":"http://example.com/2021/02/09/tool/linux_crash/","excerpt":"","text":"下载","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"cscope 安装 配置 使用","slug":"tool/cscope","date":"2021-02-08T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/08/tool/cscope/","link":"","permalink":"http://example.com/2021/02/08/tool/cscope/","excerpt":"","text":"安装 1sudo apt install cscope 配置 ~/.vimrc 中添加如下配置 12345678910111213141516171819202122232425262728293031323334&quot; tags 设置set tags=tags; set autochdirif has(&quot;cscope&quot;) set csprg=/usr/bin/cscope &quot;指定用来执行 cscope 的命令 set csto=1 &quot;先搜索tags标签文件,再搜索cscope数据库 set cst &quot;使用|:cstag|(:cs find g),而不是缺省的:tag set nocsverb &quot;不显示添加数据库是否成功 &quot; add any database in current directory if filereadable(&quot;cscope.out&quot;) cs add cscope.out &quot;添加cscope数据库 endif &quot;显示添加成功与否 set csverbendif:set cscopequickfix=s-,c-,d-,i-,t-,e-nmap &lt;C-\\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;# 查找哪里调用了当前的函数nmap &lt;C-\\&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;# 查找所有符号nmap &lt;C-\\&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;i :cs find i ^&lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;$&lt;CR&gt;nmap &lt;C-\\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt; 建立索引 建立脚本，执行生成tag, cscope符号表 12345#!/bin/shfind `pwd` -name &quot;*.[ch]&quot; -o -name &quot;*.cpp&quot; &gt; cscope.files cscope -bRkq -i cscope.files ctags -R cscope 使用 快捷键，上面配置中已经配置了。 123456789101112131415161718192021222324252627282930cscope --helpUsage: cscope [-bcCdehklLqRTuUvV] [-f file] [-F file] [-i file] [-I dir] [-s dir] [-p number] [-P path] [-[0-8] pattern] [source files]-b Build the cross-reference only.-C Ignore letter case when searching.-c Use only ASCII characters in the cross-ref file (don&#x27;t compress).-d Do not update the cross-reference.-e Suppress the &lt;Ctrl&gt;-e command prompt between files.-F symfile Read symbol reference lines from symfile.-f reffile Use reffile as cross-ref file name instead of cscope.out.-h This help screen.-I incdir Look in incdir for any #include files.-i namefile Browse through files listed in namefile, instead of cscope.files-k Kernel Mode - don&#x27;t use /usr/include for #include files.-L Do a single search with line-oriented output.-l Line-oriented interface.-num pattern Go to input field num (counting from 0) and find pattern.-P path Prepend path to relative file names in pre-built cross-ref file.-p n Display the last n file path components.-q Build an inverted index for quick symbol searching.-R Recurse directories for files.-s dir Look in dir for additional source files.-T Use only the first eight characters to match against C symbols.-U Check file time stamps.-u Unconditionally build the cross-reference file.-v Be more verbose in line mode.-V Print the version number.Please see the manpage for more information.","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"c binary 相关工具","slug":"tool/c_binary","date":"2021-02-08T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/08/tool/c_binary/","link":"","permalink":"http://example.com/2021/02/08/tool/c_binary/","excerpt":"","text":"strings 列出bin文件中的字符串 12345678910111213141516171819strings a.out /lib64/ld-linux-x86-64.so.2libc.so.6puts__cxa_finalizestrcmp__libc_start_mainGLIBC_2.2.5_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableu+UH[]A\\A]A^A_cheking passwd!ok you got meWRONG !Usage: &lt;key&gt;:*3$&quot; 2进制转16进制 vim 中 ：%！xxd 退回二进制： ：%！xxd -r bash shell: xxd a.out &gt; 16.txt file 12345678~~~---### readelf ---查看程序段信息, [参考文档](https://blog.csdn.net/yfldyxl/article/details/81566279)~~~bash readelf -S a.out # -S(section headers),sections addr2line 1","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"vim plug","slug":"tool/vim","date":"2021-02-08T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/08/tool/vim/","link":"","permalink":"http://example.com/2021/02/08/tool/vim/","excerpt":"","text":"安装vim-plug 12vim : curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vimneovim : curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 配置 vim-plug 修改 ~/.vimrc 123call plug#begin(&#x27;~/.vim/plugged&#x27;)Plug &#x27;itchyny/lightline.vim&#x27;call plug#end() 插件操作 12345678# 导入插件:PlugInstall# 更新插件:PlugUpdate# 清理插件:PlugClean 常用插件 12# 目录树Plug &#x27;scrooloose/nerdtree&#x27;, &#123; &#x27;on&#x27;: &#x27;NERDTreeToggle&#x27; &#125; 配置实现的插件 换行 ALT + 上下 实现vscode类似的换行效果 12noremap &lt;A-up&gt; :call feedkeys( line(&#x27;.&#x27;)==1 ? &#x27;&#x27; : &#x27;ddkP&#x27; )&lt;CR&gt;noremap &lt;A-down&gt; ddp","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"Youtube-dl youtube视频批量下载","slug":"tool/youtuber_dll","date":"2021-02-08T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/08/tool/youtuber_dll/","link":"","permalink":"http://example.com/2021/02/08/tool/youtuber_dll/","excerpt":"","text":"what is Youtube-dl ？ Youtube-dl 是一个自由开源的命令行视频下载工具，可以用来从 Youtube 等类似的网站上下载视频，目前它支持的网站除了 Youtube 还有 Facebook、Dailymotion、Google Video、Yahoo 等等。它构架于 pygtk 之上，需要 Python 的支持来运行。它支持很多操作系统，包括 Windows、Mac 以及 Unix。Youtube-dl 还有断点续传、下载整个频道或者整个播放清单中的视频、添加自定义的标题、代理等等其他功能。 12345sudo apt-get update -ysudo apt-get upgrade -ysudo apt-get install curl -ycurl -L https://yt-dl.org/latest/youtube-dl -o /usr/bin/youtube-dlchmod 755 /usr/bin/youtube-dl 12345678910111213141516171819202122232425262728# 显示所有视频格式youtube-dl -F https://www.youtube.com/watch?v=j_JgXJ-apXs [info] Available formats for j_JgXJ-apXs:format code extension resolution note139 m4a audio only DASH audio 56k , m4a_dash container, mp4a.40.5@ 48k (22050Hz), 756.44KiB249 webm audio only DASH audio 56k , opus @ 50k, 724.28KiB250 webm audio only DASH audio 69k , opus @ 70k, 902.75KiB171 webm audio only DASH audio 110k , vorbis@128k, 1.32MiB251 webm audio only DASH audio 122k , opus @160k, 1.57MiB140 m4a audio only DASH audio 146k , m4a_dash container, mp4a.40.2@128k (44100Hz), 1.97MiB278 webm 256x144 144p 97k , webm container, vp9, 24fps, video only, 1.33MiB160 mp4 256x144 DASH video 102k , avc1.4d400c, 24fps, video only, 731.53KiB133 mp4 426x240 DASH video 174k , avc1.4d4015, 24fps, video only, 1.36MiB242 webm 426x240 240p 221k , vp9, 24fps, video only, 1.74MiB134 mp4 640x360 DASH video 369k , avc1.4d401e, 24fps, video only, 2.90MiB243 webm 640x360 360p 500k , vp9, 24fps, video only, 4.15MiB135 mp4 854x480 DASH video 746k , avc1.4d401e, 24fps, video only, 6.11MiB244 webm 854x480 480p 844k , vp9, 24fps, video only, 7.27MiB247 webm 1280x720 720p 1155k , vp9, 24fps, video only, 9.21MiB136 mp4 1280x720 DASH video 1300k , avc1.4d401f, 24fps, video only, 9.66MiB248 webm 1920x1080 1080p 1732k , vp9, 24fps, video only, 14.24MiB137 mp4 1920x1080 DASH video 2217k , avc1.640028, 24fps, video only, 15.28MiB17 3gp 176x144 small , mp4v.20.3, mp4a.40.2@ 24k36 3gp 320x180 small , mp4v.20.3, mp4a.40.243 webm 640x360 medium , vp8.0, vorbis@128k18 mp4 640x360 medium , avc1.42001E, mp4a.40.2@ 96k22 mp4 1280x720 hd720 , avc1.64001F, mp4a.40.2@192k (best) 然后使用 -f 指定你想要下载的格式，如下所示： 12345678youtube-dl -f 18 https://www.youtube.com/watch?v=j_JgXJ-apXs[youtube] j_JgXJ-apXs: Downloading webpage[youtube] j_JgXJ-apXs: Downloading video info webpage[youtube] j_JgXJ-apXs: Extracting video information[youtube] j_JgXJ-apXs: Downloading MPD manifest[download] Destination: B.A. PASS 2 Trailer no 2 _ Filmybox-j_JgXJ-apXs.mp4[download] 100% of 6.90MiB in 00:47 下载音频1youtube-dl https://www.youtube.com/watch?v=j_JgXJ-apXs -x --audio-format mp3 下载视频1youtube-dl -citw https://www.youtube.com/channel/UCatfiM69M9ZnNhOzy0jZ41A 指定代理1youtube-dl --proxy http://proxy-ip:port https://www.youtube.com/watch?v=j_JgXJ-apXs youtube-list若想一条命令下载多个 Youtube 视频，那么首先把所有要下载的 Youtube 视频 URL 存在一个文件中（假设这个文件叫 youtube-list.txt），然后运行下面命令： 1youtube-dl -a youtube-list.txt","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"linux 上截图工具","slug":"tool/Linux_screencut","date":"2021-02-08T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/08/tool/Linux_screencut/","link":"","permalink":"http://example.com/2021/02/08/tool/Linux_screencut/","excerpt":"","text":"","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"MarkDown Language Reference","slug":"markdown/03_language_markdown_ref","date":"2021-02-07T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/02/07/markdown/03_language_markdown_ref/","link":"","permalink":"http://example.com/2021/02/07/markdown/03_language_markdown_ref/","excerpt":"","text":"一级标题 二级标题 三级标题 四级标题 五级标题 ###### 六级标题 代码块 表格 | 单元格 | 单元格 | 红色字体 注释 ~~~ 任务列表 - [x] 任务二 已做任务 - + 空格 + [x] 换行 (后面空2格) 空行 对齐方式 斜体、粗体、删除线、下划线、背景高亮 超链接、页内链接、自动链接 注脚 自动链接 插图片 多级引用 字体、字号、颜色 流程图 分割线 HTML表单 特殊字符 目录 Markdown All in One: Create Table of Contents 标题一级标题二级标题三级标题四级标题五级标题六级标题 代码块$符，加行号 1$ int a = 4 ; VS 1int a = 4 ; 表格 表头 表头 单元格 单元格 单元格 单元格 红色字体 注释123&lt;div style=&#x27;display: none&#x27;&gt;哈哈我是注释，不会在浏览器中显示。&lt;/div&gt; 任务列表 任务一 未做任务 - + 空格 + [ ] 任务二 已做任务 - + 空格 + [x] 换行 (后面空2格)nihaofaweafe 空行在编辑的时候有多少个空行(只要这一行只有回车或者space没有其他的字符就算空行)，在渲染之后，只隔着一行。 对齐方式行中心对齐 行左对齐 行右对齐 斜体、粗体、删除线、下划线、背景高亮斜体或斜体粗体加粗斜体删除线++下划线++==背景高亮== 超链接、页内链接、自动链接 方法一[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字，链接地址与title前有一个空格。 作者：择势量投链接：https://www.jianshu.com/p/ebe52d2d468f来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。欢迎阅读 择势勤 方法二我经常去的几个网站Google、Leanote。 注脚使用 Markdown^1可以效率的书写文档, 直接转换成 HTML[^2]。 [^2]:HyperText Markup Language 超文本标记语言 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;http://example.com/&gt; &emsp;&emsp;&lt;&#x61;&#100;&#100;&#114;&#101;&#x73;&#115;&#64;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;&gt; 插图片 _config.yml 中配置 post_asset_folder: true 在md文件同级目录建立同名文件夹，将图片放入，就可以相对的引用1![](patchbinary.png) 多级引用 请问 Markdwon 怎么用？ - 小白自己看教程！ - 愤青教程在哪？ - 小白 字体、字号、颜色1234567&lt;font face&#x3D;&quot;黑体&quot;&gt;我是黑体字&lt;&#x2F;font&gt;&lt;font face&#x3D;&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;&#x2F;font&gt;&lt;font face&#x3D;&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;&#x2F;font&gt;&lt;font color&#x3D;#0099ff size&#x3D;12 face&#x3D;&quot;黑体&quot;&gt;黑体&lt;&#x2F;font&gt;&lt;font color&#x3D;gray size&#x3D;5&gt;gray&lt;&#x2F;font&gt;&lt;font color&#x3D;#00ffff size&#x3D;3&gt;null&lt;&#x2F;font&gt;&lt;font color&#x3D;&#39;red&#39;&gt; red &lt;&#x2F;font&gt; 我是黑体字我是微软雅黑我是华文彩云黑体graynull red 流程图12graph LRA--&gt;B 123sequenceDiagramA-&gt;&gt;B: How are you?B-&gt;&gt;A: Great! 分割线 HTML表单 值班人员 星期一 星期二 星期三 李强 张明 王平 特殊字符 表头 表头 单元格 单元格 单元格 单元格 ｜特殊字符 | 描述 | 字符的代| | —- | —- | —- |｜ | 空格符 | &nbsp;|｜&lt; | 小于号 | &lt; |｜ &gt; | 大于号 | &gt; |｜&amp; | 和号 | &amp;|｜￥ | 人民币 | &yen;|｜© | 版权 | &copy;|｜® | 注册商标 | &reg;|｜°C | 摄氏度 | &deg;|｜± | 正负号 | &plusmn;|｜× | 乘号 | &times;|｜÷ | 除号 | &divide;|｜² | 平方（上标²）| &sup2;|｜³ | 立方（上标³）| &sup3;|","categories":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/categories/markdown/"}],"tags":[]},{"title":"hack binary example","slug":"liveoverflow/hack_binary_example","date":"2021-02-07T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/02/07/liveoverflow/hack_binary_example/","link":"","permalink":"http://example.com/2021/02/07/liveoverflow/hack_binary_example/","excerpt":"","text":"目的 通过修改bin文件，跳过字符串匹配，密码检查。 代码 123456789101112131415#include &lt;stdio.h&gt; #include &lt;string.h&gt; int main(int argc,char* argv[])&#123; if (argc == 2)&#123; printf(&quot;cheking passwd!\\n&quot;); if (strcmp(&quot;pwd&quot;,argv[1]) == 0)&#123; printf(&quot;ok you got me\\n&quot;); &#125;else printf(&quot;WRONG !\\n&quot;); &#125;else printf(&quot;Usage: &lt;key&gt;\\n&quot;); return ; &#125; 带参数打开gdb 1gdb --args ./a.out pwd gdb 检查 我们通过gdb单步，到strcmp后一步,打开汇编 1234567891011121314151617181920212223242526272829303132333435 (gdb) n 10 printf(&quot;WRONG !\\n&quot;); (gdb) disassemble Dump of assembler code for function main: 0x0000555555555169 &lt;+0&gt;: endbr64 0x000055555555516d &lt;+4&gt;: push %rbp 0x000055555555516e &lt;+5&gt;: mov %rsp,%rbp 0x0000555555555171 &lt;+8&gt;: sub $0x10,%rsp 0x0000555555555175 &lt;+12&gt;: mov %edi,-0x4(%rbp) 0x0000555555555178 &lt;+15&gt;: mov %rsi,-0x10(%rbp) 0x000055555555517c &lt;+19&gt;: cmpl $0x2,-0x4(%rbp) 0x0000555555555180 &lt;+23&gt;: jne 0x5555555551c8 &lt;main+95&gt; 0x0000555555555182 &lt;+25&gt;: lea 0xe7b(%rip),%rdi # 0x555555556004 0x0000555555555189 &lt;+32&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x000055555555518e &lt;+37&gt;: mov -0x10(%rbp),%rax 0x0000555555555192 &lt;+41&gt;: add $0x8,%rax 0x0000555555555196 &lt;+45&gt;: mov (%rax),%rax 0x0000555555555199 &lt;+48&gt;: mov %rax,%rsi 0x000055555555519c &lt;+51&gt;: lea 0xe71(%rip),%rdi # 0x555555556014 0x00005555555551a3 &lt;+58&gt;: callq 0x555555555070 &lt;strcmp@plt&gt; 0x00005555555551a8 &lt;+63&gt;: test %eax,%eax 0x00005555555551aa &lt;+65&gt;: jne 0x5555555551ba &lt;main+81&gt; 0x00005555555551ac &lt;+67&gt;: lea 0xe65(%rip),%rdi # 0x555555556018 0x00005555555551b3 &lt;+74&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x00005555555551b8 &lt;+79&gt;: jmp 0x5555555551d4 &lt;main+107&gt;=&gt; 0x00005555555551ba &lt;+81&gt;: lea 0xe65(%rip),%rdi # 0x555555556026 0x00005555555551c1 &lt;+88&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x00005555555551c6 &lt;+93&gt;: jmp 0x5555555551d4 &lt;main+107&gt; 0x00005555555551c8 &lt;+95&gt;: lea 0xe5f(%rip),%rdi # 0x55555555602e 0x00005555555551cf &lt;+102&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x00005555555551d4 &lt;+107&gt;: nop 0x00005555555551d5 &lt;+108&gt;: nop 0x00005555555551d6 &lt;+109&gt;: leaveq 0x00005555555551d7 &lt;+110&gt;: retq End of assembler dump. 可以看到 strcmp 后，有一句：test %eax,%eax ，意思是判断eax 是不是0， 并将状态保存到某个寄存器中，后面肯定也会根据状态判断strcmp返回是不是0 12345(gdb) x/8b 0x00005555555551aa0x5555555551aa &lt;main+65&gt;: 117 14 72 -115 61 101 14 0(gdb) x/8x 0x00005555555551aa0x5555555551aa &lt;main+65&gt;: 0x75 0x0e 0x48 0x8d 0x3d 0x65 0x0e 0x00(gdb) test 后就是跳转命令， jne, 查看intel 架构的手册，他就是根据 0x75 来判断是不是相等的，类似ARM中的 cpsv标志位. 120x75 不等0x74 相等 所以目标就是将0x75更换为0x74,通过上下文的数字确定位置。0x75 0x0e 0x48 0x8d 0x3d 修改16进制文件 vim 中，执行：%！xxd 可以将二进制转换为十六进制修改。 ：%！xxd -r 返回二进制， 保存 1234567891011121314151617181900001120: f30f 1efa 803d e52e 0000 0075 2b55 4883 .....=.....u+UH.00001130: 3dc2 2e00 0000 4889 e574 0c48 8b3d c62e =.....H..t.H.=..00001140: 0000 e809 ffff ffe8 64ff ffff c605 bd2e ........d.......00001150: 0000 015d c30f 1f00 c30f 1f80 0000 0000 ...]............00001160: f30f 1efa e977 ffff fff3 0f1e fa55 4889 .....w.......UH.00001170: e548 83ec 1089 7dfc 4889 75f0 837d fc02 .H....&#125;.H.u..&#125;..00001180: 7546 488d 3d7b 0e00 00e8 d2fe ffff 488b uFH.=&#123;........H.00001190: 45f0 4883 c008 488b 0048 89c6 488d 3d71 E.H...H..H..H.=q000011a0: 0e00 00e8 c8fe ffff 85c0 750e 488d 3d65 ..........u.H.=e000011b0: 0e00 00e8 a8fe ffff eb1a 488d 3d65 0e00 ..........H.=e..000011c0: 00e8 9afe ffff eb0c 488d 3d5f 0e00 00e8 ........H.=_....000011d0: 8cfe ffff 9090 c9c3 0f1f 8400 0000 0000 ................000011e0: f30f 1efa 4157 4c8d 3dc3 2b00 0041 5649 ....AWL.=.+..AVI000011f0: 89d6 4155 4989 f541 5441 89fc 5548 8d2d ..AUI..ATA..UH.-00001200: b42b 0000 534c 29fd 4883 ec08 e8ef fdff .+..SL).H.......00001210: ff48 c1fd 0374 1f31 db0f 1f80 0000 0000 .H...t.1........00001220: 4c89 f24c 89ee 4489 e741 ff14 df48 83c3 L..L..D..A...H..00001230: 0148 39dd 75ea 4883 c408 5b5d 415c 415d .H9.u.H...[]A\\A]00001240: 415e 415f c366 662e 0f1f 8400 0000 0000 A^A_.ff......... 效果 123456789.&#x2F;a.out fawecheking passwd!WRONG !vim a.out .&#x2F;a.out fawecheking passwd!ok you got me binaryninga 有一些GUI工具可以很简单的完成这些步骤，类似的有 binaryninga, 其他的可以在liveoverflow的节目查询蓝色的表示true分支，红色的flase分支，我们只要屏蔽掉检查的分支，直接过去就可以了","categories":[{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"}],"tags":[]},{"title":"UEFI hello world 模块","slug":"uefi/hello_world","date":"2021-02-07T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/07/uefi/hello_world/","link":"","permalink":"http://example.com/2021/02/07/uefi/hello_world/","excerpt":"","text":"目的 EFI shell 中运行 helloworld.efi，执行我们写的驱动 c文件 放在某个pkg下: OvmfPkg\\HelloWorld\\HelloWorld.c 123456789101112131415161718192021#include &lt;uefi.h&gt; #include &lt;Library/UefiLib.h&gt; #include &lt;Library/BaseLib.h&gt;#include &lt;Library/DebugLib.h&gt;#include &lt;Library/BaseMemoryLib.h&gt;#include &lt;Library/UefiBootServicesTableLib.h&gt;//ShellCEntryLib call user interface ShellAppMainEFI_STATUSEFIAPIHelloWorldEntry( IN EFI_HANDLE ImageHandle, IN EFI_SYSTEM_TABLE *SystemTable)&#123; EFI_STATUS Status = EFI_SUCCESS; Print (L&quot;[Console] HelloWorldEntry Start..\\n&quot;); Print (L&quot;[Console] HelloWorldEntry End ... \\n&quot;); return Status;&#125; 同级目录下添加构建文件 ：OvmfPkg\\HelloWorld\\HelloWorld.inf 1234567891011121314151617181920212223242526[Defines] [Defines] INF_VERSION = 0x00010007 BASE_NAME = HelloWorld FILE_GUID = 69A6DE6D-FA9F-485E-9A4E-EA70FDCFD82F MODULE_TYPE = UEFI_APPLICATION VERSION_STRING = 1.0 ENTRY_POINT = HelloWorldEntry [Sources] HelloWorld.c [Packages] MdePkg/MdePkg.dec ShellPkg/ShellPkg.dec MdeModulePkg/MdeModulePkg.dec [LibraryClasses] UefiShellCEntryLib BaseLib BaseMemoryLib DebugLib PrintLib UefiBootServicesTableLib MemoryAllocationLib UefiLib 在项目对应的DSC中添加如下内容：OvmfPkg\\OvmfPkgX64.dsc 1234...[Components] OvmfPkg/HelloWorld/HelloWorld.inf... 此时编译整个项目就可以编译到我们的模块运行edksetup.bat编译整个OvmfPkg Packagebuild -a X64 -p OvmfPkg\\OvmfPkgX64.dsc -D DEBUG_ON_SERIAL_PORT","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]},{"title":"UEFI Protocol 机制","slug":"uefi/04_UFEI_protocol","date":"2021-02-07T00:00:00.000Z","updated":"2021-06-04T09:21:26.549Z","comments":true,"path":"2021/02/07/uefi/04_UFEI_protocol/","link":"","permalink":"http://example.com/2021/02/07/uefi/04_UFEI_protocol/","excerpt":"","text":"Protocol GUID是一条链表，每个节点是就是一个GUID，一个GUID必须挂一条 Protocol.","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]},{"title":"HEXO Hacker 主题中文说明","slug":"hexo/02_hexo_中文手册","date":"2021-02-07T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/02/07/hexo/02_hexo_中文手册/","link":"","permalink":"http://example.com/2021/02/07/hexo/02_hexo_%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/","excerpt":"","text":"Hacker | English Docs Hacker 是一款专注于写作的简洁博客主题。在如此讲究复杂排版的趋势下，选择回归本源，专注于写作这件事。 一开始是 moyo 为 Wordpress 所创作的一个主题，由 CodeDaraW 移植到 Hexo 。 Demo参考我的博客：DaraW。可以使用 TravisCI 实现自动化部署，配置参考 CodeDaraW/Blog。 安装获得主题文件， git clone 或者 download zip 均可； 在 themes 文件夹中创建文件夹 Hacker ，将主题文件都复制粘贴至 Hacker 文件夹； 然后在hexo全局配置文件 _config.yml 中应用主题： 1theme: Hacker 这样就安装好了，开始享受吧~ 注意：版本更新后建议在hexo生成前执行一次 hexo clean ，清除以前的缓存，避免带来的一些莫名其妙的问题。 配置启用评论和谷歌分析参考 _config.example.yml 配置案例，创建主题配置文件 _config.yml 并编辑： 1234567891011121314151617181920212223242526272829# gitmentgitment: falsegitment_owner:gitment_repo:gitment_client_id:gitment_client_secret:# gitalkgitalk: falsegitalk_owner:gitalk_admin: []gitalk_repo:gitalk_client_id:gitalk_client_secret:# valine commentvaline: falseleancloud_id:leancloud_key:# disqus commentdisqus: falsedisqus_shortname:# google analyticsgoogleTrackId:# baidu analyticsbaiduTrackId: gitment: boolean，是否开启 Gitment 评论gitment_owner: string，你的 GitHub IDgitment_repo: string，存储评论的 Repogitment_client_id: string，你的 Client IDgitment_client_secret: string，你的 Client Secret gitalk: boolean，是否开启 Gitalk 评论gitalk_owner: string，你的 GitHub IDgitalk_admin: array，所有管理员 GitHub IDgitalk_repo: string，存储评论的 Repogitalk_client_id: string，你的 Client IDgitalk_client_secret: string，你的 Client Secret valine: boolean，是否开启 Valine 评论leancloud_id: string，你的 LeanCloud IDleancloud_key: string，你的 LeanCloud Key disqus: boolean，是否开启 Disqus 评论；disqus_shortname: string，你的 Disqus Site Shortname。 googleTrackId: string，为谷歌分析的个人ID，留空则为不使用谷歌分析。baiduTrackId: string, 为百度统计的个人ID,留空则为不是用谷歌分析。 启用分类和标签页面分类功能：执行 hexo new page categories ，然后修改生成的 source/categories/index.md ： 1234title: categoriesdate: 2017-01-30 19:16:17layout: &quot;categories&quot;--- 如果你需要关闭该页的评论，可以添加一行 comments: false；title 对应的则是该页的标题。 标签功能：同理，执行 hexo new page tags ，然后修改生成的 source/tags/index.md ： 1234title: tagsdate: 2017-01-30 19:16:17layout: &quot;tags&quot;--- 配置同分类功能。 在菜单中添加链接：编辑主题的 _config.yml ，在 menu 中添加 Categories: /categories 和 Tags: /tags，如下： 12345menu: Home: / Archives: /archives Categories: /categories Tags: /tags 协议GNU GPL(General Public License) v2.0","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"git 常用命令列表","slug":"git/05_git_normal_cmd","date":"2021-02-07T00:00:00.000Z","updated":"2021-06-04T09:21:26.545Z","comments":true,"path":"2021/02/07/git/05_git_normal_cmd/","link":"","permalink":"http://example.com/2021/02/07/git/05_git_normal_cmd/","excerpt":"","text":"git config 配置 Git 的相关参数。 Git 一共有3个配置文件： 仓库级的配置文件：在仓库的 .git/.gitconfig，该配置文件只对所在的仓库有效。 全局配置文件：Mac 系统在 ~/.gitconfig，Windows 系统在 C:\\Users&lt;用户名&gt;.gitconfig。 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 /usr/local/git）的 etc 文件夹中的 gitconfig。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# 查看配置信息# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -l# 查看当前生效的配置信息$ git config -l# 编辑配置文件# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -e# 添加配置项# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;# 获取配置项$ git config &lt;--local | --global | --system&gt; --get &lt;name&gt;# 删除配置项$ git config &lt;--local | --global | --system&gt; --unset &lt;name&gt;# 配置提交记录中的用户信息$ git config --global user.name &lt;用户名&gt;$ git config --global user.email &lt;邮箱地址&gt;# 更改Git缓存区的大小# 如果提交的内容较大，默认缓存较小，提交会失败# 缓存大小单位：B，例如：524288000（500MB）$ git config --global http.postBuffer &lt;缓存大小&gt;# 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态$ git config --global color.ui true# 配置可以缓存密码，默认缓存时间15分钟$ git config --global credential.helper cache# git 输入一次密码后永久记住$ git config --global credential.helper store# 配置密码的缓存时间# 缓存时间单位：秒$ git config --global credential.helper &#x27;cache --timeout=&lt;缓存时间&gt;&#x27;# 配置长期存储密码$ git config --global credential.helper store# 配置忽略文件权限的改变$ git config --global core.filemode false# windows 上忽略回车符差异$ git config --global core.whitespace cr-at-eol git clone 123456# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下$ git clone &lt;远程仓库的网址&gt;# 指定本地仓库的目录$ git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;# -b 指定要克隆的分支，默认是master分支$ git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt; git remote 12345678910111213141516171819# 列出已经存在的远程仓库$ git remote# 列出远程仓库的详细信息，在别名后面列出URL地址$ git remote -v$ git remote --verbose# 添加远程仓库$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;# 修改远程仓库的别名$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;# 删除指定名称的远程仓库$ git remote remove &lt;远程仓库的别名&gt;# 修改远程仓库的 URL 地址$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt; git branch 1234567891011121314151617181920# 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出$ git branch# 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出$ git branch -v# 创建新分支，新的分支基于上一次提交建立$ git branch &lt;分支名&gt;# 修改分支名称# 如果不指定原分支名称则为当前所在分支$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 强制修改分支名称$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 删除指定的本地分支$ git branch -d &lt;分支名称&gt;# 强制删除指定的本地分支$ git branch -D &lt;分支名称&gt; git checkout 123456789101112# 切换到已存在的指定分支$ git checkout &lt;分支名称&gt;# 创建并切换到指定的分支，保留所有的提交记录# 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并$ git checkout -b &lt;分支名称&gt;# 创建并切换到指定的分支，删除所有的提交记录$ git checkout --orphan &lt;分支名称&gt;# 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响$ git checkout &lt;文件路径&gt; git cherry-pick 12# 把已经提交的记录合并到当前分支$ git cherry-pick &lt;commit ID&gt; git fetch 123456# 将远程仓库所有分支的最新版本全部取回到本地$ git fetch &lt;远程仓库的别名&gt;# 将远程仓库指定分支的最新版本取回到本地$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; git diff 12345678910111213141516171819# 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改$ git diff# 比较暂存区中的文件和上次提交时的差异$ git diff --cached$ git diff --staged# 比较当前文件和上次提交时的差异$ git diff HEAD# 查看从指定的版本之后改动的内容$ git diff &lt;commit ID&gt;# 比较两个分支之间的差异$ git diff &lt;分支名称&gt; &lt;分支名称&gt;# 查看两个分支分开后各自的改动内容$ git diff &lt;分支名称&gt;...&lt;分支名称&gt; git pull 从远程仓库获取最新版本并合并到本地。首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。 12# 从远程仓库获取最新版本。$ git pull git push 123456# 把本地仓库的分支推送到远程仓库的指定分支$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;# 删除指定的远程仓库的分支$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt; git reset 12345678910111213141516# 重置暂存区，但文件不受影响# 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件# 没有指定 commit ID 则默认为当前 HEAD$ git reset [&lt;文件路径&gt;]$ git reset --mixed [&lt;文件路径&gt;]# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改$ git reset &lt;commit ID&gt;$ git reset --mixed &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改# 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;$ git reset --soft &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了$ git reset --hard &lt;commit ID&gt; git tag 123456789101112131415161718192021222324# 打印所有的标签$ git tag# 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]# 添加带有描述信息的附注标签，可以指定之前的提交记录$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]# 切换到指定的标签$ git checkout &lt;标签名称&gt;# 查看标签的信息$ git show &lt;标签名称&gt;# 删除指定的标签$ git tag -d &lt;标签名称&gt;# 将指定的标签提交到远程仓库$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;# 将本地所有的标签全部提交到远程仓库$ git push &lt;远程仓库的别名&gt; –tags git mv 12# 重命名指定的文件或者文件夹$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt; git rm 12345678# 移除跟踪指定的文件，并从本地仓库的文件夹中删除$ git rm &lt;文件路径&gt;# 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除$ git rm -r &lt;文件夹路径&gt;# 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件$ git rm --cached git 删除远程不存在的分支 ( 协同开发时，其他人删了远程分支 ) 123456# 使用 pull 命令，添加 -p 参数$ git pull -p# 等同于下面的命令$ git fetch -p$ git fetch --prune origin","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[]}],"categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"},{"name":"Pcie","slug":"Pcie","permalink":"http://example.com/categories/Pcie/"},{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"Project_Yolo","slug":"Project-Yolo","permalink":"http://example.com/categories/Project-Yolo/"},{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"},{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"},{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"},{"name":"c","slug":"c","permalink":"http://example.com/categories/c/"},{"name":"Pi-KVM","slug":"Pi-KVM","permalink":"http://example.com/categories/Pi-KVM/"},{"name":"vscode","slug":"vscode","permalink":"http://example.com/categories/vscode/"},{"name":"PCI","slug":"PCI","permalink":"http://example.com/categories/PCI/"},{"name":"vim","slug":"vim","permalink":"http://example.com/categories/vim/"},{"name":"interview","slug":"interview","permalink":"http://example.com/categories/interview/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/categories/markdown/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}
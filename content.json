{"meta":{"title":"XINHUALU'S BLOG","subtitle":"","description":"","author":"XinHua Lu","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-02-07T21:03:27.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"books","date":"2021-02-07T21:03:20.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-02-07T21:01:18.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2021-02-07T21:03:27.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"repository","date":"2021-02-07T21:03:12.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-07T21:00:10.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"BiosInterFace update 的思路","slug":"bios/06_Biso_interface_update","date":"2021-02-08T17:21:27.077Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/08/bios/06_Biso_interface_update/","link":"","permalink":"http://example.com/2021/02/08/bios/06_Biso_interface_update/","excerpt":"","text":"概念 PMFW专门控制CLK/power的一个bin , SMUBIOS的菜单控制，设置值，分发值到具体的模块SMU和PMFW通过msg机制更新biosinterfaceTable的结构体来通信。 MSG机制一端，向某个寄存器写入消息ID，消息参数，poll 等待response，另一端是硬件中断，拿到硬件中断后，处理写入response消息。","categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"}],"tags":[]},{"title":"c binary 相关工具","slug":"tool/c_binary","date":"2021-02-08T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/08/tool/c_binary/","link":"","permalink":"http://example.com/2021/02/08/tool/c_binary/","excerpt":"","text":"strings 列出bin文件中的字符串 1234567891011121314151617181920212223242526strings a.out /lib64/ld-linux-x86-64.so.2libc.so.6puts__cxa_finalizestrcmp__libc_start_mainGLIBC_2.2.5_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableu+UH[]A\\A]A^A_cheking passwd!ok you got meWRONG !Usage: &lt;key&gt;:*3$&quot;GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0/usr/lib/gcc/x86_64-linux-gnu/9/include/usr/include/x86_64-linux-gnu/bits/usr/include/x86_64-linux-gnu/bits/types/usr/includemain.cstddef.h 2进制转16进制 vim 中 ：%！xxd 退回二进制： ：%！xxd -r bash shell: xxd a.out &gt; 16.txt strings 1","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"cscope 安装 配置 使用","slug":"tool/cscope","date":"2021-02-08T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/08/tool/cscope/","link":"","permalink":"http://example.com/2021/02/08/tool/cscope/","excerpt":"","text":"安装 1sudo apt install cscope 配置 ~/.vimrc 中添加如下配置 12345678910111213141516171819202122232425262728293031323334&quot; tags 设置set tags=tags; set autochdirif has(&quot;cscope&quot;) set csprg=/usr/bin/cscope &quot;指定用来执行 cscope 的命令 set csto=1 &quot;先搜索tags标签文件,再搜索cscope数据库 set cst &quot;使用|:cstag|(:cs find g),而不是缺省的:tag set nocsverb &quot;不显示添加数据库是否成功 &quot; add any database in current directory if filereadable(&quot;cscope.out&quot;) cs add cscope.out &quot;添加cscope数据库 endif &quot;显示添加成功与否 set csverbendif:set cscopequickfix=s-,c-,d-,i-,t-,e-nmap &lt;C-\\&gt;s :cs find s &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;g :cs find g &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;# 查找哪里调用了当前的函数nmap &lt;C-\\&gt;c :cs find c &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;t :cs find t &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;# 查找所有符号nmap &lt;C-\\&gt;e :cs find e &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;f :cs find f &lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;C-\\&gt;i :cs find i ^&lt;C-R&gt;=expand(&quot;&lt;cfile&gt;&quot;)&lt;CR&gt;$&lt;CR&gt;nmap &lt;C-\\&gt;d :cs find d &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt; 建立索引 建立脚本，执行生成tag, cscope符号表 12345#!/bin/shfind `pwd` -name &quot;*.[ch]&quot; -o -name &quot;*.cpp&quot; &gt; cscope.files cscope -bRkq -i cscope.files ctags -R cscope 使用 快捷键，上面配置中已经配置了。 123456789101112131415161718192021222324252627282930cscope --helpUsage: cscope [-bcCdehklLqRTuUvV] [-f file] [-F file] [-i file] [-I dir] [-s dir] [-p number] [-P path] [-[0-8] pattern] [source files]-b Build the cross-reference only.-C Ignore letter case when searching.-c Use only ASCII characters in the cross-ref file (don&#x27;t compress).-d Do not update the cross-reference.-e Suppress the &lt;Ctrl&gt;-e command prompt between files.-F symfile Read symbol reference lines from symfile.-f reffile Use reffile as cross-ref file name instead of cscope.out.-h This help screen.-I incdir Look in incdir for any #include files.-i namefile Browse through files listed in namefile, instead of cscope.files-k Kernel Mode - don&#x27;t use /usr/include for #include files.-L Do a single search with line-oriented output.-l Line-oriented interface.-num pattern Go to input field num (counting from 0) and find pattern.-P path Prepend path to relative file names in pre-built cross-ref file.-p n Display the last n file path components.-q Build an inverted index for quick symbol searching.-R Recurse directories for files.-s dir Look in dir for additional source files.-T Use only the first eight characters to match against C symbols.-U Check file time stamps.-u Unconditionally build the cross-reference file.-v Be more verbose in line mode.-V Print the version number.Please see the manpage for more information.","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"vim plug","slug":"tool/vim","date":"2021-02-08T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/08/tool/vim/","link":"","permalink":"http://example.com/2021/02/08/tool/vim/","excerpt":"","text":"安装vim-plug 12vim : curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vimneovim : curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 配置 vim-plug 修改 ~/.vimrc 123call plug#begin(&#x27;~/.vim/plugged&#x27;)Plug &#x27;itchyny/lightline.vim&#x27;call plug#end() 插件操作 12345678# 导入插件:PlugInstall# 更新插件:PlugUpdate# 清理插件:PlugClean 常用插件 12# 目录树Plug &#x27;scrooloose/nerdtree&#x27;, &#123; &#x27;on&#x27;: &#x27;NERDTreeToggle&#x27; &#125; 配置实现的插件 换行 ALT + 上下 实现vscode类似的换行效果 12noremap &lt;A-up&gt; :call feedkeys( line(&#x27;.&#x27;)==1 ? &#x27;&#x27; : &#x27;ddkP&#x27; )&lt;CR&gt;noremap &lt;A-down&gt; ddp","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"Youtube-dl youtube视频批量下载","slug":"tool/youtuber_dll","date":"2021-02-08T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/08/tool/youtuber_dll/","link":"","permalink":"http://example.com/2021/02/08/tool/youtuber_dll/","excerpt":"","text":"what is Youtube-dl ？ Youtube-dl 是一个自由开源的命令行视频下载工具，可以用来从 Youtube 等类似的网站上下载视频，目前它支持的网站除了 Youtube 还有 Facebook、Dailymotion、Google Video、Yahoo 等等。它构架于 pygtk 之上，需要 Python 的支持来运行。它支持很多操作系统，包括 Windows、Mac 以及 Unix。Youtube-dl 还有断点续传、下载整个频道或者整个播放清单中的视频、添加自定义的标题、代理等等其他功能。 12345sudo apt-get update -ysudo apt-get upgrade -ysudo apt-get install curl -ycurl -L https://yt-dl.org/latest/youtube-dl -o /usr/bin/youtube-dlchmod 755 /usr/bin/youtube-dl 12345678910111213141516171819202122232425262728# 显示所有视频格式youtube-dl -F https://www.youtube.com/watch?v=j_JgXJ-apXs [info] Available formats for j_JgXJ-apXs:format code extension resolution note139 m4a audio only DASH audio 56k , m4a_dash container, mp4a.40.5@ 48k (22050Hz), 756.44KiB249 webm audio only DASH audio 56k , opus @ 50k, 724.28KiB250 webm audio only DASH audio 69k , opus @ 70k, 902.75KiB171 webm audio only DASH audio 110k , vorbis@128k, 1.32MiB251 webm audio only DASH audio 122k , opus @160k, 1.57MiB140 m4a audio only DASH audio 146k , m4a_dash container, mp4a.40.2@128k (44100Hz), 1.97MiB278 webm 256x144 144p 97k , webm container, vp9, 24fps, video only, 1.33MiB160 mp4 256x144 DASH video 102k , avc1.4d400c, 24fps, video only, 731.53KiB133 mp4 426x240 DASH video 174k , avc1.4d4015, 24fps, video only, 1.36MiB242 webm 426x240 240p 221k , vp9, 24fps, video only, 1.74MiB134 mp4 640x360 DASH video 369k , avc1.4d401e, 24fps, video only, 2.90MiB243 webm 640x360 360p 500k , vp9, 24fps, video only, 4.15MiB135 mp4 854x480 DASH video 746k , avc1.4d401e, 24fps, video only, 6.11MiB244 webm 854x480 480p 844k , vp9, 24fps, video only, 7.27MiB247 webm 1280x720 720p 1155k , vp9, 24fps, video only, 9.21MiB136 mp4 1280x720 DASH video 1300k , avc1.4d401f, 24fps, video only, 9.66MiB248 webm 1920x1080 1080p 1732k , vp9, 24fps, video only, 14.24MiB137 mp4 1920x1080 DASH video 2217k , avc1.640028, 24fps, video only, 15.28MiB17 3gp 176x144 small , mp4v.20.3, mp4a.40.2@ 24k36 3gp 320x180 small , mp4v.20.3, mp4a.40.243 webm 640x360 medium , vp8.0, vorbis@128k18 mp4 640x360 medium , avc1.42001E, mp4a.40.2@ 96k22 mp4 1280x720 hd720 , avc1.64001F, mp4a.40.2@192k (best) 然后使用 -f 指定你想要下载的格式，如下所示： 12345678youtube-dl -f 18 https://www.youtube.com/watch?v=j_JgXJ-apXs[youtube] j_JgXJ-apXs: Downloading webpage[youtube] j_JgXJ-apXs: Downloading video info webpage[youtube] j_JgXJ-apXs: Extracting video information[youtube] j_JgXJ-apXs: Downloading MPD manifest[download] Destination: B.A. PASS 2 Trailer no 2 _ Filmybox-j_JgXJ-apXs.mp4[download] 100% of 6.90MiB in 00:47 下载音频1youtube-dl https://www.youtube.com/watch?v=j_JgXJ-apXs -x --audio-format mp3 下载视频1youtube-dl -citw https://www.youtube.com/channel/UCatfiM69M9ZnNhOzy0jZ41A 指定代理1youtube-dl --proxy http://proxy-ip:port https://www.youtube.com/watch?v=j_JgXJ-apXs youtube-list若想一条命令下载多个 Youtube 视频，那么首先把所有要下载的 Youtube 视频 URL 存在一个文件中（假设这个文件叫 youtube-list.txt），然后运行下面命令： 1youtube-dl -a youtube-list.txt","categories":[{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"}],"tags":[]},{"title":"git 常用命令列表","slug":"git/05_git_normal_cmd","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/07/git/05_git_normal_cmd/","link":"","permalink":"http://example.com/2021/02/07/git/05_git_normal_cmd/","excerpt":"","text":"git config 配置 Git 的相关参数。 Git 一共有3个配置文件： 仓库级的配置文件：在仓库的 .git/.gitconfig，该配置文件只对所在的仓库有效。 全局配置文件：Mac 系统在 ~/.gitconfig，Windows 系统在 C:\\Users&lt;用户名&gt;.gitconfig。 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 /usr/local/git）的 etc 文件夹中的 gitconfig。 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 查看配置信息# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -l# 查看当前生效的配置信息$ git config -l# 编辑配置文件# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; -e# 添加配置项# --local：仓库级，--global：全局级，--system：系统级$ git config &lt;--local | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;# 获取配置项$ git config &lt;--local | --global | --system&gt; --get &lt;name&gt;# 删除配置项$ git config &lt;--local | --global | --system&gt; --unset &lt;name&gt;# 配置提交记录中的用户信息$ git config --global user.name &lt;用户名&gt;$ git config --global user.email &lt;邮箱地址&gt;# 更改Git缓存区的大小# 如果提交的内容较大，默认缓存较小，提交会失败# 缓存大小单位：B，例如：524288000（500MB）$ git config --global http.postBuffer &lt;缓存大小&gt;# 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态$ git config --global color.ui true# 配置可以缓存密码，默认缓存时间15分钟$ git config --global credential.helper cache# 配置密码的缓存时间# 缓存时间单位：秒$ git config --global credential.helper &#x27;cache --timeout=&lt;缓存时间&gt;&#x27;# 配置长期存储密码$ git config --global credential.helper store# 配置忽略文件权限的改变$ git config --global core.filemode false git clone 123456# 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下$ git clone &lt;远程仓库的网址&gt;# 指定本地仓库的目录$ git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;# -b 指定要克隆的分支，默认是master分支$ git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt; git remote 12345678910111213141516171819# 列出已经存在的远程仓库$ git remote# 列出远程仓库的详细信息，在别名后面列出URL地址$ git remote -v$ git remote --verbose# 添加远程仓库$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;# 修改远程仓库的别名$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;# 删除指定名称的远程仓库$ git remote remove &lt;远程仓库的别名&gt;# 修改远程仓库的 URL 地址$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt; git branch 1234567891011121314151617181920# 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出$ git branch# 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出$ git branch -v# 创建新分支，新的分支基于上一次提交建立$ git branch &lt;分支名&gt;# 修改分支名称# 如果不指定原分支名称则为当前所在分支$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 强制修改分支名称$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;# 删除指定的本地分支$ git branch -d &lt;分支名称&gt;# 强制删除指定的本地分支$ git branch -D &lt;分支名称&gt; git checkout 123456789101112# 切换到已存在的指定分支$ git checkout &lt;分支名称&gt;# 创建并切换到指定的分支，保留所有的提交记录# 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并$ git checkout -b &lt;分支名称&gt;# 创建并切换到指定的分支，删除所有的提交记录$ git checkout --orphan &lt;分支名称&gt;# 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响$ git checkout &lt;文件路径&gt; git cherry-pick 12# 把已经提交的记录合并到当前分支$ git cherry-pick &lt;commit ID&gt; git fetch 123456# 将远程仓库所有分支的最新版本全部取回到本地$ git fetch &lt;远程仓库的别名&gt;# 将远程仓库指定分支的最新版本取回到本地$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; git diff 12345678910111213141516171819# 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改$ git diff# 比较暂存区中的文件和上次提交时的差异$ git diff --cached$ git diff --staged# 比较当前文件和上次提交时的差异$ git diff HEAD# 查看从指定的版本之后改动的内容$ git diff &lt;commit ID&gt;# 比较两个分支之间的差异$ git diff &lt;分支名称&gt; &lt;分支名称&gt;# 查看两个分支分开后各自的改动内容$ git diff &lt;分支名称&gt;...&lt;分支名称&gt; git pull 从远程仓库获取最新版本并合并到本地。首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。 12# 从远程仓库获取最新版本。$ git pull git push 123456# 把本地仓库的分支推送到远程仓库的指定分支$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;# 删除指定的远程仓库的分支$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt; git reset 12345678910111213141516# 重置暂存区，但文件不受影响# 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件# 没有指定 commit ID 则默认为当前 HEAD$ git reset [&lt;文件路径&gt;]$ git reset --mixed [&lt;文件路径&gt;]# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改$ git reset &lt;commit ID&gt;$ git reset --mixed &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改# 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;$ git reset --soft &lt;commit ID&gt;# 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了$ git reset --hard &lt;commit ID&gt; git tag 123456789101112131415161718192021222324# 打印所有的标签$ git tag# 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]# 添加带有描述信息的附注标签，可以指定之前的提交记录$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]# 切换到指定的标签$ git checkout &lt;标签名称&gt;# 查看标签的信息$ git show &lt;标签名称&gt;# 删除指定的标签$ git tag -d &lt;标签名称&gt;# 将指定的标签提交到远程仓库$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;# 将本地所有的标签全部提交到远程仓库$ git push &lt;远程仓库的别名&gt; –tags git mv 12# 重命名指定的文件或者文件夹$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt; git rm 12345678# 移除跟踪指定的文件，并从本地仓库的文件夹中删除$ git rm &lt;文件路径&gt;# 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除$ git rm -r &lt;文件夹路径&gt;# 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件$ git rm --cached git 删除远程不存在的分支 ( 协同开发时，其他人删了远程分支 ) 123456# 使用 pull 命令，添加 -p 参数$ git pull -p# 等同于下面的命令$ git fetch -p$ git fetch --prune origin","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[]},{"title":"HEXO Hacker 主题中文说明","slug":"hexo/02_hexo_中文手册","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/07/hexo/02_hexo_中文手册/","link":"","permalink":"http://example.com/2021/02/07/hexo/02_hexo_%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/","excerpt":"","text":"Hacker | English Docs Hacker 是一款专注于写作的简洁博客主题。在如此讲究复杂排版的趋势下，选择回归本源，专注于写作这件事。 一开始是 moyo 为 Wordpress 所创作的一个主题，由 CodeDaraW 移植到 Hexo 。 Demo参考我的博客：DaraW。可以使用 TravisCI 实现自动化部署，配置参考 CodeDaraW/Blog。 安装获得主题文件， git clone 或者 download zip 均可； 在 themes 文件夹中创建文件夹 Hacker ，将主题文件都复制粘贴至 Hacker 文件夹； 然后在hexo全局配置文件 _config.yml 中应用主题： 1theme: Hacker 这样就安装好了，开始享受吧~ 注意：版本更新后建议在hexo生成前执行一次 hexo clean ，清除以前的缓存，避免带来的一些莫名其妙的问题。 配置启用评论和谷歌分析参考 _config.example.yml 配置案例，创建主题配置文件 _config.yml 并编辑： 1234567891011121314151617181920212223242526272829# gitmentgitment: falsegitment_owner:gitment_repo:gitment_client_id:gitment_client_secret:# gitalkgitalk: falsegitalk_owner:gitalk_admin: []gitalk_repo:gitalk_client_id:gitalk_client_secret:# valine commentvaline: falseleancloud_id:leancloud_key:# disqus commentdisqus: falsedisqus_shortname:# google analyticsgoogleTrackId:# baidu analyticsbaiduTrackId: gitment: boolean，是否开启 Gitment 评论gitment_owner: string，你的 GitHub IDgitment_repo: string，存储评论的 Repogitment_client_id: string，你的 Client IDgitment_client_secret: string，你的 Client Secret gitalk: boolean，是否开启 Gitalk 评论gitalk_owner: string，你的 GitHub IDgitalk_admin: array，所有管理员 GitHub IDgitalk_repo: string，存储评论的 Repogitalk_client_id: string，你的 Client IDgitalk_client_secret: string，你的 Client Secret valine: boolean，是否开启 Valine 评论leancloud_id: string，你的 LeanCloud IDleancloud_key: string，你的 LeanCloud Key disqus: boolean，是否开启 Disqus 评论；disqus_shortname: string，你的 Disqus Site Shortname。 googleTrackId: string，为谷歌分析的个人ID，留空则为不使用谷歌分析。baiduTrackId: string, 为百度统计的个人ID,留空则为不是用谷歌分析。 启用分类和标签页面分类功能：执行 hexo new page categories ，然后修改生成的 source/categories/index.md ： 1234title: categoriesdate: 2017-01-30 19:16:17layout: &quot;categories&quot;--- 如果你需要关闭该页的评论，可以添加一行 comments: false；title 对应的则是该页的标题。 标签功能：同理，执行 hexo new page tags ，然后修改生成的 source/tags/index.md ： 1234title: tagsdate: 2017-01-30 19:16:17layout: &quot;tags&quot;--- 配置同分类功能。 在菜单中添加链接：编辑主题的 _config.yml ，在 menu 中添加 Categories: /categories 和 Tags: /tags，如下： 12345menu: Home: / Archives: /archives Categories: /categories Tags: /tags 协议GNU GPL(General Public License) v2.0","categories":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"hack_binary_example","slug":"liveoverflow/hack_binary_example","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/07/liveoverflow/hack_binary_example/","link":"","permalink":"http://example.com/2021/02/07/liveoverflow/hack_binary_example/","excerpt":"","text":"目的 通过修改bin文件，跳过字符串匹配，密码检查。 代码 123456789101112131415#include &lt;stdio.h&gt; #include &lt;string.h&gt; int main(int argc,char* argv[])&#123; if (argc == 2)&#123; printf(&quot;cheking passwd!\\n&quot;); if (strcmp(&quot;pwd&quot;,argv[1]) == 0)&#123; printf(&quot;ok you got me\\n&quot;); &#125;else printf(&quot;WRONG !\\n&quot;); &#125;else printf(&quot;Usage: &lt;key&gt;\\n&quot;); return ; &#125; 带参数打开gdb 1gdb --args ./a.out pwd gdb 检查 我们通过gdb单步，到strcmp后一步,打开汇编 1234567891011121314151617181920212223242526272829303132333435 (gdb) n 10 printf(&quot;WRONG !\\n&quot;); (gdb) disassemble Dump of assembler code for function main: 0x0000555555555169 &lt;+0&gt;: endbr64 0x000055555555516d &lt;+4&gt;: push %rbp 0x000055555555516e &lt;+5&gt;: mov %rsp,%rbp 0x0000555555555171 &lt;+8&gt;: sub $0x10,%rsp 0x0000555555555175 &lt;+12&gt;: mov %edi,-0x4(%rbp) 0x0000555555555178 &lt;+15&gt;: mov %rsi,-0x10(%rbp) 0x000055555555517c &lt;+19&gt;: cmpl $0x2,-0x4(%rbp) 0x0000555555555180 &lt;+23&gt;: jne 0x5555555551c8 &lt;main+95&gt; 0x0000555555555182 &lt;+25&gt;: lea 0xe7b(%rip),%rdi # 0x555555556004 0x0000555555555189 &lt;+32&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x000055555555518e &lt;+37&gt;: mov -0x10(%rbp),%rax 0x0000555555555192 &lt;+41&gt;: add $0x8,%rax 0x0000555555555196 &lt;+45&gt;: mov (%rax),%rax 0x0000555555555199 &lt;+48&gt;: mov %rax,%rsi 0x000055555555519c &lt;+51&gt;: lea 0xe71(%rip),%rdi # 0x555555556014 0x00005555555551a3 &lt;+58&gt;: callq 0x555555555070 &lt;strcmp@plt&gt; 0x00005555555551a8 &lt;+63&gt;: test %eax,%eax 0x00005555555551aa &lt;+65&gt;: jne 0x5555555551ba &lt;main+81&gt; 0x00005555555551ac &lt;+67&gt;: lea 0xe65(%rip),%rdi # 0x555555556018 0x00005555555551b3 &lt;+74&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x00005555555551b8 &lt;+79&gt;: jmp 0x5555555551d4 &lt;main+107&gt;=&gt; 0x00005555555551ba &lt;+81&gt;: lea 0xe65(%rip),%rdi # 0x555555556026 0x00005555555551c1 &lt;+88&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x00005555555551c6 &lt;+93&gt;: jmp 0x5555555551d4 &lt;main+107&gt; 0x00005555555551c8 &lt;+95&gt;: lea 0xe5f(%rip),%rdi # 0x55555555602e 0x00005555555551cf &lt;+102&gt;: callq 0x555555555060 &lt;puts@plt&gt; 0x00005555555551d4 &lt;+107&gt;: nop 0x00005555555551d5 &lt;+108&gt;: nop 0x00005555555551d6 &lt;+109&gt;: leaveq 0x00005555555551d7 &lt;+110&gt;: retq End of assembler dump. 可以看到 strcmp 后，有一句：test %eax,%eax ，意思是判断eax 是不是0， 并将状态保存到某个寄存器中，后面肯定也会根据状态判断strcmp返回是不是0 12345(gdb) x/8b 0x00005555555551aa0x5555555551aa &lt;main+65&gt;: 117 14 72 -115 61 101 14 0(gdb) x/8x 0x00005555555551aa0x5555555551aa &lt;main+65&gt;: 0x75 0x0e 0x48 0x8d 0x3d 0x65 0x0e 0x00(gdb) test 后就是跳转命令， jne, 查看intel 架构的手册，他就是根据 0x75 来判断是不是相等的，类似ARM中的 cpsv标志位. 120x75 不等0x74 相等 所以目标就是将0x75更换为0x74,通过上下文的数字确定位置。0x75 0x0e 0x48 0x8d 0x3d 修改16进制文件 vim 中，执行：%！xxd 可以将二进制转换为十六进制修改。 ：%！xxd -r 返回二进制， 保存 1234567891011121314151617181900001120: f30f 1efa 803d e52e 0000 0075 2b55 4883 .....=.....u+UH.00001130: 3dc2 2e00 0000 4889 e574 0c48 8b3d c62e =.....H..t.H.=..00001140: 0000 e809 ffff ffe8 64ff ffff c605 bd2e ........d.......00001150: 0000 015d c30f 1f00 c30f 1f80 0000 0000 ...]............00001160: f30f 1efa e977 ffff fff3 0f1e fa55 4889 .....w.......UH.00001170: e548 83ec 1089 7dfc 4889 75f0 837d fc02 .H....&#125;.H.u..&#125;..00001180: 7546 488d 3d7b 0e00 00e8 d2fe ffff 488b uFH.=&#123;........H.00001190: 45f0 4883 c008 488b 0048 89c6 488d 3d71 E.H...H..H..H.=q000011a0: 0e00 00e8 c8fe ffff 85c0 750e 488d 3d65 ..........u.H.=e000011b0: 0e00 00e8 a8fe ffff eb1a 488d 3d65 0e00 ..........H.=e..000011c0: 00e8 9afe ffff eb0c 488d 3d5f 0e00 00e8 ........H.=_....000011d0: 8cfe ffff 9090 c9c3 0f1f 8400 0000 0000 ................000011e0: f30f 1efa 4157 4c8d 3dc3 2b00 0041 5649 ....AWL.=.+..AVI000011f0: 89d6 4155 4989 f541 5441 89fc 5548 8d2d ..AUI..ATA..UH.-00001200: b42b 0000 534c 29fd 4883 ec08 e8ef fdff .+..SL).H.......00001210: ff48 c1fd 0374 1f31 db0f 1f80 0000 0000 .H...t.1........00001220: 4c89 f24c 89ee 4489 e741 ff14 df48 83c3 L..L..D..A...H..00001230: 0148 39dd 75ea 4883 c408 5b5d 415c 415d .H9.u.H...[]A\\A]00001240: 415e 415f c366 662e 0f1f 8400 0000 0000 A^A_.ff......... 效果 123456789.&#x2F;a.out fawecheking passwd!WRONG !vim a.out .&#x2F;a.out fawecheking passwd!ok you got me binaryninga 有一些GUI工具可以很简单的完成这些步骤，类似的有 binaryninga, 其他的可以在liveoverflow的节目查询蓝色的表示true分支，红色的flase分支，我们只要屏蔽掉检查的分支，直接过去就可以了","categories":[{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"}],"tags":[]},{"title":"MarkDown Language Reference","slug":"markdown/03_language_markdown_ref","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/07/markdown/03_language_markdown_ref/","link":"","permalink":"http://example.com/2021/02/07/markdown/03_language_markdown_ref/","excerpt":"","text":"一级标题 二级标题 三级标题 四级标题 五级标题 ###### 六级标题 代码块 表格 | 单元格 | 单元格 | 红色字体 注释 ~~~ 任务列表 - [x] 任务二 已做任务 - + 空格 + [x] 换行 (后面空2格) 空行 对齐方式 斜体、粗体、删除线、下划线、背景高亮 超链接、页内链接、自动链接 注脚 自动链接 插图片 多级引用 字体、字号、颜色 流程图 分割线 HTML表单 特殊字符 目录 Markdown All in One: Create Table of Contents标题一级标题二级标题三级标题四级标题五级标题六级标题 代码块$符，加行号 1$ int a = 4 ; VS 1int a = 4 ; 表格 表头 表头 单元格 单元格 单元格 单元格 红色字体 注释123&lt;div style=&#x27;display: none&#x27;&gt;哈哈我是注释，不会在浏览器中显示。&lt;/div&gt; 任务列表 任务一 未做任务 - + 空格 + [ ] 任务二 已做任务 - + 空格 + [x] 换行 (后面空2格)nihaofaweafe 空行在编辑的时候有多少个空行(只要这一行只有回车或者space没有其他的字符就算空行)，在渲染之后，只隔着一行。 对齐方式行中心对齐 行左对齐 行右对齐 斜体、粗体、删除线、下划线、背景高亮斜体或斜体粗体加粗斜体删除线++下划线++==背景高亮== 超链接、页内链接、自动链接 方法一[]里写链接文字，()里写链接地址, ()中的””中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字，链接地址与title前有一个空格。 作者：择势量投链接：https://www.jianshu.com/p/ebe52d2d468f来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。欢迎阅读 择势勤 方法二我经常去的几个网站Google、Leanote。 注脚使用 Markdown^1可以效率的书写文档, 直接转换成 HTML[^2]。 [^2]:HyperText Markup Language 超文本标记语言 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;http://example.com/&gt; &emsp;&emsp;&lt;&#97;&#x64;&#x64;&#x72;&#101;&#x73;&#x73;&#64;&#x65;&#120;&#97;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;&gt; 插图片 _config.yml 中配置 post_asset_folder: true 在md文件同级目录建立同名文件夹，将图片放入，就可以相对的引用1![](patchbinary.png) --> 多级引用 请问 Markdwon 怎么用？ - 小白自己看教程！ - 愤青教程在哪？ - 小白 字体、字号、颜色我是黑体字我是微软雅黑我是华文彩云黑体graynull 流程图12graph LRA--&gt;B 123sequenceDiagramA-&gt;&gt;B: How are you?B-&gt;&gt;A: Great! 分割线 HTML表单 值班人员 星期一 星期二 星期三 李强 张明 王平 特殊字符 表头 表头 单元格 单元格 单元格 单元格 ｜特殊字符 | 描述 | 字符的代| | —- | —- | —- |｜ | 空格符 | &nbsp;|｜&lt; | 小于号 | &lt; |｜ &gt; | 大于号 | &gt; |｜&amp; | 和号 | &amp;|｜￥ | 人民币 | &yen;|｜© | 版权 | &copy;|｜® | 注册商标 | &reg;|｜°C | 摄氏度 | &deg;|｜± | 正负号 | &plusmn;|｜× | 乘号 | &times;|｜÷ | 除号 | &divide;|｜² | 平方（上标²）| &sup2;|｜³ | 立方（上标³）| &sup3;|","categories":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/categories/markdown/"}],"tags":[]},{"title":"UEFI Protocol 机制","slug":"uefi/04_UFEI_protocol","date":"2021-02-07T00:00:00.000Z","updated":"2021-02-08T17:21:27.077Z","comments":true,"path":"2021/02/07/uefi/04_UFEI_protocol/","link":"","permalink":"http://example.com/2021/02/07/uefi/04_UFEI_protocol/","excerpt":"","text":"Protocol GUID是一条链表，每个节点是就是一个GUID，一个GUID必须挂一条 Protocol.","categories":[{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[]}],"categories":[{"name":"bios","slug":"bios","permalink":"http://example.com/categories/bios/"},{"name":"tools","slug":"tools","permalink":"http://example.com/categories/tools/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/categories/hexo/"},{"name":"liveoverflow","slug":"liveoverflow","permalink":"http://example.com/categories/liveoverflow/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/categories/markdown/"},{"name":"uefi","slug":"uefi","permalink":"http://example.com/categories/uefi/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XINHUALU&#39;S BLOG</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-20T03:27:32.564Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XinHua Lu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BIOS protect mode 总结</title>
    <link href="http://example.com/2021/04/20/bios/00_bios_protect_mode_enable_flow/"/>
    <id>http://example.com/2021/04/20/bios/00_bios_protect_mode_enable_flow/</id>
    <published>2021-04-20T03:27:32.564Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="保护模式流程："><a href="#保护模式流程：" class="headerlink" title="保护模式流程："></a>保护模式流程：</h3><hr><pre><code>1. 准备GDT。2. 用lgdt加载gdtr。3. 打开A20。4. 置cr0的PE位。5. 跳转，进入保护模式。</code></pre><hr><h3 id="汇编流程"><a href="#汇编流程" class="headerlink" title="汇编流程"></a>汇编流程</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">; Save BIST state <span class="keyword">in</span> EAX</span><br><span class="line">mov     ebp,  eax   </span><br><span class="line">; BspApCheck</span><br><span class="line">mov     ecx, APIC_BASE_ADDRESS  ; MSR:0000_001B</span><br><span class="line">rdmsr     // 读取ecx地址中的值，赋给 edx, eax( low 16 bit ) </span><br><span class="line">/*  </span><br><span class="line">BSC: boot strap core. Read-write,Volatile. Reset: X. </span><br><span class="line">0=The core is not the boot core of the BSP. </span><br><span class="line">1=The core is the boot core of the BSP.</span><br><span class="line">*/ </span><br><span class="line">// 找到最先启动的核</span><br><span class="line">bt      eax, APIC_BSC           ; Is this the BSC?   APIC_BSC = 8, bt,检测某一位是否被置位， 这里就是检测第8位 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mov     esi,  OFFSET GdtDesc  // 初始化GDT把GDT地址赋给esi. </span><br><span class="line"></span><br><span class="line">GdtDesc:                                                ; GDT descriptor</span><br><span class="line">OffsetGDTDesc       EQU     $ - Flat32Start</span><br><span class="line">DW      GDT_SIZE - 1                ; GDT <span class="built_in">limit</span></span><br><span class="line">DD      OFFSET BootGDTtable ; GDT base address</span><br><span class="line"></span><br><span class="line">汇编定义了 BootGDTtable， 里面有数据段，代码段等各段定义</span><br><span class="line"></span><br><span class="line">DB      66h     // 本意是存储一个值为66H, 但是这里是80386芯片BUG 引入的命令用于切换16/32 位，</span><br><span class="line"></span><br><span class="line">66 8b c3  32位机器码命令</span><br><span class="line">8b c3     16位的命令</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">1. fword表示操作的是32位的地址 ， （ 配置上面的66 命令，确保是32位操作 ？）</span><br><span class="line">2. 之前包GDT的地址赋给了esi , si是esi的低16位，</span><br><span class="line">3， 这条命令是把，esi 低16位赋给GDTR寄存器，方便其他地方调用</span><br><span class="line">*/</span><br><span class="line">lgdt    fword ptr cs:[si]   </span><br><span class="line">/*</span><br><span class="line">读出CR0(32位的控制寄存器)到eax ； </span><br><span class="line">[0] PE  protect <span class="built_in">enable</span> 是否启动保护模式</span><br><span class="line">[1] MP  moniter coprocessor 监控协处理器</span><br><span class="line">[2] EM  <span class="built_in">emulate</span> coprocessor 模拟协处理器 = 1 无法使用协处理器</span><br><span class="line">[3] TS  task switch, 任务完成置1 ， 置1后无法使用协处理器</span><br><span class="line">[4] 微处理器的拓展位，处理器类型  287协处理器，387浮点协处理器</span><br><span class="line">[31] 分页使能，是否使用page机制</span><br><span class="line">*/</span><br><span class="line">mov     eax, cr0                           ; Get control register 0</span><br><span class="line">/*</span><br><span class="line">启动保护模式 </span><br><span class="line">启动协处理器</span><br><span class="line">*/</span><br><span class="line">or      eax, 00000003h                     ; Set PE bit (bit <span class="comment">#0) &amp; MP bit (bit #1)</span></span><br><span class="line">mov     cr0, eax                           ; Activate protected mode</span><br><span class="line">/*</span><br><span class="line">读出CR４　</span><br><span class="line">[0] VME  virtaul-8086 mode extensions  给运行 invirtual-8086的软件硬件加速</span><br><span class="line">[1] PVI  protect-mode virtaul interrupt support. ( 中断反应在 RFLAGS 寄存器红的 VIF/VIP 2个bit中 )</span><br><span class="line">[2] TSD  time-stamp <span class="built_in">disable</span>  0/1 表示是否可以读取 RDTSC/RDTSCP </span><br><span class="line">[3] DE   Debug extension , <span class="built_in">enable</span> IO breakpoint. </span><br><span class="line">[4] PSE  page-size extension</span><br><span class="line">[5] PAE  物理地址拓展， 使能的话，支持2M的超级页 </span><br><span class="line">[6] MCE  machine-check <span class="built_in">enable</span> </span><br><span class="line">[7] PGE  page global <span class="built_in">enable</span></span><br><span class="line">[8] PCE  performance-monitoring counter <span class="built_in">enable</span> </span><br><span class="line">[9] OSFXSR  256/128bit media 指令使能</span><br><span class="line">[10] OSXMMEXCPT <span class="built_in">enable</span> 处理 256/128bit media 指令异常 </span><br><span class="line">*/</span><br><span class="line">mov     eax, cr4                           ; Get control register 4</span><br><span class="line">or      eax, 00000600h                     ; Set OSFXSR bit (bit <span class="comment">#9) &amp; OSXMMEXCPT bit (bit #10)</span></span><br><span class="line">/*</span><br><span class="line">使能这俩位</span><br><span class="line">[9] OSFXSR  256/128bit media 指令使能</span><br><span class="line">[10] OSXMMEXCPT <span class="built_in">enable</span> 处理 256/128bit media 指令异常 </span><br><span class="line">*/</span><br><span class="line">mov     cr4, eax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 段初始化</span><br><span class="line">mov     ax, SYS_DATA_SEL   // 复制申请的系统数据段的地址给ax </span><br><span class="line"></span><br><span class="line">; System data segment descriptor</span><br><span class="line">SYS_DATA_SEL        equ     $ - GDT_BASE               ; Selector [0x18]</span><br><span class="line">DW      0FFFFh                     ; <span class="built_in">limit</span> 0xFFFFF</span><br><span class="line">DW      0                          ; base 0</span><br><span class="line">DB      0</span><br><span class="line">DB      093h                       ; present, ring 0, data, expand-up, not-writable</span><br><span class="line">DB      0CFh                       ; page-granular, 32-bit</span><br><span class="line">DB      0</span><br><span class="line"></span><br><span class="line">// 同样的地址赋给各个段寄存器</span><br><span class="line">mov     ds, ax</span><br><span class="line">mov     es, ax</span><br><span class="line">mov     fs, ax</span><br><span class="line">mov     gs, ax</span><br><span class="line">mov     ss, ax </span><br><span class="line">// 目前前面都是在protect 16模式下 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; Go to Protected32  </span><br><span class="line">mov esi, offset NemInitLinearAddress</span><br><span class="line"></span><br><span class="line">NemInitLinearAddress   LABEL   FWORD // 没有定义东西</span><br><span class="line"></span><br><span class="line">jmp     fword ptr cs:[si]   // 这里是个逻辑地址， </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;保护模式流程：&quot;&gt;&lt;a href=&quot;#保护模式流程：&quot; class=&quot;headerlink&quot; title=&quot;保护模式流程：&quot;&gt;&lt;/a&gt;保护模式流程：&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;1. 准备GDT。
2. 用lgdt加载gdtr。
3. 打开A20。
4</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title>BiosInterFace update 的思路</title>
    <link href="http://example.com/2021/04/20/bios/06_Biso_interface_update/"/>
    <id>http://example.com/2021/04/20/bios/06_Biso_interface_update/</id>
    <published>2021-04-20T03:27:32.564Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><hr><ul><li>PMFW<br>专门控制CLK/power的一个bin ,</li><li>SMU<br>BIOS的菜单控制，设置值，分发值到具体的模块<br>SMU和PMFW通过msg机制更新biosinterfaceTable的结构体来通信。</li><li>MSG机制<br>一端，向某个寄存器写入消息ID，消息参数，poll 等待response，另一端是硬件中断，拿到硬件中断后，处理写入response消息。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;PMFW&lt;br&gt;专门控制CLK/power的一个bin ,&lt;/li&gt;
&lt;li&gt;SMU&lt;br&gt;BIOS的菜单控</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/04/20/idea/%E8%BF%9C%E6%8E%A7%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2021/04/20/idea/%E8%BF%9C%E6%8E%A7%E6%A8%A1%E5%9D%97/</id>
    <published>2021-04-20T03:27:32.564Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手机程控模块"><a href="#手机程控模块" class="headerlink" title="手机程控模块"></a>手机程控模块</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="zephyr"><a href="#zephyr" class="headerlink" title="zephyr"></a>zephyr</h3><ul><li>8266驱动</li><li>MQTT协议移植</li><li>thread1 : MQTT 接收事件</li><li>thread2：MQTT 发送事件</li><li>用户APP功能自定义</li></ul><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="stm32f0-嵌入式主控端"><a href="#stm32f0-嵌入式主控端" class="headerlink" title="stm32f0 嵌入式主控端"></a>stm32f0 嵌入式主控端</h3><h3 id="8266模块"><a href="#8266模块" class="headerlink" title="8266模块"></a>8266模块</h3><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><h3 id="终端，控制端"><a href="#终端，控制端" class="headerlink" title="终端，控制端"></a>终端，控制端</h3><p><em>XMind - Trial Version</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手机程控模块&quot;&gt;&lt;a href=&quot;#手机程控模块&quot; class=&quot;headerlink&quot; title=&quot;手机程控模块&quot;&gt;&lt;/a&gt;手机程控模块&lt;/h1&gt;&lt;h2 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BIOS protect mode 总结</title>
    <link href="http://example.com/2021/04/20/bios/01_PCie_summary/"/>
    <id>http://example.com/2021/04/20/bios/01_PCie_summary/</id>
    <published>2021-04-20T03:27:32.564Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><hr><pre><code>Pcie     256 bus         每条bus 挂 32 devcie             每个设备有 8 func                 每个设备空间有 PCI 256Byte PCIE 4K 所以PCIE　总共大小是，　４K * 256 * 32 * 8 = 256 K Byte = 256 M PCIE 配置空间也可以 mem map / IO map.     IO map/访问：         只能PCIE 前256Byte， 后面的要用MMap 访问        example (IO access):             1 /*Access PCI Config Space in IO method*/            2 Address = BIT31|((BUS &amp; 0XFF)&lt;&lt; 16)|((DEV &amp; 0x1F)&lt;&lt;11)|((Fun &amp; 0x7) &lt;&lt; 8);            3 IoWrite32(0xCF8, address);                 //将要读取的地址写入到CF8            4 Date32 = IoRead32(0xcfc);                  //从CFC端口读出address的数据    mem map/访问:         example:        1 /*Write date*/        2 MmioWrite32(PcieBaseAdd + Bus&lt;&lt;16 + Dev&lt;&lt;11 + Fun&lt;&lt;8 + offset, date); //PcieBaseAdd为PCIE在内存中的基地址        4 /*Read date*/         5 Value = MmioRead32(PcieBaseAdd + Bus&lt;&lt;16 + Dev&lt;&lt;11 + Fun&lt;&lt;8 + offset);</code></pre><hr><h3 id="配置空间（-普通设备-）位说明："><a href="#配置空间（-普通设备-）位说明：" class="headerlink" title="配置空间（ 普通设备 ）位说明："></a>配置空间（ 普通设备 ）位说明：</h3><hr><hr><h3 id="PCIe-桥-（-透明桥-）"><a href="#PCIe-桥-（-透明桥-）" class="headerlink" title="PCIe 桥 （ 透明桥 ）"></a>PCIe 桥 （ 透明桥 ）</h3><hr><pre><code>连接在PCIe 接口上的一个设备，只是配置空间和普通PCIE 设备不同，桥设备只有在遍历设备时才配置，不需要专门的驱动，所以叫透明桥PCI桥的配置空间在前16个字节的格式和普通PCI设备并无区别，另外，桥还保留了普通设备的前两个BAR空间。所以从配置空间的0x18开始有了桥设备自身的配置格式</code></pre><hr><h3 id="各种地址类型："><a href="#各种地址类型：" class="headerlink" title="各种地址类型："></a>各种地址类型：</h3><hr><pre><code>1. Pcie 空间：    GnbLibPciRead </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;base&quot;&gt;&lt;a href=&quot;#base&quot; class=&quot;headerlink&quot; title=&quot;base&quot;&gt;&lt;/a&gt;base&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;Pcie 
    256 bus 
        每条bus 挂 32 devcie 
   </summary>
      
    
    
    
    <category term="Pcie" scheme="http://example.com/categories/Pcie/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode 插件记录</title>
    <link href="http://example.com/2021/03/11/yolo/yolo5/"/>
    <id>http://example.com/2021/03/11/yolo/yolo5/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.568Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h3 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h3><h3 id="部署得到的训练集"><a href="#部署得到的训练集" class="headerlink" title="部署得到的训练集"></a>部署得到的训练集</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;h3 id=&quot;训练集&quot;&gt;&lt;a href=&quot;#训练集&quot; class=&quot;headerlink&quot; title=&quot;训练集&quot;&gt;&lt;/a&gt;训练</summary>
      
    
    
    
    <category term="Project_Yolo" scheme="http://example.com/categories/Project-Yolo/"/>
    
    
  </entry>
  
  <entry>
    <title>屏幕录制demo</title>
    <link href="http://example.com/2021/03/11/yolo/screencast/"/>
    <id>http://example.com/2021/03/11/yolo/screencast/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.568Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ctwy291314/article/details/91490759">reference</a></p><hr><h3 id="dependence"><a href="#dependence" class="headerlink" title="dependence"></a>dependence</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><hr><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span>  cv2</span><br><span class="line"> </span><br><span class="line">fps = <span class="number">100</span></span><br><span class="line">start = <span class="number">1</span>  <span class="comment"># 延时录制</span></span><br><span class="line">end = <span class="number">20</span>  <span class="comment"># 自动结束时间</span></span><br><span class="line"> </span><br><span class="line">curScreen = ImageGrab.grab()  <span class="comment"># 获取屏幕对象</span></span><br><span class="line">height, width = curScreen.size</span><br><span class="line"> </span><br><span class="line">video = cv2.VideoWriter(<span class="string">&#x27;video02.avi&#x27;</span>, cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>), fps, (height, width))</span><br><span class="line"> </span><br><span class="line">imageNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    imageNum += <span class="number">1</span></span><br><span class="line">    captureImage = ImageGrab.grab()  <span class="comment"># 抓取屏幕</span></span><br><span class="line">    frame = cv2.cvtColor(np.array(captureImage), cv2.COLOR_RGB2BGR)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 显示无图像的窗口</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;capturing&#x27;</span>, np.zeros((<span class="number">1</span>, <span class="number">255</span>), np.uint8))</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 控制窗口显示位置，方便通过按键方式退出</span></span><br><span class="line">    cv2.moveWindow(<span class="string">&#x27;capturing&#x27;</span>, height - <span class="number">100</span>, width - <span class="number">100</span>)  </span><br><span class="line">    <span class="keyword">if</span> imageNum &gt; fps * start:</span><br><span class="line">        video.write(frame)</span><br><span class="line">    <span class="comment"># 退出条件    </span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">50</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>) <span class="keyword">or</span> imageNum &gt; fps * end:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">video.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ctwy291314/article/details/91490759&quot;&gt;reference&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;dependence&quot;&gt;&lt;a href=&quot;#dependence&quot; clas</summary>
      
    
    
    
    <category term="Project_Yolo" scheme="http://example.com/categories/Project-Yolo/"/>
    
    
  </entry>
  
  <entry>
    <title>UEFI --- pci 遍历</title>
    <link href="http://example.com/2021/03/11/uefi/pci_device/"/>
    <id>http://example.com/2021/03/11/uefi/pci_device/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="windows-上遍历PCI设备-Reference-Blog"><a href="#windows-上遍历PCI设备-Reference-Blog" class="headerlink" title="windows 上遍历PCI设备 | Reference Blog"></a>windows 上遍历PCI设备 | Reference <a href="https://blog.csdn.net/u013983194/article/details/46960147">Blog</a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> DWORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> WORD;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MK_PDI(bus,dev,func) (WORD)((bus&lt;&lt;8)|(dev&lt;&lt;3)|(func))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MK_PCIaddr(bus,dev,func) (DWORD)(0xf8000000L|(DWORD)MK_PDI(bus,dev,func)&lt;&lt;8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCI_CONFIG_ADDRESS 0xCF8 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCI_CONFIG_DATA 0xCFC</span></span><br><span class="line"><span class="function">DWORD <span class="title">inpd</span><span class="params">(<span class="keyword">int</span> inport)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD data;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">&quot;mov dx,inport&quot;</span></span><br><span class="line">        <span class="string">&quot;lea bx,data&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x50&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0xED&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x89,0x07&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x58&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outpd</span><span class="params">(<span class="keyword">int</span> outport,DWORD addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">&quot;mov dx,outport&quot;</span></span><br><span class="line">        <span class="string">&quot;lea bx,addr&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x50&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x8B, 0x07&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0xEF&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x58&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD <span class="title">GetData</span><span class="params">(DWORD addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD data;</span><br><span class="line">    outpd(PCI_CONFIG_ADDRESS,addr);</span><br><span class="line">    data = inpd(PCI_CONFIG_DATA);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bus,dev,func;</span><br><span class="line">    DWORD addr,addr1,addr2,addr3;</span><br><span class="line">    DWORD data,data1,data2,data3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bus#\tDev#\tFunc#&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (bus = <span class="number">0</span>; bus &lt;= <span class="number">0x63</span>; ++bus)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (dev = <span class="number">0</span>; dev &lt;= <span class="number">0x1F</span>; ++dev)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (func = <span class="number">0</span>; func &lt;= <span class="number">0x7</span>; ++func)</span><br><span class="line">            &#123;</span><br><span class="line">                addr = MK_PCIaddr(bus,dev,func);</span><br><span class="line">                data = GetData(addr);</span><br><span class="line">                <span class="keyword">if</span>((WORD)data!=<span class="number">0xFFFF</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%2.2x\t%2.2x\t%2.2x\t&quot;</span>,bus,dev,func);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;windows-上遍历PCI设备-Reference-Blog&quot;&gt;&lt;a href=&quot;#windows-上遍历PCI设备-Reference-Blog&quot; class=&quot;headerlink&quot; title=&quot;windows 上遍历PCI设备 | Reference B</summary>
      
    
    
    
    <category term="uefi" scheme="http://example.com/categories/uefi/"/>
    
    
  </entry>
  
  <entry>
    <title>gdb 调试常用命令备忘</title>
    <link href="http://example.com/2021/03/09/tool/gdb/"/>
    <id>http://example.com/2021/03/09/tool/gdb/</id>
    <published>2021-03-09T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<p>disassemble    //gdb下使用可以查看汇编代码<br>disassemble /m 函数名      /m 源码和汇编一起排列<br>disassemble 不带参数，默认的反汇编范围是 所选择帧的pc附近的函数<br>单个参数, 就是pc, 当然也可以是函数名，因为函数名 也是一个 地址; <br>这样范围就是该pc附近的函数<br>两个参数，就是内存地址范围</p><p>使用display /i $pc（结合display命令和寄存器/pc内部变量）指令进行设置</p><p>info register查看寄存器的情况，可以简写成i r<br>主要是%eip、%eax、%esp和%ebp<br> 列出的结果主要有三行<br>    最左边是寄存器名称外，中间是寄存器存的值（也就是一个内存地址），右边是这个值对应的内存<br>    地址中的值。打印一下$eax可验证</p><p>si，ni：<br>    下一条语句遇到函数调用的时候，nexti不会跟踪进入函数，而是继续执行下面的语句，<br>    而step命令则会跟踪进入函数内部。<br>    si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指<br>    令，而s/n针对的是源代码。     <br>i代表指令（instruction）<br>     n(ext)i<br>     s(tep)i</p><p>$pc   代表pc程序计数器的值</p><p>set disassembly-flavor intel          gdb设置intel汇编 ，默认是att</p><p>print其实是有计数器的，每次print打印，其实都有一个类似count++在内部发生，<br>使用print $num 能显示第num个打印结果，如上，p $3   //查看第三个值<br>  (gdb)p i<br>  (gdb)p/a i<br>  (gdb)p/c i<br>  (gdb)p/f i<br>  (gdb)p/x i<br>  (gdb)p/o i<br>  (gdb)p/d i<br>  (gdb)p/t i              <br>    f浮点，c字符，t为二进制，o八，x十六，d十<br>    a和x同样是打印十六进制,不同名但同功能</p><p>调试运行中的程序：<br>   #ps -aux | grep execFile    //找到运行中的进程PID，<br>   使用<br>   #gdb execFile PID    <br>bt n(next)往下走是看不到已经运行完的错误的，所以就谈到bt（backtrace）命令——回溯。<br>info line main  //查看main的信息<br>   info line 0x…  //查看某一行信息<br>r是run的缩写     r 参数      以参数运行程序<br>quit,退出gdb调试<br>gdb -q 程序名      //这个操作可以不输出一些信息（gdb的一些版本信息说明之类的）   <br>gdb也支持运行linux命令的，可以在gdb的提示符中，输入shell，然后在输入你需要的命令就可以<br>了。例如：shell clear     清屏<br>b*0x…            //在逆向调试的时候，在某行指令下断点必须遵照这个格式  <br>x/i 可以查看指令<br>        例如： x/15i main  查看main函数中的第15条指令  <br> x/43bc 0xffffd190 指的是 0xffffd190后43个内存单元<br> <br>想边看汇编变调试就先：r 参数    ，然后使用layout asm，直接动态显示指令运行<br>       layout 几个参数：<br>               src   : Displays source and command windows.<br>               asm   : Displays disassembly and command windows.<br>               split : Displays source, disassembly and command windows.<br>               regs  : Displays register window. If existing layout<br>       c（continue）  可以让程序执行到下一个断点处<br>       p $eax   查看寄存器的值<br>       x/i $pc  查看当前指令的运行地址<br>修改寄存器值的两种方式(想要满足某个比较条件直接修改寄存器，可以跳到想跳的地方)：<br>      1)直接来：<br>               set $eax=value<br>      2)找到寄存器的地址通过这个地址修改值：<br>               p $rsp+0x714<br>               set *上一步的值=value      <br>x/  &lt;n/f/u&gt;  <addr>   //内存地址中的值，x即examine,3个参数顺序可变<br>     <br>   1)n是一个正整数，表示需要显示的内存单元的个数<br>   2)f表示显示的格式（有以下选项）：<br>       x （hexadecimal）按十六进制格式显示变量。 <br>       d （signed decimal）按十进制格式显示变量。 <br>       u （unsigned decimal）按十进制格式显示无符号整型。 <br>       o （octal）按八进制格式显示变量。 <br>       t （binary）按二进制格式显示变量。 <br>       a （address）按十六进制格式显示地址，并显示距离前继符号的偏移量(offset)。常用于定位未知 地址(变量)。 <br>       c （character）按字符格式显示变量。 <br>       f （floating）按浮点数格式显示变量。  <br>   3)u表示从当前地址往后请求的字节数单位，如果不指定的话，GDB默认是4个bytes：<br>       b表示单字节，<br>       h表示双字节，<br>       w表示四字节，<br>       g表示八字节   <br>x/10x $sp–&gt;打印stack的前10个元素   <br>reverse-stepi   //回退一条指令<br>info thread   // 查看所有线程</p><p>continue         执行到下一暂停点或程序结束。<br>next         执行一行源代码但不进入函数内部。<br>step        执行一行源代码而且进入函数内部。<br>gdb 运行程序<br>例子程序名为prog，则在终端输入 gdb prog<br>gdb 设置参数<br>set args 可指定运行时参数。（如：set args 10 20 30 40 50） <br>show args 命令可以查看设置好的运行参数。 <br>若要再次修改参数，可再执行一遍 set args<br>运行<br>输入 r 运行 <br>出错后，输入 bt 查看运行堆栈<br>退出<br>输入 quit</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;disassemble    //gdb下使用可以查看汇编代码&lt;br&gt;disassemble /m 函数名      /m 源码和汇编一起排列&lt;br&gt;disassemble 不带参数，默认的反汇编范围是 所选择帧的pc附近的函数&lt;br&gt;单个参数, 就是pc, 当然也可以是函</summary>
      
    
    
    
    <category term="tools" scheme="http://example.com/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>hack binary example</title>
    <link href="http://example.com/2021/03/09/liveoverflow/%E9%95%9C%E5%83%8F%E5%8A%A0%E5%AF%86%E9%AA%8C%E8%AF%81%E4%BE%8B%E5%AD%90/"/>
    <id>http://example.com/2021/03/09/liveoverflow/%E9%95%9C%E5%83%8F%E5%8A%A0%E5%AF%86%E9%AA%8C%E8%AF%81%E4%BE%8B%E5%AD%90/</id>
    <published>2021-03-09T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    
    
    
    <category term="liveoverflow" scheme="http://example.com/categories/liveoverflow/"/>
    
    
  </entry>
  
  <entry>
    <title>c 函数参数是怎么传递的，整个过程</title>
    <link href="http://example.com/2021/03/08/liveoverflow/c_example_param/"/>
    <id>http://example.com/2021/03/08/liveoverflow/c_example_param/</id>
    <published>2021-03-08T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="测试源码"><a href="#测试源码" class="headerlink" title="测试源码"></a>测试源码</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int test2(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">test</span>(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">  test2(6,7,8,9,10);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])&#123;</span><br><span class="line">    <span class="built_in">test</span>(1,2,3,4,5);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line">xhlu@BU-build-XHLU /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span></span><br><span class="line">$ gdb a.exe</span><br><span class="line">GNU gdb (GDB) (Cygwin 9.2-1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">&quot;show copying&quot;</span> and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-pc-cygwin&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from a.exe...</span><br><span class="line">(gdb) b main.c:16</span><br><span class="line">Breakpoint 1 at 0x10040114b: file main.c, line 16.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span>/a.exe</span><br><span class="line">[New Thread 8624.0xf8]</span><br><span class="line">[New Thread 8624.0x2404]</span><br><span class="line">[New Thread 8624.0x1560]</span><br><span class="line">[New Thread 8624.0x13b0]</span><br><span class="line"></span><br><span class="line">Thread 1 <span class="string">&quot;a&quot;</span> hit Breakpoint 1, main (argc=1, argv=0xffffcc60) at main.c:16</span><br><span class="line">16          <span class="built_in">test</span>(1,2,3,4,5);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x0000000100401137 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401138 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x000000010040113b &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x000000010040113f &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x0000000100401142 &lt;+11&gt;:    mov    %rdx,0x18(%rbp)</span><br><span class="line">   0x0000000100401146 &lt;+15&gt;:    callq  0x100401190 &lt;__main&gt;</span><br><span class="line">=&gt; 0x000000010040114b &lt;+20&gt;:    movl   <span class="variable">$0x5</span>,0x20(%rsp)</span><br><span class="line">   0x0000000100401153 &lt;+28&gt;:    mov    <span class="variable">$0x4</span>,%r9d</span><br><span class="line">   0x0000000100401159 &lt;+34&gt;:    mov    <span class="variable">$0x3</span>,%r8d</span><br><span class="line">   0x000000010040115f &lt;+40&gt;:    mov    <span class="variable">$0x2</span>,%edx</span><br><span class="line">   0x0000000100401164 &lt;+45&gt;:    mov    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">   0x0000000100401169 &lt;+50&gt;:    callq  0x1004010ca &lt;<span class="built_in">test</span>&gt;</span><br><span class="line">   0x000000010040116e &lt;+55&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401173 &lt;+60&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401177 &lt;+64&gt;:    pop    %rbp</span><br><span class="line">   0x0000000100401178 &lt;+65&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) s</span><br><span class="line"><span class="built_in">test</span> (a=1, b=2, c=3, d=4, e=5) at main.c:10</span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">(gdb) l</span><br><span class="line">5         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">6         <span class="built_in">return</span> 0;</span><br><span class="line">7       &#125;</span><br><span class="line">8</span><br><span class="line">9       int <span class="built_in">test</span>(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">11        <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">12        <span class="built_in">return</span> 0;</span><br><span class="line">13      &#125;</span><br><span class="line">14</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> <span class="built_in">test</span>:</span><br><span class="line">   0x00000001004010ca &lt;+0&gt;:     push   %rbp              将被调函数的main栈帧栈底地址放入bp寄存器中,此时我们看到的就是函数<span class="built_in">test</span>的栈帧</span><br><span class="line">   0x00000001004010cb &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000001004010ce &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010d2 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)   将一会要用到的core寄存器压栈 ， ？为什么不把函数参数直接压栈呢，非要用core寄存器 ？</span><br><span class="line">   0x00000001004010d5 &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x00000001004010d8 &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x00000001004010dc &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">=&gt; 0x00000001004010e0 &lt;+22&gt;:    movl   <span class="variable">$0xa</span>,0x20(%rsp)   如下6/7/8/9参数被放到了 core 寄存器中，0xa 被压入栈中</span><br><span class="line">   0x00000001004010e8 &lt;+30&gt;:    mov    <span class="variable">$0x9</span>,%r9d</span><br><span class="line">   0x00000001004010ee &lt;+36&gt;:    mov    <span class="variable">$0x8</span>,%r8d</span><br><span class="line">   0x00000001004010f4 &lt;+42&gt;:    mov    <span class="variable">$0x7</span>,%edx</span><br><span class="line">   0x00000001004010f9 &lt;+47&gt;:    mov    <span class="variable">$0x6</span>,%ecx</span><br><span class="line">   0x00000001004010fe &lt;+52&gt;:    callq  0x100401080 &lt;test2&gt;</span><br><span class="line">   0x0000000100401103 &lt;+57&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401106 &lt;+60&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x0000000100401109 &lt;+63&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040110c &lt;+66&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x0000000100401110 &lt;+70&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x0000000100401113 &lt;+73&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x0000000100401117 &lt;+77&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x000000010040111a &lt;+80&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x000000010040111d &lt;+83&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x0000000100401120 &lt;+86&gt;:    lea    0x1ed9(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x0000000100401127 &lt;+93&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x000000010040112c &lt;+98&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401131 &lt;+103&gt;:   add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401135 &lt;+107&gt;:   pop    %rbp</span><br><span class="line">   0x0000000100401136 &lt;+108&gt;:   retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) s</span><br><span class="line">[New Thread 8624.0x1d34]</span><br><span class="line">test2 (a=6, b=7, c=8, d=9, e=10) at main.c:5</span><br><span class="line">5         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">=&gt; 0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line">[New Thread 8624.0x24b0]</span><br><span class="line">6, 7, 8, 9, 10</span><br><span class="line">6         <span class="built_in">return</span> 0;</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">=&gt; 0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line">7       &#125;</span><br><span class="line">(gdb) l</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4       int test2(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">5         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">6         <span class="built_in">return</span> 0;</span><br><span class="line">7       &#125;</span><br><span class="line">8</span><br><span class="line">9       int <span class="built_in">test</span>(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">11        <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">=&gt; 0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="built_in">test</span> (a=1, b=2, c=3, d=4, e=5) at main.c:11</span><br><span class="line">11        <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> <span class="built_in">test</span>:</span><br><span class="line">   0x00000001004010ca &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x00000001004010cb &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000001004010ce &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010d2 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x00000001004010d5 &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x00000001004010d8 &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x00000001004010dc &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x00000001004010e0 &lt;+22&gt;:    movl   <span class="variable">$0xa</span>,0x20(%rsp)</span><br><span class="line">   0x00000001004010e8 &lt;+30&gt;:    mov    <span class="variable">$0x9</span>,%r9d</span><br><span class="line">   0x00000001004010ee &lt;+36&gt;:    mov    <span class="variable">$0x8</span>,%r8d</span><br><span class="line">   0x00000001004010f4 &lt;+42&gt;:    mov    <span class="variable">$0x7</span>,%edx</span><br><span class="line">   0x00000001004010f9 &lt;+47&gt;:    mov    <span class="variable">$0x6</span>,%ecx</span><br><span class="line">   0x00000001004010fe &lt;+52&gt;:    callq  0x100401080 &lt;test2&gt;</span><br><span class="line">=&gt; 0x0000000100401103 &lt;+57&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401106 &lt;+60&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x0000000100401109 &lt;+63&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040110c &lt;+66&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x0000000100401110 &lt;+70&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x0000000100401113 &lt;+73&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x0000000100401117 &lt;+77&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x000000010040111a &lt;+80&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x000000010040111d &lt;+83&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x0000000100401120 &lt;+86&gt;:    lea    0x1ed9(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x0000000100401127 &lt;+93&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x000000010040112c &lt;+98&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401131 &lt;+103&gt;:   add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401135 &lt;+107&gt;:   pop    %rbp</span><br><span class="line">   0x0000000100401136 &lt;+108&gt;:   retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line">1, 2, 3, 4, 5</span><br><span class="line">12        <span class="built_in">return</span> 0;</span><br><span class="line">(gdb) n</span><br><span class="line">13      &#125;</span><br><span class="line">(gdb) n</span><br><span class="line">main (argc=1, argv=0xffffcc60) at main.c:17</span><br><span class="line">17          <span class="built_in">return</span> 0;</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x0000000100401137 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401138 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x000000010040113b &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x000000010040113f &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x0000000100401142 &lt;+11&gt;:    mov    %rdx,0x18(%rbp)</span><br><span class="line">   0x0000000100401146 &lt;+15&gt;:    callq  0x100401190 &lt;__main&gt;</span><br><span class="line">   0x000000010040114b &lt;+20&gt;:    movl   <span class="variable">$0x5</span>,0x20(%rsp)</span><br><span class="line">   0x0000000100401153 &lt;+28&gt;:    mov    <span class="variable">$0x4</span>,%r9d</span><br><span class="line">   0x0000000100401159 &lt;+34&gt;:    mov    <span class="variable">$0x3</span>,%r8d</span><br><span class="line">   0x000000010040115f &lt;+40&gt;:    mov    <span class="variable">$0x2</span>,%edx</span><br><span class="line">   0x0000000100401164 &lt;+45&gt;:    mov    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">   0x0000000100401169 &lt;+50&gt;:    callq  0x1004010ca &lt;<span class="built_in">test</span>&gt;</span><br><span class="line">=&gt; 0x000000010040116e &lt;+55&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401173 &lt;+60&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401177 &lt;+64&gt;:    pop    %rbp</span><br><span class="line">   0x0000000100401178 &lt;+65&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用bt列出函数栈，使用frame n 查看栈帧，就可以看到出问题时候的函数回溯了，很方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">xhlu@bu-build-XHLU /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span></span><br><span class="line">$ gdb a.exe</span><br><span class="line">GNU gdb (GDB) (Cygwin 9.2-1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">&quot;show copying&quot;</span> and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-pc-cygwin&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from a.exe...</span><br><span class="line">(gdb) b main.c:3</span><br><span class="line">Breakpoint 1 at 0x100401096: file main.c, line 4.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span>/a.exe</span><br><span class="line">[New Thread 4068.0xbdc]</span><br><span class="line">[New Thread 4068.0x18d8]</span><br><span class="line">[New Thread 4068.0x1664]</span><br><span class="line">[New Thread 4068.0x2610]</span><br><span class="line"></span><br><span class="line">Thread 1 <span class="string">&quot;a&quot;</span> hit Breakpoint 1, test2 (a=6, b=7, c=8, d=9, e=10) at main.c:4</span><br><span class="line">4         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  test2 (a=6, b=7, c=8, d=9, e=10) at main.c:4</span></span><br><span class="line"><span class="comment">#1  0x000000010040110a in test (a=1, b=2, c=3, d=4, e=5) at main.c:10</span></span><br><span class="line"><span class="comment">#2  0x0000000100401173 in main (argc=1, argv=0xffffcc60) at main.c:16</span></span><br><span class="line">(gdb) frame 0</span><br><span class="line"><span class="comment">#0  test2 (a=6, b=7, c=8, d=9, e=10) at main.c:4</span></span><br><span class="line">4         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">=&gt; 0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011b0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) frame 1</span><br><span class="line"><span class="comment">#1  0x000000010040110a in test (a=1, b=2, c=3, d=4, e=5) at main.c:10</span></span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> <span class="built_in">test</span>:</span><br><span class="line">   0x00000001004010ca &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x00000001004010cb &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000001004010ce &lt;+4&gt;:     sub    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x00000001004010d2 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x00000001004010d5 &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x00000001004010d8 &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x00000001004010dc &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x00000001004010e0 &lt;+22&gt;:    movl   <span class="variable">$0xc</span>,-0x4(%rbp)</span><br><span class="line">   0x00000001004010e7 &lt;+29&gt;:    movl   <span class="variable">$0xa</span>,0x20(%rsp)</span><br><span class="line">   0x00000001004010ef &lt;+37&gt;:    mov    <span class="variable">$0x9</span>,%r9d</span><br><span class="line">   0x00000001004010f5 &lt;+43&gt;:    mov    <span class="variable">$0x8</span>,%r8d</span><br><span class="line">   0x00000001004010fb &lt;+49&gt;:    mov    <span class="variable">$0x7</span>,%edx</span><br><span class="line">   0x0000000100401100 &lt;+54&gt;:    mov    <span class="variable">$0x6</span>,%ecx</span><br><span class="line">   0x0000000100401105 &lt;+59&gt;:    callq  0x100401080 &lt;test2&gt;</span><br><span class="line">=&gt; 0x000000010040110a &lt;+64&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x000000010040110d &lt;+67&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x0000000100401110 &lt;+70&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x0000000100401113 &lt;+73&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x0000000100401117 &lt;+77&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x000000010040111a &lt;+80&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x000000010040111e &lt;+84&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x0000000100401121 &lt;+87&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x0000000100401124 &lt;+90&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x0000000100401127 &lt;+93&gt;:    lea    0x1ed2(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x000000010040112e &lt;+100&gt;:   callq  0x1004011b0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x0000000100401133 &lt;+105&gt;:   mov    -0x4(%rbp),%eax</span><br><span class="line">   0x0000000100401136 &lt;+108&gt;:   add    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x000000010040113a &lt;+112&gt;:   pop    %rbp</span><br><span class="line">   0x000000010040113b &lt;+113&gt;:   retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) frame 2</span><br><span class="line"><span class="comment">#2  0x0000000100401173 in main (argc=1, argv=0xffffcc60) at main.c:16</span></span><br><span class="line">16          int xh = <span class="built_in">test</span>(1,2,3,4,5);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x000000010040113c &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x000000010040113d &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401140 &lt;+4&gt;:     sub    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x0000000100401144 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x0000000100401147 &lt;+11&gt;:    mov    %rdx,0x18(%rbp)</span><br><span class="line">   0x000000010040114b &lt;+15&gt;:    callq  0x1004011a0 &lt;__main&gt;</span><br><span class="line">   0x0000000100401150 &lt;+20&gt;:    movl   <span class="variable">$0x5</span>,0x20(%rsp)</span><br><span class="line">   0x0000000100401158 &lt;+28&gt;:    mov    <span class="variable">$0x4</span>,%r9d</span><br><span class="line">   0x000000010040115e &lt;+34&gt;:    mov    <span class="variable">$0x3</span>,%r8d</span><br><span class="line">   0x0000000100401164 &lt;+40&gt;:    mov    <span class="variable">$0x2</span>,%edx</span><br><span class="line">   0x0000000100401169 &lt;+45&gt;:    mov    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">   0x000000010040116e &lt;+50&gt;:    callq  0x1004010ca &lt;<span class="built_in">test</span>&gt;</span><br><span class="line">=&gt; 0x0000000100401173 &lt;+55&gt;:    mov    %eax,-0x4(%rbp)</span><br><span class="line">   0x0000000100401176 &lt;+58&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x000000010040117b &lt;+63&gt;:    add    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x000000010040117f &lt;+67&gt;:    pop    %rbp</span><br><span class="line">   0x0000000100401180 &lt;+68&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;测试源码&quot;&gt;&lt;a href=&quot;#测试源码&quot; class=&quot;headerlink&quot; title=&quot;测试源码&quot;&gt;&lt;/a&gt;测试源码&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="liveoverflow" scheme="http://example.com/categories/liveoverflow/"/>
    
    
  </entry>
  
  <entry>
    <title>C 的角角落落</title>
    <link href="http://example.com/2021/03/02/c/c%E8%A7%92%E8%A7%92%E8%90%BD%E8%90%BD/"/>
    <id>http://example.com/2021/03/02/c/c%E8%A7%92%E8%A7%92%E8%90%BD%E8%90%BD/</id>
    <published>2021-03-02T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="asm-volatile-“”-”memory”-强制每次都从内存中读取数据，不优化。"><a href="#asm-volatile-“”-”memory”-强制每次都从内存中读取数据，不优化。" class="headerlink" title="asm volatile(“”: : :”memory”)  // 强制每次都从内存中读取数据，不优化。"></a><strong>asm</strong> <strong>volatile</strong>(“”: : :”memory”)  // 强制每次都从内存中读取数据，不优化。</h3><hr><p>memory 强制gcc编译器假设RAM所有内存单元均被汇编指令修改，这样cpu中的registers和cache中已缓存的内存单元中的数据将作废。cpu将不得不在需要的时候重新读取内存中的数据。这就阻止了cpu又将registers，cache中的数据用于去优化指令，而避免去访问内存。</p><ol><li> __asm__用于指示编译器在此插入汇编语句。</li><li> __volatile__用于告诉编译器，严禁将此处的汇编语句与其它的语句重组合优化。即：原原本本按原来的样子处理这这里的汇编。</li><li> memory强制gcc编译器假设RAM所有内存单元均被汇编指令修改，这样cpu中的registers和cache中已缓存的内存单元中的数据将作废。cpu将不得不在需要的时候重新读取内存中的数据。这就阻止了cpu又将registers，cache中的数据用于去优化指令，而避免去访问内存。</li><li> “”:::表示这是个空指令。barrier()不用在此插入一条串行化汇编指令。</li></ol><hr><h3 id="section-段的方式访问函数"><a href="#section-段的方式访问函数" class="headerlink" title="section 段的方式访问函数"></a>section 段的方式访问函数</h3><hr><p>将我需要用到的函数放在 .mywon 段中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*myown_call)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> myown_call _myown_start;</span><br><span class="line"><span class="keyword">extern</span> myown_call _myown_end;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _init __attribute__((unused, section(<span class="meta-string">&quot;.myown&quot;</span>)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> func_init(func) myown_call _fn_##func _init = func</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mspec1</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;aha!\n&quot;</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mspec2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;aloha!\n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mspec3</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;hello!\n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func_init(mspec1);</span><br><span class="line">func_init(mspec2);</span><br><span class="line">func_init(mspec3);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* exactly like below:</span></span><br><span class="line"><span class="comment">static myown_call mc1  __attribute__((unused, section(&quot;.myown&quot;))) = mspec1;</span></span><br><span class="line"><span class="comment">static myown_call mc2  __attribute__((unused, section(&quot;.myown&quot;))) = mspec2;</span></span><br><span class="line"><span class="comment">static myown_call mc3  __attribute__((unused, section(&quot;.myown&quot;))) = mspec3;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_initcalls</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    myown_call *call_ptr = &amp;_myown_start;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;call_ptr: %p\n&quot;</span>, call_ptr);</span><br><span class="line">        (*call_ptr)();</span><br><span class="line">        ++call_ptr;</span><br><span class="line">    &#125; <span class="keyword">while</span> (call_ptr &lt; &amp;_myown_end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    do_initcalls();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;asm-volatile-“”-”memory”-强制每次都从内存中读取数据，不优化。&quot;&gt;&lt;a href=&quot;#asm-volatile-“”-”memory”-强制每次都从内存中读取数据，不优化。&quot; class=&quot;headerlink&quot; title=&quot;a</summary>
      
    
    
    
    <category term="c" scheme="http://example.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode 插件记录</title>
    <link href="http://example.com/2021/03/02/vscode/%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2021/03/02/vscode/%E6%8F%92%E4%BB%B6/</id>
    <published>2021-03-02T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.568Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="scope4code"><a href="#scope4code" class="headerlink" title="scope4code"></a>scope4code</h3><hr><hr><h3 id="ccls"><a href="#ccls" class="headerlink" title="ccls"></a>ccls</h3><hr><hr><h3 id="c-c"><a href="#c-c" class="headerlink" title="c/c++"></a>c/c++</h3><hr><hr><h3 id="eclipse-keymap"><a href="#eclipse-keymap" class="headerlink" title="eclipse keymap"></a>eclipse keymap</h3><hr><hr><h3 id="git-history"><a href="#git-history" class="headerlink" title="git history"></a>git history</h3><hr><hr><h3 id="gitlens"><a href="#gitlens" class="headerlink" title="gitlens"></a>gitlens</h3><hr><hr><h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;scope4code&quot;&gt;&lt;a href=&quot;#scope4code&quot; class=&quot;headerlink&quot; title=&quot;scope4code&quot;&gt;&lt;/a&gt;scope4code&lt;/h3&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;ccls&quot;&gt;&lt;a href=&quot;#cc</summary>
      
    
    
    
    <category term="vscode" scheme="http://example.com/categories/vscode/"/>
    
    
  </entry>
  
  <entry>
    <title>PCI 设备访问</title>
    <link href="http://example.com/2021/02/22/pci_device/pci_device/"/>
    <id>http://example.com/2021/02/22/pci_device/pci_device/</id>
    <published>2021-02-22T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="win-10-列出PCI设备"><a href="#win-10-列出PCI设备" class="headerlink" title="win 10 列出PCI设备"></a>win 10 列出PCI设备</h3><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic path win32_pnpentity where <span class="string">&quot;deviceid like &#x27;%PCI%&#x27;&quot;</span> get name,deviceid</span><br></pre></td></tr></table></figure><p><img src="pci.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;win-10-列出PCI设备&quot;&gt;&lt;a href=&quot;#win-10-列出PCI设备&quot; class=&quot;headerlink&quot; title=&quot;win 10 列出PCI设备&quot;&gt;&lt;/a&gt;win 10 列出PCI设备&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="PCI" scheme="http://example.com/categories/PCI/"/>
    
    
  </entry>
  
  <entry>
    <title>UEFI --- dsc 语法</title>
    <link href="http://example.com/2021/02/22/uefi/uefi_dsc/"/>
    <id>http://example.com/2021/02/22/uefi/uefi_dsc/</id>
    <published>2021-02-22T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.568Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="语法例子"><a href="#语法例子" class="headerlink" title="语法例子"></a>语法例子</h3><hr><p>变量定义与判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DEFINE SECURE_BOOT_ENABLE      = FALSE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!<span class="keyword">if</span> $(SECURE_BOOT_ENABLE) == TRUE</span><br><span class="line">  PlatformSecureLib|OvmfPkg/Library/PlatformSecureLib/PlatformSecureLib.inf</span><br><span class="line">  TpmMeasurementLib|SecurityPkg/Library/DxeTpmMeasurementLib/DxeTpmMeasurementLib.inf</span><br><span class="line">  AuthVariableLib|SecurityPkg/Library/AuthVariableLib/AuthVariableLib.inf</span><br><span class="line">!<span class="keyword">else</span></span><br><span class="line">  TpmMeasurementLib|MdeModulePkg/Library/TpmMeasurementLibNull/TpmMeasurementLibNull.inf</span><br><span class="line">  AuthVariableLib|MdeModulePkg/Library/AuthVariableLibNull/AuthVariableLibNull.inf</span><br><span class="line">!endif</span><br></pre></td></tr></table></figure><hr><h3 id="Section"><a href="#Section" class="headerlink" title="Section"></a>Section</h3><hr><p>Section的大致格式如下：[oo.xx.zz]。这里oo是必选的，而xx、zz等需要根据oo的值来确定是否存在以及具体是什么内容。下面就介绍这些常用的Section关键字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Defines]</span><br><span class="line">  PLATFORM_NAME                  = LearnUefi</span><br><span class="line">  PLATFORM_GUID                  = 5a9e7754-d81b-49ea-85ad-69eaa7b1539b</span><br><span class="line">  PLATFORM_VERSION               = 0.1</span><br><span class="line">  DSC_SPECIFICATION              = 0x00010005</span><br><span class="line">  OUTPUT_DIRECTORY               = Build/LearnUefiPkg</span><br><span class="line">  SUPPORTED_ARCHITECTURES        = X64</span><br><span class="line">  BUILD_TARGETS                  = NOOPT|DEBUG|RELEASE</span><br><span class="line">  SKUID_IDENTIFIER               = DEFAULT</span><br><span class="line">  FLASH_DEFINITION               = LearnUefiPkg/LearnUefiPkg.fdf</span><br><span class="line"> </span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Defines for default states.  These can be changed on the command line.</span></span><br><span class="line">  <span class="comment"># -D FLAG=VALUE</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  DEFINE SECURE_BOOT_ENABLE      = FALSE</span><br><span class="line">  DEFINE NETWORK_IP6_ENABLE      = FALSE</span><br><span class="line">  DEFINE HTTP_BOOT_ENABLE        = FALSE</span><br><span class="line">  DEFINE SMM_REQUIRE             = FALSE</span><br></pre></td></tr></table></figure><p>这个Section用来指定编译选项。EDK可以在Windows、Linux和Mac上编译，所以这里的宏也可以指定不同的系统，且EDK包含很多的语言，所以也可以指定。此外，比较特别的一点是，BIOS包含的模块有不同的类型，不同类型会对应不同的体系架构，比如PEIM需要的是32位的编译，DXE之后需要64位的编译，等等。所以这个Section还有一些变种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[BuildOptions] </span><br><span class="line">[BuildOptions.common]</span><br><span class="line">[BuildOptions.$(ARCH)]</span><br><span class="line">[BuildOptions.common.CodeBase]</span><br><span class="line">[BuildOptions.$(ARCH).CodeBase]</span><br><span class="line">[BuildOptions.$(ARCH).CodeBase.$(MODULE_TYPE)]</span><br></pre></td></tr></table></figure><p>[LibraryClasses]<br>这个Section定义了所以使用到的库函数。由于库可以使用在不同的阶段和架构，所以它也分为不同的子类，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[LibraryClasses]</span><br><span class="line">[LibraryClasses.common]</span><br><span class="line">[LibraryClasses.$(ARCH)]</span><br><span class="line">[LibraryClasses.common.$(MODULE_TYPE)]</span><br><span class="line">[LibraryClasses.$(ARCH).$(MODULE_TYPE) ]</span><br><span class="line"></span><br><span class="line">越精细的范围覆盖越通用的范围</span><br><span class="line">[LibraryClasses]</span><br><span class="line">  PcdLib|MdePkg/Library/BasePcdLibNull/BasePcdLibNull.inf</span><br><span class="line">[LibraryClasses.common]</span><br><span class="line">  BaseCryptLib|CryptoPkg/Library/BaseCryptLib/BaseCryptLib.inf</span><br><span class="line">[LibraryClasses.common.SEC]</span><br><span class="line">  TimerLib|OvmfPkg/Library/AcpiTimerLib/BaseRomAcpiTimerLib.inf</span><br><span class="line">  QemuFwCfgLib|OvmfPkg/Library/QemuFwCfgLib/QemuFwCfgSecLib.inf</span><br></pre></td></tr></table></figure><p>[PcdsXXX]<br>PCD的Section有不同的种类，对应不同的PCD类型，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[PcdsFeatureFlag]</span><br><span class="line">[PcdsFixedAtBuild]</span><br><span class="line">[PcdsDynamicDefault]</span><br><span class="line">[PcdsPatchableInModule]</span><br><span class="line"></span><br><span class="line">[PcdsFeatureFlag]</span><br><span class="line">  gEfiMdeModulePkgTokenSpaceGuid.PcdHiiOsRuntimeSupport|FALSE</span><br><span class="line">  gEfiMdeModulePkgTokenSpaceGuid.PcdStatusCodeUseSerial|FALSE</span><br><span class="line">  gEfiMdeModulePkgTokenSpaceGuid.PcdStatusCodeUseMemory|TRUE</span><br></pre></td></tr></table></figure><p>[Components]<br>该Section中包含所以需要编译的模块，同样由于模块的不同，这里也会对应不同的变种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Components]</span><br><span class="line">[Components.common]</span><br><span class="line">[Components.$(ARCH)]</span><br><span class="line"></span><br><span class="line">[Components]</span><br><span class="line">  OvmfPkg/ResetVector/ResetVector.inf</span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># SEC Phase modules</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  OvmfPkg/Sec/SecMain.inf &#123;</span><br><span class="line">    &lt;LibraryClasses&gt;</span><br><span class="line">      NULL|MdeModulePkg/Library/LzmaCustomDecompressLib/LzmaCustomDecompressLib.inf</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;语法例子&quot;&gt;&lt;a href=&quot;#语法例子&quot; class=&quot;headerlink&quot; title=&quot;语法例子&quot;&gt;&lt;/a&gt;语法例子&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;变量定义与判断&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="uefi" scheme="http://example.com/categories/uefi/"/>
    
    
  </entry>
  
  <entry>
    <title>UEFI --- env 语法</title>
    <link href="http://example.com/2021/02/22/uefi/uefi_env/"/>
    <id>http://example.com/2021/02/22/uefi/uefi_env/</id>
    <published>2021-02-22T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.568Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><hr><p>好像都是定义的宏，要用项目的feature控制<br>类似如下： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EDK_GLOBAL  EMULATIO_XX_ONLY                          = NO</span><br><span class="line">EDK_GLOBAL  EMULATIO_XX_GIO_ONLY                      = YES</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;好像都是定义的宏，要用项目的feature控制&lt;br&gt;类似如下： &lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="uefi" scheme="http://example.com/categories/uefi/"/>
    
    
  </entry>
  
  <entry>
    <title>UEFI --- PCD 语法</title>
    <link href="http://example.com/2021/02/22/uefi/uefi_pcd/"/>
    <id>http://example.com/2021/02/22/uefi/uefi_pcd/</id>
    <published>2021-02-22T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.568Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="PCD"><a href="#PCD" class="headerlink" title="PCD"></a>PCD</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TokenSpaceGuidCName.PcdCName</span><br></pre></td></tr></table></figure><p>TokenSpaceGuidCName是一个GUID，PcdCName是一个变量名，两者合起来构成了唯一的PCD变量</p><p>PCD 变量有如下类型 （ 主要是访问方式不同 ）：</p><ul><li>FeatureFlag PCD：它最终返回的是一个TRUE或者FALSE，用于判断条件中；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[PcdsFeatureFlag]</span><br><span class="line">  gUefiOemPkgTokenSpaceGuid.PcdTestFeatureVar|FALSE|BOOLEAN|0x30000001</span><br><span class="line"></span><br><span class="line">访问： </span><br><span class="line">DEBUG ((EFI_D_ERROR, <span class="string">&quot;[beni]PcdTestBooleanVar: %d\n&quot;</span>, FeaturePcdGet (PcdTestFeatureVar)));</span><br><span class="line">DEBUG ((EFI_D_ERROR, <span class="string">&quot;[beni]PcdTestBooleanVar: %d\n&quot;</span>, PcdGetBool (PcdTestFeatureVar)));</span><br></pre></td></tr></table></figure></li><li>PatchableInModule PCD：这种变量的值可以在编译的时候确定，这个不算特别，特别的是它可以在编译完成的二进制文件上通过工具来修改值；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[PcdsPatchableInModule]</span><br><span class="line">gUefiOemPkgTokenSpaceGuid.PcdPatchableVar|0x00ABCDEF|UINT32|0x50000001</span><br><span class="line"></span><br><span class="line">DEBUG ((EFI_D_ERROR, <span class="string">&quot;[beni]PcdPatchableVar: 0x%x\n&quot;</span>, PcdGet32 (PcdPatchableVar)));</span><br></pre></td></tr></table></figure></li><li>FixedAtBuild PCD：静态值，在编译的时候确定，整个UEFI阶段不可变；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[PcdsFixedAtBuild]</span><br><span class="line">gUefiOemPkgTokenSpaceGuid.PcdTestVar1|0xA5|UINT8|0x20000001</span><br><span class="line">gUefiOemPkgTokenSpaceGuid.PcdTestVar2|0xA5A5|UINT16|0x20000002</span><br><span class="line">gUefiOemPkgTokenSpaceGuid.PcdTestVar3|0xA5A5A5A5|UINT32|0x20000003</span><br><span class="line">gUefiOemPkgTokenSpaceGuid.PcdTestVar4|0xA5A5A5A5A5A5A5A5|UINT64|0x20000004</span><br><span class="line"></span><br><span class="line">访问： </span><br><span class="line">DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar1: 0x%x.\n&quot;, PcdGet8 (PcdTestVar1)));</span><br><span class="line">DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar2: 0x%x.\n&quot;, PcdGet16 (PcdTestVar2)));</span><br><span class="line">DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar3: 0x%x.\n&quot;, PcdGet32 (PcdTestVar3)));</span><br><span class="line">DEBUG ((EFI_D_ERROR, &quot;[beni]PcdTestVar4: 0x%x.\n&quot;, PcdGet64 (PcdTestVar4)));</span><br></pre></td></tr></table></figure></li><li>Dynamic PCD：前面的三种类型可以认为是静态的PCD，而这里以及之后的是动态的PCD；它的特点是可以在UEFI运行的过程中通过Set宏来修改值；在《edk-ii-build-specification.pdf》中有说明该种类型的PCD必须在DSC中在列一遍，但是实际使用似乎并不是必须的；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[PcdsDynamic]</span><br><span class="line">gUefiOemPkgTokenSpaceGuid.PcdOemVersion|0xABCDDCBA|UINT32|0x40000001</span><br><span class="line"></span><br><span class="line">DEBUG ((EFI_D_ERROR, <span class="string">&quot;[beni]PcdOemVersion: 0x%x\n&quot;</span>, PcdGet32 (PcdOemVersion)));</span><br></pre></td></tr></table></figure></li><li>DynamicEx PCD：跟Dynamic PCD类似，算是加强版，使用宏PcdGetEx/PcdSetEx来访问变量；</li></ul><p>PCD变量值的类型： </p><ul><li>BOOLEAN类型</li><li>整型（UINT8，UINT16等）</li><li>VOID *类型</li></ul><p>example : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[PcdsDynamic]</span><br><span class="line">  gUefiOemPkgTokenSpaceGuid.PcdOemVersion|0xFFFFFFFF|UINT32|0x40000001</span><br></pre></td></tr></table></figure><ul><li>PcdsDynamic PCD类型</li><li>PcdOemVersion PCD变量名</li><li>0xFFFFFFFF default 值</li><li>UINT32 类型</li><li>0x40000001  token–&gt; Token是一个32位的整型，在DEC中每个PCD都有一个独一无二的Token</li></ul><p>PCD 读写值: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PcdGet32(PcdOemVersion))</span><br></pre></td></tr></table></figure><p>要使用读写函数，需要依赖pcd.inf模块：</p><p>Pcd.inf模块分为PEI和DXE两个版本，分别放在PEI阶段和DXE阶段的最前面，只有整个模块初始化完成之后，才能够开始正常使用PCD宏来访问Dynamic PCD变量。</p><p>以DXE阶段的Pcd.inf模块为例，它主要做了两件事情：</p><ol><li><p>初始化该阶段使用的PCD数据库；</p></li><li><p>安装各种处理PCD需要的Protocol；</p></li></ol><p>可能用到的protocol:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// This service abstracts the ability to set/get Platform Configuration Database (PCD).</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  PCD_PROTOCOL_SET_SKU              SetSku;</span><br><span class="line"> </span><br><span class="line">  PCD_PROTOCOL_GET8                 Get8;</span><br><span class="line">  PCD_PROTOCOL_GET16                Get16;</span><br><span class="line">  PCD_PROTOCOL_GET32                Get32;</span><br><span class="line">  PCD_PROTOCOL_GET64                Get64;</span><br><span class="line">  PCD_PROTOCOL_GET_POINTER          GetPtr;</span><br><span class="line">  PCD_PROTOCOL_GET_BOOLEAN          GetBool;</span><br><span class="line">  PCD_PROTOCOL_GET_SIZE             GetSize;</span><br><span class="line"> </span><br><span class="line">  PCD_PROTOCOL_GET_EX_8             Get8Ex;</span><br><span class="line">  PCD_PROTOCOL_GET_EX_16            Get16Ex;</span><br><span class="line">  PCD_PROTOCOL_GET_EX_32            Get32Ex;</span><br><span class="line">  PCD_PROTOCOL_GET_EX_64            Get64Ex;</span><br><span class="line">  PCD_PROTOCOL_GET_EX_POINTER       GetPtrEx;</span><br><span class="line">  PCD_PROTOCOL_GET_EX_BOOLEAN       GetBoolEx;</span><br><span class="line">  PCD_PROTOCOL_GET_EX_SIZE          GetSizeEx;</span><br><span class="line"> </span><br><span class="line">  PCD_PROTOCOL_SET8                 Set8;</span><br><span class="line">  PCD_PROTOCOL_SET16                Set16;</span><br><span class="line">  PCD_PROTOCOL_SET32                Set32;</span><br><span class="line">  PCD_PROTOCOL_SET64                Set64;</span><br><span class="line">  PCD_PROTOCOL_SET_POINTER          SetPtr;</span><br><span class="line">  PCD_PROTOCOL_SET_BOOLEAN          SetBool;</span><br><span class="line"> </span><br><span class="line">  PCD_PROTOCOL_SET_EX_8             Set8Ex;</span><br><span class="line">  PCD_PROTOCOL_SET_EX_16            Set16Ex;</span><br><span class="line">  PCD_PROTOCOL_SET_EX_32            Set32Ex;</span><br><span class="line">  PCD_PROTOCOL_SET_EX_64            Set64Ex;</span><br><span class="line">  PCD_PROTOCOL_SET_EX_POINTER       SetPtrEx;</span><br><span class="line">  PCD_PROTOCOL_SET_EX_BOOLEAN       SetBoolEx;</span><br><span class="line"> </span><br><span class="line">  PCD_PROTOCOL_CALLBACK_ONSET       CallbackOnSet;</span><br><span class="line">  PCD_PROTOCOL_CANCEL_CALLBACK      CancelCallback;</span><br><span class="line">  PCD_PROTOCOL_GET_NEXT_TOKEN       GetNextToken;</span><br><span class="line">  PCD_PROTOCOL_GET_NEXT_TOKENSPACE  GetNextTokenSpace;</span><br><span class="line">&#125; PCD_PROTOCOL;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;PCD&quot;&gt;&lt;a href=&quot;#PCD&quot; class=&quot;headerlink&quot; title=&quot;PCD&quot;&gt;&lt;/a&gt;PCD&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="uefi" scheme="http://example.com/categories/uefi/"/>
    
    
  </entry>
  
  <entry>
    <title>vim base operation</title>
    <link href="http://example.com/2021/02/10/vim/vim_base_operation/"/>
    <id>http://example.com/2021/02/10/vim/vim_base_operation/</id>
    <published>2021-02-10T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.568Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-getinstall vim// Ubuntu</span><br></pre></td></tr></table></figure><p>其他平台，可以自行谷歌。</p><hr><h3 id="新手指南"><a href="#新手指南" class="headerlink" title="新手指南"></a>新手指南</h3><hr><p>vimtutor// vim 教程<br>上面是史上最简单，最全面的Vim基础教程，至今无人超越。</p><p>下面是作者基于上面的归纳：</p><hr><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hjkl</span></span><br><span class="line"><span class="comment"># 2w 向前移动两个单词</span></span><br><span class="line"><span class="comment"># 3e 向前移动到第 3 个单词的末尾</span></span><br><span class="line"><span class="comment"># 0 移动到行首</span></span><br><span class="line"><span class="comment"># $ 当前行的末尾</span></span><br><span class="line"><span class="comment"># gg 文件第一行</span></span><br><span class="line"><span class="comment"># G 文件最后一行</span></span><br><span class="line"><span class="comment"># 行号+G 指定行</span></span><br><span class="line"><span class="comment"># &lt;ctrl&gt;+o 跳转回之前的位置</span></span><br><span class="line"><span class="comment"># &lt;ctrl&gt;+i 返回跳转之前的位置</span></span><br></pre></td></tr></table></figure><hr><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;esc&gt; 进入正常模式</span></span><br><span class="line"><span class="comment"># :q! 不保存退出</span></span><br><span class="line"><span class="comment"># :wq 保存后退出</span></span><br></pre></td></tr></table></figure><hr><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x 删除当前字符</span></span><br><span class="line"><span class="comment"># dw 删除至当前单词末尾</span></span><br><span class="line"><span class="comment"># de 删除至当前单词末尾，包括当前字符</span></span><br><span class="line"><span class="comment"># d$ 删除至当前行尾</span></span><br><span class="line"><span class="comment"># dd 删除整行</span></span><br><span class="line"><span class="comment"># 2dd 删除两行</span></span><br></pre></td></tr></table></figure><hr><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># i 插入文本</span></span><br><span class="line"><span class="comment"># A 当前行末尾添加</span></span><br><span class="line"><span class="comment"># r 替换当前字符</span></span><br><span class="line"><span class="comment"># o 打开新的一行并进入插入模式</span></span><br></pre></td></tr></table></figure><hr><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># u 撤销</span></span><br><span class="line"><span class="comment"># &lt;ctrl&gt;+r 取消撤销</span></span><br></pre></td></tr></table></figure><hr><h3 id="复制粘贴剪切"><a href="#复制粘贴剪切" class="headerlink" title="复制粘贴剪切"></a>复制粘贴剪切</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># v 进入可视模式</span></span><br><span class="line"><span class="comment"># y 复制</span></span><br><span class="line"><span class="comment"># p 粘贴</span></span><br><span class="line"><span class="comment"># yy 复制当前行</span></span><br><span class="line"><span class="comment"># dd 剪切当前行</span></span><br></pre></td></tr></table></figure><hr><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&lt;ctrl&gt;+g 显示当前行以及文件信息</span></span><br></pre></td></tr></table></figure><hr><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># / 正向查找（n：继续查找，N：相反方向继续查找）</span></span><br><span class="line"><span class="comment"># ？ 逆向查找</span></span><br><span class="line"><span class="comment"># % 查找配对的 &#123;，[，(</span></span><br><span class="line"><span class="comment"># :set ic 忽略大小写</span></span><br><span class="line"><span class="comment"># :set noic 取消忽略大小写</span></span><br><span class="line"><span class="comment"># :set hls 匹配项高亮显示</span></span><br><span class="line"><span class="comment"># :set is 显示部分匹配</span></span><br></pre></td></tr></table></figure><hr><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># :s/old/new 替换该行第一个匹配串</span></span><br><span class="line"><span class="comment"># :s/old/new/g 替换全行的匹配串</span></span><br><span class="line"><span class="comment"># :%s/old/new/g 替换整个文件的匹配串</span></span><br></pre></td></tr></table></figure><hr><h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zc 折叠</span></span><br><span class="line"><span class="comment"># zC 折叠所有嵌套</span></span><br><span class="line"><span class="comment"># zo 展开折叠</span></span><br><span class="line"><span class="comment"># zO 展开所有折叠嵌套</span></span><br></pre></td></tr></table></figure><hr><h3 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:!shell 执行外部命令</span><br><span class="line">.vimrc</span><br><span class="line">.vimrc 是 Vim 的配置文件，需要我们自己创建：</span><br></pre></td></tr></table></figure><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/<span class="built_in">autoload</span>/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h3 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.<span class="built_in">local</span>/share/nvim/site/<span class="built_in">autoload</span>/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line">其他平台，可以查看 vim-plug[1]。</span><br></pre></td></tr></table></figure><hr><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><hr><p>cd Home               // 进入 Home 目录<br>touch .vimrc          // 配置文件</p><h3 id="取消备份"><a href="#取消备份" class="headerlink" title="取消备份"></a>取消备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nobackup</span><br><span class="line"><span class="built_in">set</span> noswapfile</span><br></pre></td></tr></table></figure><h3 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setencoding=utf-8</span><br></pre></td></tr></table></figure><h3 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnumber</span><br></pre></td></tr></table></figure><h3 id="取消换行"><a href="#取消换行" class="headerlink" title="取消换行"></a>取消换行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnowrap</span><br></pre></td></tr></table></figure><h3 id="显示光标当前位置"><a href="#显示光标当前位置" class="headerlink" title="显示光标当前位置"></a>显示光标当前位置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setruler</span><br></pre></td></tr></table></figure><h3 id="设置缩进"><a href="#设置缩进" class="headerlink" title="设置缩进"></a>设置缩进</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> cindent</span><br><span class="line"><span class="built_in">set</span> tabstop=2</span><br><span class="line"><span class="built_in">set</span> shiftwidth=2</span><br></pre></td></tr></table></figure><h3 id="突出显示当前行"><a href="#突出显示当前行" class="headerlink" title="突出显示当前行"></a>突出显示当前行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcursorline</span><br></pre></td></tr></table></figure><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> ic</span><br><span class="line"><span class="built_in">set</span> hls</span><br><span class="line"><span class="built_in">set</span> is</span><br></pre></td></tr></table></figure><h3 id="左下角显示当前vim模式"><a href="#左下角显示当前vim模式" class="headerlink" title="左下角显示当前vim模式"></a>左下角显示当前vim模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setshowmode</span><br></pre></td></tr></table></figure><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动 vim 时关闭折叠代码</span></span><br><span class="line"><span class="built_in">set</span> nofoldenable</span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syntax <span class="built_in">enable</span></span><br><span class="line"><span class="built_in">set</span> background=dark</span><br><span class="line">colorscheme solarized</span><br></pre></td></tr></table></figure><p>◈ altercation/vim-colors-solarized<a href="https://github.com/altercation/vim-colors-solarized">2</a><br>◈ Anthony25/gnome-terminal-colors-solarized<a href="https://github.com/Anthony25/gnome-terminal-colors-solarized">3</a></p><hr><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><hr><hr><h3 id="树形目录"><a href="#树形目录" class="headerlink" title="树形目录"></a>树形目录</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;jistr/vim-nerdtree-tabs&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line">autocmd vimenter * NERDTree</span><br><span class="line">map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"><span class="built_in">let</span> NERDTreeShowHidden=1</span><br><span class="line"><span class="built_in">let</span> g:NERDTreeShowIgnoredStatus = 1</span><br><span class="line"><span class="built_in">let</span> g:nerdtree_tabs_open_on_console_startup=1</span><br><span class="line"><span class="built_in">let</span> g:NERDTreeIndicatorMapCustom = &#123;</span><br><span class="line">    \ <span class="string">&quot;Modified&quot;</span>  : <span class="string">&quot;✹&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Staged&quot;</span>    : <span class="string">&quot;✚&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Untracked&quot;</span> : <span class="string">&quot;✭&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Renamed&quot;</span>   : <span class="string">&quot;➜&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unmerged&quot;</span>  : <span class="string">&quot;═&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Deleted&quot;</span>   : <span class="string">&quot;✖&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Dirty&quot;</span>     : <span class="string">&quot;✗&quot;</span>,</span><br><span class="line">    \ <span class="string">&quot;Clean&quot;</span>     : <span class="string">&quot;✔︎&quot;</span>,</span><br><span class="line">    \ <span class="string">&#x27;Ignored&#x27;</span>   : <span class="string">&#x27;☒&#x27;</span>,</span><br><span class="line">    \ <span class="string">&quot;Unknown&quot;</span>   : <span class="string">&quot;?&quot;</span></span><br><span class="line">    \ &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># o 打开关闭文件或目录</span></span><br><span class="line"><span class="comment"># e 以文件管理的方式打开选中的目录</span></span><br><span class="line"><span class="comment"># t 在标签页中打开</span></span><br><span class="line"><span class="comment"># T 在标签页中打开，但光标仍然留在 NERDTree</span></span><br><span class="line"><span class="comment"># r 刷新光标所在的目录</span></span><br><span class="line"><span class="comment"># R 刷新当前根路径</span></span><br><span class="line"><span class="comment"># X 收起所有目录</span></span><br><span class="line"><span class="comment"># p 小写，跳转到光标所在的上一级路径</span></span><br><span class="line"><span class="comment"># P 大写，跳转到当前根路径</span></span><br><span class="line"><span class="comment"># J 到第一个节点</span></span><br><span class="line"><span class="comment"># K 到最后一个节点</span></span><br><span class="line"><span class="comment"># I 显示隐藏文件</span></span><br><span class="line"><span class="comment"># m 显示文件操作菜单</span></span><br><span class="line"><span class="comment"># C 将根路径设置为光标所在的目录</span></span><br><span class="line"><span class="comment"># u 设置上级目录为根路径</span></span><br><span class="line"><span class="comment"># ctrl + w + w 光标自动在左右侧窗口切换</span></span><br><span class="line"><span class="comment"># ctrl + w + r 移动当前窗口的布局位置</span></span><br><span class="line"><span class="comment"># :tabc 关闭当前的 tab</span></span><br><span class="line"><span class="comment"># :tabo   关闭所有其他的 tab</span></span><br><span class="line"><span class="comment"># :tabp   前一个 tab</span></span><br><span class="line"><span class="comment"># :tabn   后一个 tab</span></span><br><span class="line"><span class="comment"># gT      前一个 tab</span></span><br><span class="line"><span class="comment"># gt      后一个 tab</span></span><br></pre></td></tr></table></figure><p>◈ scrooloose/nerdtree<a href="https://github.com/scrooloose/nerdtree">4</a><br>◈ vim-nerdtree-tabs<a href="https://github.com/jistr/vim-nerdtree-tabs">5</a><br>◈ nerdtree-git-plugin<a href="https://github.com/Xuyuanp/nerdtree-git-plugin">6</a></p><h3 id="代码，引号，路径补全"><a href="#代码，引号，路径补全" class="headerlink" title="代码，引号，路径补全"></a>代码，引号，路径补全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;Valloric/YouCompleteMe&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Raimondi/delimitMate&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;Shougo/deoplete.nvim&#x27;</span>, &#123; <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;:UpdateRemotePlugins&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p>◈ Valloric/YouCompleteMe<a href="https://github.com/Valloric/YouCompleteMe">7</a><br>◈ Raimondi/delimitMate<a href="https://github.com/Raimondi/delimitMate">8</a><br>◈ Shougo/deoplete.nvim<a href="https://github.com/Shougo/deoplete.nvim">9</a></p><h3 id="语法高亮，检查"><a href="#语法高亮，检查" class="headerlink" title="语法高亮，检查"></a>语法高亮，检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;sheerun/vim-polyglot&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;w0rp/ale&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:ale_linters = &#123;</span><br><span class="line">\    <span class="string">&#x27;javascript&#x27;</span>: [<span class="string">&#x27;eslint&#x27;</span>],</span><br><span class="line">\    <span class="string">&#x27;css&#x27;</span>: [<span class="string">&#x27;stylelint&#x27;</span>],</span><br><span class="line">\&#125;</span><br><span class="line"><span class="built_in">let</span> g:ale_fixers = &#123;</span><br><span class="line">\    <span class="string">&#x27;javascript&#x27;</span>: [<span class="string">&#x27;eslint&#x27;</span>],</span><br><span class="line">\    <span class="string">&#x27;css&#x27;</span>: [<span class="string">&#x27;stylelint&#x27;</span>],</span><br><span class="line">\&#125;</span><br><span class="line"><span class="built_in">let</span> g:ale_fix_on_save = 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:ale_sign_column_always = 1</span><br><span class="line"><span class="built_in">let</span> g:ale_sign_error = <span class="string">&#x27;●&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:ale_sign_warning = <span class="string">&#x27;▶&#x27;</span></span><br><span class="line"></span><br><span class="line">nmap &lt;silent&gt; &lt;C-k&gt; &lt;Plug&gt;(ale_previous_wrap)</span><br><span class="line">nmap &lt;silent&gt; &lt;C-j&gt; &lt;Plug&gt;(ale_next_wrap)</span><br></pre></td></tr></table></figure><p>◈ w0rp/ale<a href="https://github.com/w0rp/ale">10</a><br>◈ sheerun/vim-polyglot<a href="https://github.com/sheerun/vim-polyglot">11</a></p><h3 id="文件，代码搜索"><a href="#文件，代码搜索" class="headerlink" title="文件，代码搜索"></a>文件，代码搜索</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;rking/ag.vim&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;kien/ctrlp.vim&#x27;</span></span><br></pre></td></tr></table></figure><p>◈ kien/ctrlp.vim<a href="https://github.com/kien/ctrlp.vim">12</a><br>◈ ggreer/the_silver_searcher<a href="https://github.com/ggreer/the_silver_searcher">13</a><br>◈ rking/ag.vim<a href="https://github.com/rking/ag.vim">14</a></p><h3 id="加强版状态栏"><a href="#加强版状态栏" class="headerlink" title="加强版状态栏"></a>加强版状态栏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:airline_theme=<span class="string">&#x27;papercolor&#x27;</span></span><br></pre></td></tr></table></figure><p>◈ vim-airline/vim-airline<a href="https://github.com/vim-airline/vim-airline">15</a><br>◈ vim-airline/vim-airline-themes<a href="https://github.com/vim-airline/vim-airline-themes">16</a></p><h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;scrooloose/nerdcommenter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;leader&gt;cc // 注释</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;cm 只用一组符号注释</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;cA 在行尾添加注释</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;c$ /* 注释 */</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;cs /* 块注释 */</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;cy 注释并复制</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;c&lt;space&gt; 注释/取消注释</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;ca 切换　// 和 /* */</span></span><br><span class="line"><span class="comment"># &lt;leader&gt;cu 取消注释</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:NERDSpaceDelims = 1</span><br><span class="line"><span class="built_in">let</span> g:NERDDefaultAlign = <span class="string">&#x27;left&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:NERDCustomDelimiters = &#123;</span><br><span class="line">            \ <span class="string">&#x27;javascript&#x27;</span>: &#123; <span class="string">&#x27;left&#x27;</span>: <span class="string">&#x27;//&#x27;</span>, <span class="string">&#x27;leftAlt&#x27;</span>: <span class="string">&#x27;/**&#x27;</span>, <span class="string">&#x27;rightAlt&#x27;</span>: <span class="string">&#x27;*/&#x27;</span> &#125;,</span><br><span class="line">            \ <span class="string">&#x27;less&#x27;</span>: &#123; <span class="string">&#x27;left&#x27;</span>: <span class="string">&#x27;/**&#x27;</span>, <span class="string">&#x27;right&#x27;</span>: <span class="string">&#x27;*/&#x27;</span> &#125;</span><br><span class="line">        \ &#125;</span><br></pre></td></tr></table></figure><p>◈ scrooloose/nerdcommenter<a href="https://github.com/scrooloose/nerdcommenter">17</a></p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;airblade/vim-gitgutter&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br></pre></td></tr></table></figure><p>◈ airblade/vim-gitgutter<a href="https://github.com/airblade/vim-gitgutter">18</a><br>◈ tpope/vim-fugitive<a href="https://github.com/tpope/vim-fugitive">19</a></p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;suan/vim-instant-markdown&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:instant_markdown_slow = 1</span><br><span class="line"><span class="built_in">let</span> g:instant_markdown_autostart = 0</span><br><span class="line"><span class="comment"># :InstantMarkdownPreview</span></span><br></pre></td></tr></table></figure><p>◈ suan/vim-instant-markdown<a href="https://github.com/suan/vim-instant-markdown">20</a></p><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;mattn/emmet-vim&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:user_emmet_leader_key=<span class="string">&#x27;&lt;Tab&gt;&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:user_emmet_settings = &#123;</span><br><span class="line">         \ <span class="string">&#x27;javascript.jsx&#x27;</span> : &#123;</span><br><span class="line">            \ <span class="string">&#x27;extends&#x27;</span> : <span class="string">&#x27;jsx&#x27;</span>,</span><br><span class="line">         \ &#125;,</span><br><span class="line">      \ &#125;</span><br></pre></td></tr></table></figure><p>◈ mattn/emmet-vim<a href="https://github.com/mattn/emmet-vim">21</a></p><h3 id="html-5"><a href="#html-5" class="headerlink" title="html 5"></a>html 5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug<span class="string">&#x27;othree/html5.vim&#x27;</span></span><br></pre></td></tr></table></figure><p>◈ othree/html5.vim<a href="https://github.com/othree/html5.vim">22</a></p><h3 id="css-3"><a href="#css-3" class="headerlink" title="css 3"></a>css 3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;hail2u/vim-css3-syntax&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;ap/vim-css-color&#x27;</span></span><br><span class="line"></span><br><span class="line">augroup VimCSS3Syntax</span><br><span class="line">  autocmd!</span><br><span class="line"></span><br><span class="line">  autocmd FileType css setlocal iskeyword+=-</span><br><span class="line">augroup END</span><br></pre></td></tr></table></figure><p>◈ hail2u/vim-css3-syntax<a href="https://github.com/hail2u/vim-css3-syntax">23</a><br>◈ ap/vim-css-color<a href="https://github.com/ap/vim-css-color">24</a></p><h3 id="JavaScipt"><a href="#JavaScipt" class="headerlink" title="JavaScipt"></a>JavaScipt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;pangloss/vim-javascript&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_plugin_jsdoc = 1</span><br><span class="line"><span class="built_in">let</span> g:javascript_plugin_ngdoc = 1</span><br><span class="line"><span class="built_in">let</span> g:javascript_plugin_flow = 1</span><br><span class="line"><span class="built_in">set</span> foldmethod=syntax</span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_function             = <span class="string">&quot;ƒ&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_null                 = <span class="string">&quot;ø&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_this                 = <span class="string">&quot;@&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_return               = <span class="string">&quot;⇚&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_undefined            = <span class="string">&quot;¿&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_NaN                  = <span class="string">&quot;ℕ&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_prototype            = <span class="string">&quot;¶&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_static               = <span class="string">&quot;•&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_super                = <span class="string">&quot;Ω&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_arrow_function       = <span class="string">&quot;⇒&quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_noarg_arrow_function = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">let</span> g:javascript_conceal_underscore_arrow_function = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">set</span> conceallevel=1</span><br></pre></td></tr></table></figure><p>◈ pangloss/vim-javascript<a href="https://github.com/pangloss/vim-javascript">25</a><br>（注：上述脚本中存在特殊字符，有的情况下显示不正确，请直接用上述链接的内容。）</p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;mxw/vim-jsx&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:jsx_ext_required = 0</span><br></pre></td></tr></table></figure><p>◈ mxw/vim-jsx<a href="https://github.com/mxw/vim-jsx">26</a></p><h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;prettier/vim-prettier&#x27;</span>, &#123;</span><br><span class="line">  \ <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;yarn install&#x27;</span>,</span><br><span class="line">  \ <span class="string">&#x27;for&#x27;</span>: [<span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;typescript&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;scss&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;graphql&#x27;</span>] &#125;</span><br><span class="line"><span class="built_in">let</span> g:prettier<span class="comment">#config#bracket_spacing = &#x27;true&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:prettier<span class="comment">#config#jsx_bracket_same_line = &#x27;false&#x27;</span></span><br><span class="line"><span class="built_in">let</span> g:prettier<span class="comment">#autoformat = 0</span></span><br><span class="line">autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql PrettierAsync</span><br><span class="line"><span class="comment"># :Prettier</span></span><br></pre></td></tr></table></figure><p>◈ prettier/vim-prettier<a href="https://github.com/prettier/vim-prettier">27</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后，呈上参考配置 .vimrc<a href="https://github.com/FengShangWuQi/to-vim/blob/master/.vimrc">28</a>，如果关于 vim 有更好的 idea，欢迎在评论中交流。</p><hr><h3 id="My-vimrc-config"><a href="#My-vimrc-config" class="headerlink" title="My vimrc config"></a>My vimrc config</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> ts=2</span><br><span class="line"><span class="built_in">set</span> hlsearch </span><br><span class="line"><span class="built_in">set</span> et</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"></span><br><span class="line">noremap &lt;A-up&gt; :call feedkeys( line(<span class="string">&#x27;.&#x27;</span>)==1 ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;ddkP&#x27;</span> )&lt;CR&gt;</span><br><span class="line">noremap &lt;A-down&gt; ddp</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; tags 设置</span></span><br><span class="line"><span class="string">set tags=tags;</span></span><br><span class="line"><span class="string">    set autochdir</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if has(&quot;</span>cscope<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    set csprg=/usr/bin/cscope</span></span><br><span class="line"><span class="string">    &quot;</span>指定用来执行 cscope 的命令</span><br><span class="line">    <span class="built_in">set</span> csto=1</span><br><span class="line">    <span class="string">&quot;先搜索tags标签文件,再搜索cscope数据库</span></span><br><span class="line"><span class="string">    set cst</span></span><br><span class="line"><span class="string">    &quot;</span>使用|:cstag|(:cs find g),而不是缺省的:tag</span><br><span class="line">    <span class="built_in">set</span> nocsverb</span><br><span class="line">    <span class="string">&quot;不显示添加数据库是否成功</span></span><br><span class="line"><span class="string">    &quot;</span> add any database <span class="keyword">in</span> current directory</span><br><span class="line">    <span class="keyword">if</span> filereadable(<span class="string">&quot;cscope.out&quot;</span>)</span><br><span class="line">        cs add cscope.out</span><br><span class="line">    <span class="string">&quot;添加cscope数据库</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">    &quot;</span>显示添加成功与否</span><br><span class="line">    <span class="built_in">set</span> csverb</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">:<span class="built_in">set</span> cscopequickfix=s-,c-,d-,i-,t-,e-</span><br><span class="line"></span><br><span class="line">nmap &lt;C-\&gt;s :cs find s &lt;C-R&gt;=expand(<span class="string">&quot;&lt;cword&gt;&quot;</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;g :cs find g &lt;C-R&gt;=expand(<span class="string">&quot;&lt;cword&gt;&quot;</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;c :cs find c &lt;C-R&gt;=expand(<span class="string">&quot;&lt;cword&gt;&quot;</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;t :cs find t &lt;C-R&gt;=expand(<span class="string">&quot;&lt;cword&gt;&quot;</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;e :cs find e &lt;C-R&gt;=expand(<span class="string">&quot;&lt;cword&gt;&quot;</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;f :cs find f &lt;C-R&gt;=expand(<span class="string">&quot;&lt;cfile&gt;&quot;</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;i :cs find i ^&lt;C-R&gt;=expand(<span class="string">&quot;&lt;cfile&gt;&quot;</span>)&lt;CR&gt;$&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;d :cs find d &lt;C-R&gt;=expand(<span class="string">&quot;&lt;cword&gt;&quot;</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; quick exit </span></span><br><span class="line"><span class="string">nmap &lt;ESC&gt; :wq</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">syntax on</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set nocp</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="vim" scheme="http://example.com/categories/vim/"/>
    
    
  </entry>
  
  <entry>
    <title>interview</title>
    <link href="http://example.com/2021/02/09/interview/interview/"/>
    <id>http://example.com/2021/02/09/interview/interview/</id>
    <published>2021-02-09T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><hr><p>中断分为上半部和下半部，上半部关中断；下半部开中断，处理可以延迟的事情。下半部有workqueue/softirq/tasklet三种方式<br>顶半部，硬件作答，快速响应<br>底半部，延时执行</p><hr><h3 id="local-irq-disable和disable-irq区别："><a href="#local-irq-disable和disable-irq区别：" class="headerlink" title="local_irq_disable和disable_irq区别："></a>local_irq_disable和disable_irq区别：</h3><hr><hr><h3 id="workquence"><a href="#workquence" class="headerlink" title="workquence"></a>workquence</h3><hr><p>工作队列允许重新调度甚至是睡眠,<br>workqueue_struct d-&gt;work<br>INIT_WORK(&amp;d-&gt;work, work_task);<br>schedule_work(&amp;d-&gt;work); 指定cpu<br>destroy_workqueue()</p><hr><h3 id="softirq"><a href="#softirq" class="headerlink" title="softirq"></a>softirq</h3><hr><p>无法sleep<br>静态定义软中断数组softirq_vec, 存放各自的中断处理函数softirq_action<br>    每个CPU都有一个这样的数组，谁发起，谁执行<br>    内核限制32个， 如mac_tx, mac_rx, tasklet, 定时器<br>使用：<br>    void open_softirq(int nr, void (*action)(struct softirq_action *))   添加中断回调函数。<br>    raise_softirq() 触发软中断 ，就是在pre-cpu变量__softirq_pending上置位。然后local_softirq_pending() 检测那些pending， 执行invoke_softirq()<br>        如果多个softirq pending, 按数组顺序执行。<br>    网络收发软中断有超时机制，和次数限制。</p><hr><h3 id="tasklet-演示40ms"><a href="#tasklet-演示40ms" class="headerlink" title="tasklet 演示40ms"></a>tasklet 演示40ms</h3><hr><p>无法睡眠<br>pre-cpu 维护一tasklet list , tasklet一旦挂入一个cpu的tasklet表，就只会在该cpu上运行，哪怕被重新调度<br>使用：<br>    DECLARE_TASKLET(&amp;port-&gt;tasklet, callback, data)<br>    tasklet_schedule(&amp;port-&gt;tasklet);<br>    tasklet_kill(&amp;port-&gt;tasklet);<br>        tasklet_disable(&amp;port-&gt;tasklet);只用于disable tasklet , 而local_bh_disable/enable 是disable bh 操作 softirq/tasklet.<br>        tasklet_enable(&amp;port-&gt;tasklet);</p><hr><h3 id="runqueue"><a href="#runqueue" class="headerlink" title="runqueue"></a>runqueue</h3><hr><p>linux 就绪队列struct runqueue，每个CPU都有一个执行队列，队列中以work的形式执行每个任务。</p><hr><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><hr><p>进程切换，有能力挂起正在CPU上执行的进程，和恢复执行。<br>进程调度由schedule()函数实现</p><hr><h3 id="complete-进程同步机制"><a href="#complete-进程同步机制" class="headerlink" title="complete 进程同步机制"></a>complete 进程同步机制</h3><hr><p>struct completion {<br>    unsigned int done;/<em>用于同步的原子量</em>/    类似信号量，等待一个减1<br>    wait_queue_head_t wait;/<em>等待事件队列</em>/<br>};<br>用法：<br>    这个变量可以静态地声明和初始化：<br>    DECLARE_COMPLETION(my_comp);<br>    或者动态初始化：<br>    struct completion my_comp;<br>    init_completion(&amp;my_comp);<br>    wait_for_completion(struct completion *comp);等待其他事件完成 ， 将当前进程放入wait quence尾，sch超时唤醒后，循环检测done是否可用<br>        其他事件完成后调用complete(struct completion *comp); 唤醒等待该事件的所在进程</p><hr><h3 id="notify-机制，-模块之间通信"><a href="#notify-机制，-模块之间通信" class="headerlink" title="notify 机制， 模块之间通信"></a>notify 机制， 模块之间通信</h3><hr><p>struct notifier_block<br>{<br>    int (*notifier_call)(struct notifier_block *self, unsigned long, void *);<br>    struct notifier_block *next;<br>    int priority;<br>};<br>notifier_chain_register<br>notifier_call_chain</p><hr><h3 id="devicefs"><a href="#devicefs" class="headerlink" title="devicefs"></a>devicefs</h3><hr><p>DEVICE_ATTR  需要绑定设备<br>struct device_attribute {<br>    struct attribute    attr;<br>    ssize_t (*show)(struct device *dev, struct device_attribute *attr,char *buf);<br>    ssize_t (*store)(struct device *dev, struct device_attribute *attr,const char *buf, size_t count);<br>};<br>DEVICE_ATTR  实现一些这样的设备属性结构<br>sysfs_create_file(&amp;mydevice-&gt;kobj, &amp;dev_attr_mydevice.attr);  绑定设备与设备属性</p><hr><h3 id="debugfs"><a href="#debugfs" class="headerlink" title="debugfs"></a>debugfs</h3><hr><p>无需绑定设备，mount debugfs 之后就可以在该目录下找到我们的节点<br>debugfs_create_dir(const char *name, struct dentry *parent);<br>debugfs_create_file(“stats”, S_IRUGO | S_IWUSR, client-&gt;debugfs,client, &amp;debugfs_stats_ops);  绑定文件和函数操作集合</p><hr><h3 id="Cmake-mafile工程的构建工具"><a href="#Cmake-mafile工程的构建工具" class="headerlink" title="Cmake mafile工程的构建工具"></a>Cmake mafile工程的构建工具</h3><hr><p>简单语法：<br>    include_directories (“${PROJECT_SOURCE_DIR}/MathFunctions”) 添加include<br>    add_subdirectory (MathFunctions)   添加子目录<br>    add_executable (Tutorial tutorial.cxx)   定义一个可执行文件，以及依赖的源文件<br>    target_link_libraries (Tutorial MathFunctions)  链接库</p><hr><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><hr><p>$@  表示目标文件<br>$^  表示所有的依赖文件<br>$&lt;  表示第一个依赖文件<br>$?  表示比目标还要新的依赖文件列表</p><hr><h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><hr><hr><h3 id="锁的使用："><a href="#锁的使用：" class="headerlink" title="锁的使用："></a>锁的使用：</h3><hr><p>spinlock:<br>    死等，或者挂起当前进程<br>    一次只有一个thread获取锁<br>    因为可以睡眠，所以可以在BH中使用。<br>使用：<br>    spin_lock   关闭内核抢占，也就是说同时只能一个进程获取这个锁，不关闭的，其他的进程抢占，抢占之后发现需要之前的进程解锁才能继续执行，就会导致死锁。<br>    spin_lock_bh  spin_lock_softirq 加了这把锁，本地软中断会被禁用。<br>        使用场景： 比如配合tasklet，害怕被软中断sch，又请求锁住的资源，造成死锁。<br>    spin_lock_irq  加了这把锁，本地软中断会被禁用。本地hard irq会被禁用。<br>    spin_lock_irqsave 禁用本地hard irq ， 但是会保存中断状态，配合spin_unlock_irqrestore 进入退出，还原中断状态。<br>    spin_lock_nested 为了配合lockdep 机制，防止误报重复上锁的</p><hr><h3 id="互斥锁mutex，-锁住线程共享资源"><a href="#互斥锁mutex，-锁住线程共享资源" class="headerlink" title="互斥锁mutex， 锁住线程共享资源"></a>互斥锁mutex， 锁住线程共享资源</h3><hr><p>pthread_mutex_lock 无法获取该所示，进入阻塞（睡眠，这些睡眠的线程会排队访问互斥量），pthread_mutex_trylock 就不会阻塞，直接返回ebusy</p><hr><h3 id="读写锁rwlock"><a href="#读写锁rwlock" class="headerlink" title="读写锁rwlock"></a>读写锁rwlock</h3><hr><p>pthread_rwlock_rdlock(pthread_rwlock_t *rwpt);<br>pthread_rwlock_wrlock(pthread_rwlock_t *rwpt);<br>pthread_rwlock_unlock(pthread_rwlock_t *rwpt);</p><hr><h3 id="死锁的例子"><a href="#死锁的例子" class="headerlink" title="死锁的例子"></a>死锁的例子</h3><hr><p>2个线程持有2把锁，交叉互锁，出现死锁。</p><hr><h3 id="进程空间"><a href="#进程空间" class="headerlink" title="进程空间"></a>进程空间</h3><hr><p>进程为什么是4G寻址空间， 一个指针是4字节 32位，寻址能力是2的32次方，是4G.<br>32位linux , 一个进程空间4G，内核占1G，用户留3G，一个线程默认8M(但是因为还要包括 栈区，txt,data， heap 所以实际是大概6M)，所以最多380个左右线程<br>进程栈16K.<br>虚拟空间的3G还要分区：<br>    ①栈空间：特点是由系统管理，先进后出，里面放了局部变量、函数形参、自动变量。<br>    ②堆空间：特点是由用户管理，先进后出，我们可以用malloc、ralloc、calloc来分配空间。<br>        alloc(sizeof(int));  物理连续内存<br>        vmalloc属性：可能睡眠、虚拟地址连续、物理地址不连续、size对齐到页；所以不适合小内存分配，开销较大。<br>        realloc(p, SIZE * 2); 为已经分配空间的指针重新分配空间。<br>            如果新的空间小于旧的空间，则指针不变，<br>            如果大于， 则申请更大空间，然后拷贝原来的内容， 清空就的指针空间。<br>        calloc(SIZE, sizeof(int));  和malloc 一样，但是会全部初始化为0,不需要memset.<br>    ③数据段：数据段里面又分三块，第一块是bss，保存未初始化的全局变量；第二块是rodata，保存了常量；第三块  是.data（静态数据区）保存了初始化的全局变量还有static修饰的变量。<br>    ④代码段：存放了源代码。</p><hr><h3 id="kernel-userspace-空间"><a href="#kernel-userspace-空间" class="headerlink" title="kernel/userspace 空间"></a>kernel/userspace 空间</h3><hr><p>kernel 空间分区<br>userspace 空间分区</p><hr><h3 id="arm-终端流程："><a href="#arm-终端流程：" class="headerlink" title="arm 终端流程："></a>arm 终端流程：</h3><hr><p>中断流程， A系列不支持中断嵌套 M系列支持<br>    进入中断<br>        保存CPSR到对应cpu的SPSR_mode<br>        关中断<br>        切换到异常状态<br>        保存PC到LR<br>        设置PC到中断向量表中的对应处理函数地址中<br>    恢复中断<br>        恢复 SPSR_mode 到 CPSR<br>        恢复 lr_mode 到 PC<br>        恢复普通寄存器：R0-R7，操作sp将栈中将数据恢复。</p><hr><h3 id="devmem"><a href="#devmem" class="headerlink" title="devmem"></a>devmem</h3><hr><p>访问dts定义的内存范围内的外设寄存器访问，操作的是物理寄存器</p><hr><h3 id="物理内存，虚拟内存如何组织映射。"><a href="#物理内存，虚拟内存如何组织映射。" class="headerlink" title="物理内存，虚拟内存如何组织映射。"></a>物理内存，虚拟内存如何组织映射。</h3><hr><p>虚拟地址空间比可用的物理内存大很多，因此只有最常用的部分才与物理页帧关联<br>这不是问题，因为大多数程序只占用实际可用内存的一小部分</p><hr><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><hr><p>指针在被定义的时候，如果程序不对其进行初始化的话，它会随机指向一个区域，不能判断是否为NULL。</p><hr><h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h3><hr><hr><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h3><hr><hr><h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><hr><hr><h3 id="排序算法有哪些"><a href="#排序算法有哪些" class="headerlink" title="排序算法有哪些"></a>排序算法有哪些</h3><hr><p>冒泡排序<br>选择排序<br>插入排序<br>希尔排序<br>归并排序<br>    迭代法<br>    递归法<br>快速排序<br>    迭代法<br>    递归法</p><hr><h3 id="c-函数型参处于那个内存空间-（可以尝试从汇编调用函数开始理解）"><a href="#c-函数型参处于那个内存空间-（可以尝试从汇编调用函数开始理解）" class="headerlink" title="c 函数型参处于那个内存空间 （可以尝试从汇编调用函数开始理解）"></a>c 函数型参处于那个内存空间 （可以尝试从汇编调用函数开始理解）</h3><hr><p>  形参的传递在arm架构中，如果你的参数少于三个，则是通过R0或R0、R1或R0、R1、R2传递过去的，如果多余三个则是多出来的是通过堆栈传递的<br>  实参是放栈上的<br>  行参是一个占位符，它没有数据<br>  发生函数调用时，实参的值会传递给形参<br>  形参和实参虽然可以同名，但它们之间是相互独立的，互不影响，因为实参在函数外部有效，而形参在函数内部有效。<br>  函数返回值将会又主函数开辟一个临时的新的内存空间来保存</p><p>如下例子：x86平台上，前3个参数传递给了 core 寄存器，就是arm中的R0/R1/R2通用寄存器，后面的参数压栈了</p><p><img src="c_canshu.png"></p><hr><h3 id="2分法查找"><a href="#2分法查找" class="headerlink" title="2分法查找"></a>2分法查找</h3><hr><hr><h3 id="AT-命令"><a href="#AT-命令" class="headerlink" title="AT 命令"></a>AT 命令</h3><hr><hr><h3 id="lcd-原理"><a href="#lcd-原理" class="headerlink" title="lcd 原理"></a>lcd 原理</h3><hr><hr><h3 id="frambuffer-机制"><a href="#frambuffer-机制" class="headerlink" title="frambuffer 机制"></a>frambuffer 机制</h3><hr><hr><h3 id="http-ftp-TCP-IP-协议"><a href="#http-ftp-TCP-IP-协议" class="headerlink" title="http ftp TCP/IP 协议"></a>http ftp TCP/IP 协议</h3><hr><hr><h3 id="spsr"><a href="#spsr" class="headerlink" title="spsr"></a>spsr</h3><hr><p>cpsr[31:28/条件标志，执行汇编的算数运算时，表示运算结果]<br>NZCV<br>[27:8] 保留<br>[7：5 | 7:I/irq使能  6:F/快中断 5：T状态位，arm/thumb] t=1 强制进入未定义指令中断<br>[4:0] 模式</p><hr><h3 id="物理-虚拟地址映射"><a href="#物理-虚拟地址映射" class="headerlink" title="物理/虚拟地址映射"></a>物理/虚拟地址映射</h3><hr><p>32位linux总地址4G 一级页表页大小4K, 共4G/4k个页，<br>每1M个页组成1个页目录，1M个页目录是一个固定入口地址， 存在CR3 中。<br>二级页表存储1M页目录 页目录地址-&gt; CR3寄存器<br>一个虚拟地址的组成：<br>    DIRECTORY [22：31] 可表示1024个页目录（PGD）<br>    TABLE[12：21] 可表示1024个页表（PTE)<br>    OFFSET[22：31] 可表示4096个物理内存</p><hr><h3 id="copy-to-user-copy-form-user"><a href="#copy-to-user-copy-form-user" class="headerlink" title="copy_to_user/copy_form_user"></a>copy_to_user/copy_form_user</h3><hr><p>虚拟内存地址对应的物理内存与内核虚拟内存地址对应的物理内存</p><hr><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><hr><p>用户空间虚拟地址与物理地址的map 目标是在用户空间访问硬件，所有可以省去映射到kernel虚拟空间这一步。</p><hr><h3 id="ioremap"><a href="#ioremap" class="headerlink" title="ioremap"></a>ioremap</h3><hr><p>内核空间虚拟地址与物理地址的map</p><hr><h3 id="IPC-机制"><a href="#IPC-机制" class="headerlink" title="IPC 机制"></a>IPC 机制</h3><hr><hr><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><hr><hr><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><hr><hr><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><hr><hr><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><hr><hr><h3 id="itouch"><a href="#itouch" class="headerlink" title="itouch"></a>itouch</h3><hr><p>hexgon SDK running time logger , fastRPC</p><hr><h3 id="TDDI-时序同步"><a href="#TDDI-时序同步" class="headerlink" title="TDDI , 时序同步"></a>TDDI , 时序同步</h3><hr><hr><h3 id="屏幕基本"><a href="#屏幕基本" class="headerlink" title="屏幕基本"></a>屏幕基本</h3><hr><p>一个像素8bit RGB<br>信号发生时间<br>    vsync 到一帧的最后一个像素 -&gt; 发出VBP(帧后的同步时间) -&gt; hsync 行同步信号 -&gt; HBP行后同步时间 -&gt; 一行像素 -&gt; HFP行前同步信号 -&gt; VFP帧前同步信号</p><hr><h3 id="android-版本更新时间节点"><a href="#android-版本更新时间节点" class="headerlink" title="android 版本更新时间节点"></a>android 版本更新时间节点</h3><hr><hr><h3 id="霍尔器件的驱动移植"><a href="#霍尔器件的驱动移植" class="headerlink" title="霍尔器件的驱动移植"></a>霍尔器件的驱动移植</h3><hr><p>霍尔器件是磁感应器件，上电后，当检测到磁性物体靠近，中断脚就会产生一个高脉冲。<br>1，在DWS文件中配置上电，中断等管脚，然后在DTS中编写基础配置；<br>2，编写一个字符驱动，内含中断注册，检测，并向上层提供调用接口。</p><hr><h3 id="improveTouch"><a href="#improveTouch" class="headerlink" title="improveTouch"></a>improveTouch</h3><hr><p>1，高通android参考机外设improveTouch研发，区别于传统的第三方touch， improveTouch核心算法主要放在dsp中运算，通过userspace nativea app控制，kernel driver向input子系统转发触摸事件。<br>2，算法组维护adsp中的hal，算法，系统组负责平台的移植 userspace/kernel的代码维护。<br>3，我主要是编写 dts/driver 的代码，通过pinctrl/set_regulator等kernel api 管理硬件资源,维护usersapce的代码，开发版本的整合，wiki文档的更新。解决内部测试团队发现的bug。<br>4，其他芯片平台有过secureTouch的开发例子,对于新的touch驱动做一个移植，跑通。<br>主要是在kernel 和trustzone子系统中添加code。</p><hr><h3 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h3><hr><p>工具的使用，死机问题分析</p><hr><h3 id="mem"><a href="#mem" class="headerlink" title="mem"></a>mem</h3><hr><p>我理解是DDR</p><hr><h3 id="devmem-1"><a href="#devmem-1" class="headerlink" title="devmem"></a>devmem</h3><hr><p>访问dts定义的内存范围内的外设寄存器访问，操作的是物理寄存器</p><hr><h3 id="http-ftp-TCP-IP-协议-1"><a href="#http-ftp-TCP-IP-协议-1" class="headerlink" title="http ftp TCP/IP 协议"></a>http ftp TCP/IP 协议</h3><hr><hr><h3 id="触摸屏突然不亮检查流程"><a href="#触摸屏突然不亮检查流程" class="headerlink" title="触摸屏突然不亮检查流程"></a>触摸屏突然不亮检查流程</h3><hr><p>上电，reset电路，总线通信。getevent检查多点触摸协议报点是否有，是否符合报点规范。</p><hr><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><hr><p>栈由高到低生长 kernel栈16K</p><hr><h3 id="uart-子系统"><a href="#uart-子系统" class="headerlink" title="uart 子系统"></a>uart 子系统</h3><hr><hr><h3 id="网络-子系统"><a href="#网络-子系统" class="headerlink" title="网络 子系统"></a>网络 子系统</h3><hr><hr><h3 id="misc驱动"><a href="#misc驱动" class="headerlink" title="misc驱动"></a>misc驱动</h3><hr><hr><h3 id="input系统"><a href="#input系统" class="headerlink" title="input系统"></a>input系统</h3><hr><hr><h3 id="多点触摸协议"><a href="#多点触摸协议" class="headerlink" title="多点触摸协议"></a>多点触摸协议</h3><hr><hr><h3 id="手势检测"><a href="#手势检测" class="headerlink" title="手势检测"></a>手势检测</h3><hr><hr><h3 id="M7-i2c"><a href="#M7-i2c" class="headerlink" title="M7 i2c"></a>M7 i2c</h3><hr><p>发出从地址后，没有ack<br>    从地址不对？ 轮寻一定范围的地址，查看是否有ack.<br>M7的时钟 200/300/400M<br>i2c 低中高时钟 100K/</p><hr><h3 id="Rtos-与-linux的区别"><a href="#Rtos-与-linux的区别" class="headerlink" title="Rtos 与 linux的区别"></a>Rtos 与 linux的区别</h3><hr><p>主要区别在于实时性</p><hr><h3 id="sn3193-类似芯片"><a href="#sn3193-类似芯片" class="headerlink" title="sn3193 类似芯片"></a>sn3193 类似芯片</h3><hr><p>关键参数流程</p><hr><h3 id="bl0-bl1-bl2-bl3-sanxin-4412-的区别，与联系"><a href="#bl0-bl1-bl2-bl3-sanxin-4412-的区别，与联系" class="headerlink" title="bl0,bl1,bl2,bl3 ( sanxin 4412 )的区别，与联系"></a>bl0,bl1,bl2,bl3 ( sanxin 4412 )的区别，与联系</h3><hr><ol><li>为什么需要bootloader 存在，没有bootloader 当然可以启动系统。<br>有bootloader的好处，系统升级。只要将对应的image 放在某个地址，重启就可以了。不需要接烧写器烧写。</li><li> bl0, blx 就类似于不同阶段，不同功能的bootloader, 分多个也是为了方便升级替换 （ 典型应用 : fastboot flash bootloader  xxx.bin ）</li></ol><p>BL0：三星公司固化到SOC内部的ROM（iROM），里面主要是尽可能只做uboot加载，尽可能消除其他的影响（关闭WDT、禁用IRQ、关闭cache等等），接下来就是从外设拷贝加载BL1<br>BL1：没什么特殊功能，特点就是经过加密的，而且BL1由三星公司提供好的，完成对BL2的加载到iRAM运行。要想在开发板上移植运行后续的代码，通过签名的方式实现软件和硬件合法性的匹配<br>BL2：由平台研发人员编写，根据SOC外内存硬件不同、工作频率不同，进行初始化设置，完成后续代码加载到初始化后的内存中运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;中断&quot;&gt;&lt;a href=&quot;#中断&quot; class=&quot;headerlink&quot; title=&quot;中断&quot;&gt;&lt;/a&gt;中断&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;中断分为上半部和下半部，上半部关中断；下半部开中断，处理可以延迟的事情。下半部有workqueue/softirq/ta</summary>
      
    
    
    
    <category term="interview" scheme="http://example.com/categories/interview/"/>
    
    
  </entry>
  
  <entry>
    <title>bios issue fiexd</title>
    <link href="http://example.com/2021/02/09/interview/bios_related/"/>
    <id>http://example.com/2021/02/09/interview/bios_related/</id>
    <published>2021-02-09T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-softfuse-struck-A5EF"><a href="#1-softfuse-struck-A5EF" class="headerlink" title="1. softfuse struck A5EF"></a>1. softfuse struck A5EF</h3><h3 id="1-softfuse-struck-A5EF-1"><a href="#1-softfuse-struck-A5EF-1" class="headerlink" title="1. softfuse struck A5EF"></a>1. softfuse struck A5EF</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-softfuse-struck-A5EF&quot;&gt;&lt;a href=&quot;#1-softfuse-struck-A5EF&quot; class=&quot;headerlink&quot; title=&quot;1. softfuse struck A5EF&quot;&gt;&lt;/a&gt;1. softfuse struck </summary>
      
    
    
    
    <category term="interview" scheme="http://example.com/categories/interview/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux Crash Tool</title>
    <link href="http://example.com/2021/02/09/tool/linux_crash/"/>
    <id>http://example.com/2021/02/09/tool/linux_crash/</id>
    <published>2021-02-09T00:00:00.000Z</published>
    <updated>2021-04-20T03:27:32.564Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;hr&gt;
</summary>
      
    
    
    
    <category term="tools" scheme="http://example.com/categories/tools/"/>
    
    
  </entry>
  
</feed>

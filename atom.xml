<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XINHUALU&#39;S BLOG</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-24T17:10:28.829Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XinHua Lu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/10/24/idea/%E8%BF%9C%E6%8E%A7%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2021/10/24/idea/%E8%BF%9C%E6%8E%A7%E6%A8%A1%E5%9D%97/</id>
    <published>2021-10-24T17:10:28.829Z</published>
    <updated>2021-10-24T17:10:28.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手机程控模块"><a href="#手机程控模块" class="headerlink" title="手机程控模块"></a>手机程控模块</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="zephyr"><a href="#zephyr" class="headerlink" title="zephyr"></a>zephyr</h3><ul><li>8266驱动</li><li>MQTT协议移植</li><li>thread1 : MQTT 接收事件</li><li>thread2：MQTT 发送事件</li><li>用户APP功能自定义</li></ul><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="stm32f0-嵌入式主控端"><a href="#stm32f0-嵌入式主控端" class="headerlink" title="stm32f0 嵌入式主控端"></a>stm32f0 嵌入式主控端</h3><h3 id="8266模块"><a href="#8266模块" class="headerlink" title="8266模块"></a>8266模块</h3><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><h3 id="终端，控制端"><a href="#终端，控制端" class="headerlink" title="终端，控制端"></a>终端，控制端</h3><p><em>XMind - Trial Version</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手机程控模块&quot;&gt;&lt;a href=&quot;#手机程控模块&quot; class=&quot;headerlink&quot; title=&quot;手机程控模块&quot;&gt;&lt;/a&gt;手机程控模块&lt;/h1&gt;&lt;h2 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/10/24/cpu_simulator/RISCV-Simulator/README/"/>
    <id>http://example.com/2021/10/24/cpu_simulator/RISCV-Simulator/README/</id>
    <published>2021-10-24T17:10:28.717Z</published>
    <updated>2021-10-24T17:10:28.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RISC-V-Simulator"><a href="#RISC-V-Simulator" class="headerlink" title="RISC-V Simulator"></a>RISC-V Simulator</h1><p>A Simple RISC-V CPU Simulator with 5 Stage Pipeline, Branch Prediction and Cache Simulation</p><p>It is a simple RISC-V Emulator suppprting user mode RV64I instruction set, from PKU Computer Architecture Labs, Spring 2019. I made my project open source in the hope that others can learn from my code about how to make a CPU Emulator and get a deeper understanding in computer architecture. As it is implemented entirely from scratch (with no code from Prof or TA), I think it’s fine to make it open source.</p><p>Note that this is just a toy for learning and is NOT a robust and full solution to RISC-V CPU Emulation. Use <code>qemu</code> for that purpose instead.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ol><li>Supporting 54 RISC-V instructions from the RV64I instruction set.</li><li>Branch perdiction module with a set of branch perdicton algorithms.</li><li>Simulation of five stage pipeline like that in the “Computer Organization and Design, Hardware/Software Interface” Book.</li><li>Simulation of cache and various cache eviction strategies.</li></ol><h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;Simulator riscv-elf-file-name [-v] [-s] [-d] [-b strategy]</span><br></pre></td></tr></table></figure><p>Parameters:</p><ol><li><code>-v</code> for verbose output, can redirect output to file for further analysis</li><li><code>-s</code> for single step execution, often used in combination with <code>-v</code>.</li><li><code>-d</code> for creating memory and register history dump in <code>dump.txt</code></li><li><code>-b</code> for branch perdiction strategy (default <code>BTFNT</code>), accepted parameters are <code>AT</code>, <code>NT</code>, <code>BTFNT</code> and <code>BPB</code>.<ul><li>AT: Always Taken</li><li>NT: Always Not Taken</li><li>BTFNT: Back Taken Forward Not Taken</li><li>BPB: Branch Prediction Buffer (2 bit history information)</li></ul></li></ol><p>There are a number of reference RISC-V ELFs and its corresponding assembly code in the <code>riscv-elf/</code> folder.</p><h2 id="Documentation-In-Chinese"><a href="#Documentation-In-Chinese" class="headerlink" title="Documentation (In Chinese)"></a>Documentation (In Chinese)</h2><p>See the <code>doc/</code> folder.</p><p>Also, you can see the corresponding <a href="https://hehao98.github.io/posts/2019/03/riscv-simulator/">blog</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RISC-V-Simulator&quot;&gt;&lt;a href=&quot;#RISC-V-Simulator&quot; class=&quot;headerlink&quot; title=&quot;RISC-V Simulator&quot;&gt;&lt;/a&gt;RISC-V Simulator&lt;/h1&gt;&lt;p&gt;A Simple RISC-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/10/24/cpu_simulator/RISCV-Simulator/YuvImageProcessor/README/"/>
    <id>http://example.com/2021/10/24/cpu_simulator/RISCV-Simulator/YuvImageProcessor/README/</id>
    <published>2021-10-24T17:10:28.717Z</published>
    <updated>2021-10-24T17:10:28.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YuvImageProcessor"><a href="#YuvImageProcessor" class="headerlink" title="YuvImageProcessor"></a>YuvImageProcessor</h1><p>This is a small program that convert a YUV file into an alpha-blended YUV video clip.</p><h2 id="How-to-Compile"><a href="#How-to-Compile" class="headerlink" title="How to Compile"></a>How to Compile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">YuvImageProcessor yuv-file -w width -h height -o isa-type output-file</span><br><span class="line">Parameters: yuv-file the path to the input yuv file</span><br><span class="line">            -w width the image width of the yuv file</span><br><span class="line">            -h height the image height of the yuv file</span><br><span class="line">            -o isa output-file [isa-type] can be Int, Basic, MMX, SSE2, AVX</span><br><span class="line">                               [output-file] is the path to output file</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;YuvImageProcessor&quot;&gt;&lt;a href=&quot;#YuvImageProcessor&quot; class=&quot;headerlink&quot; title=&quot;YuvImageProcessor&quot;&gt;&lt;/a&gt;YuvImageProcessor&lt;/h1&gt;&lt;p&gt;This is a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/10/24/cpu_simulator/RISCV-Simulator/YuvImageProcessor/Report/"/>
    <id>http://example.com/2021/10/24/cpu_simulator/RISCV-Simulator/YuvImageProcessor/Report/</id>
    <published>2021-10-24T17:10:28.717Z</published>
    <updated>2021-10-24T17:10:28.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机组织与体系结构Lab-4"><a href="#计算机组织与体系结构Lab-4" class="headerlink" title="计算机组织与体系结构Lab 4"></a><center>计算机组织与体系结构Lab 4</center></h1><h2 id="面向特定应用的体系结构优化"><a href="#面向特定应用的体系结构优化" class="headerlink" title="面向特定应用的体系结构优化"></a><center>面向特定应用的体系结构优化</center></h2><center style="font-family: sans-serif;">何昊 1600012742</center><h2 id="一、使用SIMD指令对应用程序进行优化"><a href="#一、使用SIMD指令对应用程序进行优化" class="headerlink" title="一、使用SIMD指令对应用程序进行优化"></a>一、使用SIMD指令对应用程序进行优化</h2><h3 id="1-程序需求及其实现"><a href="#1-程序需求及其实现" class="headerlink" title="1. 程序需求及其实现"></a>1. 程序需求及其实现</h3><p>本次要优化的应用程序功能是对YUV图像的淡入淡出进行处理。具体地说，先读入一个YUV文件，对其中的第一个图像，生成一个包含Alpha值从低到高的一组图像的YUV影片。对于每一个YUV像素，转换的公式如下</p><ol><li><p>YUV2RGB转换<br>$$<br>R = 1.164383 * (Y - 16) + 1.596027*(V - 128)\<br>B = 1.164383 * (Y - 16) + 2.017232*(U - 128)\<br>G = 1.164383 * (Y - 16) – 0.391762*(U - 128) – 0.812968*(V - 128)<br>$$</p></li><li><p>RGB格式下的Alpha Blending<br>$$<br>R’=A<em>R/256\<br>G’=A</em>G/256\<br>B’=A*B/256<br>$$</p></li><li><p>RGB2YUV转换<br>$$<br>Y= 0.256788<em>R’ + 0.504129</em>G’ + 0.097906<em>B’ + 16\<br>U= -0.148223</em>R’ - 0.290993<em>G’ + 0.439216</em>B’ + 128\<br>V= 0.439216<em>R’ - 0.367788</em>G’ - 0.071427*B’ + 128<br>$$</p></li></ol><p>优化的目标是使用SIMD指令对程序中核心运算部分进行指令级并行优化，加快程序的运行速度。因此，对于图像的淡入淡出处理函数，我分别实现了浮点运算、整数运算、MMX、SSE2、AVX五个不同的版本。不同版本的核心源码参见附录，源程序文件参见<code>YuvImageProcessor.cpp</code>。</p><p>显然，上述运算中，对于向量$(Y,U,V)$和向量$(R,G,B)$，(1)和(3)本质上是向量点积，(2)本质上是向量乘法，这些都可以使用SIMD指令并行化。下面简述各个版本的实现思路。</p><ol><li>浮点运算的实现相对比较简单，直接翻译YUV和RGB转换公式即可。</li><li>由于大多数CPU的整数运算比浮点运算快，加之YUV与RGB之间的转换对精度要求不高，因此也是可以用整数运算实现的(<a href="https://stackoverflow.com/questions/1737726/how-to-perform-rgb-yuv-conversion-in-c-c)%E3%80%82">https://stackoverflow.com/questions/1737726/how-to-perform-rgb-yuv-conversion-in-c-c)。</a></li><li>MMX指令集是比较老的SIMD指令集，只支持整数运算，因此只能用于并行化整数运算的版本。在实现中，使用了此外，由于MMX指令集的寄存器大小为64位，在转换过程中，点积运算后所得到的结果无法并行，因为如果用16位整数储存结果会导致溢出，无法得到正确的转换结果，这限制了算法的性能提升。</li><li>SSE指令集可以对128位SIMD寄存器进行操作，也就是可以同时对4个32位浮点数进行运算，从而只需直接将计算翻译成SIMD指令即可。此外，SSE还提供了向量点积的计算指令和向量重排指令，从而减少了实现相同运算所需要的指令数。</li><li>AVX指令集将SIMD寄存器的位数扩展到256位，那么潜在地就可以一条指令同时计算8个32位浮点数。那么，为了能够充分利用256位的寄存器，必须将算法修改成能一次性计算8个数据的版本。因此，我采用了类似循环转开的思路，每轮循环计算两个$(Y, U, V)$向量和$(R, G, B)$向量。</li></ol><h3 id="2-程序运行结果"><a href="#2-程序运行结果" class="headerlink" title="2. 程序运行结果"></a>2. 程序运行结果</h3><p>五种不同版本的淡入淡出函数对<code>dem1.yuv</code>的输出结果见下图。尽管5个不同的版本的计算方式不同，最后得到的数值也略有差异，但是从下图可见，淡入淡出的效果差异是几乎无法用肉眼分辨的。</p><p><img src="result.png"></p><p>对<code>dem2.yuv</code>的输出结果如下</p><p><img src="result2.png"></p><h3 id="3-性能统计结果"><a href="#3-性能统计结果" class="headerlink" title="3. 性能统计结果"></a>3. 性能统计结果</h3><p>下表中列出了基于不同指令集实现的同样算法对$1920\times 1080$大小的YUV图片进行淡入淡出转换并生成83张不同透明度的$1920\times 1080$的YUV图片的运行时间。对于每种算法，我们运行10遍求平均值以减少误差。运行时间的测量使用了C++ 11引入的高精度时钟API(<code>&lt;chrono&gt;</code>)。代码的运行环境为Mac OS Mojave，编译器为<code>Apple LLVM 10.0.1(clang-1001.0.46.4)</code>，优化级别为<code>-O2</code>，CPU型号为<code>Intel Core i5-6360U(Skylake), 2GHz</code>.</p><table><thead><tr><th>运行次数</th><th>Basic FP</th><th>Basic Int</th><th>MMX</th><th>SSE2</th><th>AVX</th></tr></thead><tbody><tr><td>Round 1</td><td>2572ms</td><td>1677ms</td><td>1535ms</td><td>1016ms</td><td>807ms</td></tr><tr><td>Round 2</td><td>2635ms</td><td>1653ms</td><td>1535ms</td><td>1031ms</td><td>811ms</td></tr><tr><td>Round 3</td><td>2683ms</td><td>1692ms</td><td>1593ms</td><td>1036ms</td><td>853ms</td></tr><tr><td>Round 4</td><td>2755ms</td><td>1804ms</td><td>1575ms</td><td>1041ms</td><td>851ms</td></tr><tr><td>Round 5</td><td>2723ms</td><td>1714ms</td><td>1573ms</td><td>1042ms</td><td>851ms</td></tr><tr><td>Round 6</td><td>2795ms</td><td>1754ms</td><td>1627ms</td><td>1064ms</td><td>854ms</td></tr><tr><td>Round 7</td><td>2751ms</td><td>1741ms</td><td>1626ms</td><td>1069ms</td><td>850ms</td></tr><tr><td>Round 8</td><td>2756ms</td><td>1752ms</td><td>1621ms</td><td>1063ms</td><td>872ms</td></tr><tr><td>Round 9</td><td>2684ms</td><td>1737ms</td><td>1613ms</td><td>1067ms</td><td>901ms</td></tr><tr><td>Round 10</td><td>2696ms</td><td>1800ms</td><td>1743ms</td><td>1056ms</td><td>853ms</td></tr><tr><td>Average</td><td>2705ms</td><td>1732ms</td><td>1604ms</td><td>1049ms</td><td>850ms</td></tr></tbody></table><p>由于Basic Int和MMX都是用同样的整数运算算法实现的，因此可以对其性能进行比较。使用MMX对整数运算进行并行优化的收益是很小的，这可能是因为：1. 部分关键的点积运算因为16bit整数溢出问题无法并行。2. 整数运算在现代体系结构中普遍使用了乱序执行和多发射流水线，一定程度地实现指令级并行。</p><p>类似地，我们可以对Basic FP、SSE2和AVX作比较。SSE2对Basic FP实现了接近3x的性能提升，因为SSE将对$(Y,U,V)$和$(R,G,B)$向量的操作并行化了。但是，AVX的实现和SSE2相比的提升却不明显。这是由于当前算法无法以一种很好地方式利用到8个32位浮点数的并行操作。在AVX实现中，我使用了类似循环展开的方式，同时对两个$(Y,U,V)$和$(R,G,B)$向量进行计算操作，并且手动实现了8个浮点数的点积运算，而不是像SSE那样用一条指令实现点积运算，这些都会带来性能损失。</p><p>总而言之，SIMD指令集对图像处理应用程序的优化还是非常显著的。采用AVX指令集的算法和Basic FP相比，性能提升了3.182倍。</p><h2 id="二、设计自定义扩展指令对SIMD应用优化并分析"><a href="#二、设计自定义扩展指令对SIMD应用优化并分析" class="headerlink" title="二、设计自定义扩展指令对SIMD应用优化并分析"></a>二、设计自定义扩展指令对SIMD应用优化并分析</h2><h3 id="1-需要实现的指令集"><a href="#1-需要实现的指令集" class="headerlink" title="1. 需要实现的指令集"></a>1. 需要实现的指令集</h3><p>本实验的目标是设计若干32位宽的扩展指令，支持8个宽度为256位的SIMD指令专用寄存器，支持8/16/32位pack、unpack计算，支持加/减/乘法，支持饱和计算，支持必要的数据传输指令。</p><h3 id="2-指令助记符及其功能"><a href="#2-指令助记符及其功能" class="headerlink" title="2. 指令助记符及其功能"></a>2. 指令助记符及其功能</h3><p>8个256位SIMD寄存器分别用v0, v2, …, v7表示。在下面的表格中，用<code>vn</code>表示一个SIMD寄存器，用<code>rn</code>表示任意一个64位通用寄存器。</p><table><thead><tr><th>指令</th><th>功能</th></tr></thead><tbody><tr><td><code>lv vn, rx, ry</code></td><td>将从地址<code>rn</code>开始的<code>ry</code>个字节读入<code>vn</code>(<code>ry</code>取值1到32)，其余部分填0</td></tr><tr><td><code>sv vn, rx, ry</code></td><td>将<code>vn</code>里的前<code>ry</code>个字节存入地址<code>rn</code>开始的<code>ry</code>个字节处(<code>ry</code>取值1到32)</td></tr><tr><td><code>addvi32p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位整数相加</td></tr><tr><td><code>addvi32ps vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位整数饱和相加</td></tr><tr><td><code>addvi64p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位整数相加</td></tr><tr><td><code>addvi64ps vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位整数饱和相加</td></tr><tr><td><code>addvf32p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位浮点数相加</td></tr><tr><td><code>addvf64p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位浮点数相加</td></tr><tr><td><code>subvi32p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位整数相减</td></tr><tr><td><code>subvi32ps vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位整数饱和相减</td></tr><tr><td><code>subvi64p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位整数相减</td></tr><tr><td><code>subvi64ps vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位整数饱和相减</td></tr><tr><td><code>subvf32p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位浮点数相减</td></tr><tr><td><code>subvf64p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位浮点数相减</td></tr><tr><td><code>mulvi32p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位整数相乘</td></tr><tr><td><code>mulvi32ps vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位整数饱和相乘</td></tr><tr><td><code>mulvi64p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位整数相乘</td></tr><tr><td><code>mulvi64ps vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位整数饱和相乘</td></tr><tr><td><code>mulvf32p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 32位浮点数相乘</td></tr><tr><td><code>mulvf64p vn, vx, vy</code></td><td>将<code>vx</code>和<code>vy</code>寄存器内的值按packed 64位浮点数相乘</td></tr><tr><td><code>unpckvf32hi vn, vx, vy</code></td><td>对<code>vx</code>和<code>vy</code>寄存器内的高4个32位浮点数进行unpack操作，结果存于<code>vn</code></td></tr><tr><td><code>unpckvf32lo vn, vx, vy</code></td><td>对<code>vx</code>和<code>vy</code>寄存器内的低4个32位浮点数进行unpack操作，结果存于<code>vn</code></td></tr><tr><td><code>unpckvf64hi vn, vx, vy</code></td><td>对<code>vx</code>和<code>vy</code>寄存器内的高2个64位浮点数进行unpack操作，结果存于<code>vn</code></td></tr><tr><td><code>unpckvf64lo vn, vx, vy</code></td><td>对<code>vx</code>和<code>vy</code>寄存器内的低2个64位浮点数进行unpack操作，结果存于<code>vn</code></td></tr><tr><td><code>sumvf64 vn, vx, rx</code></td><td>将<code>vx</code>寄存器的4个64位浮点数求和，存于<code>vn</code>寄存器的第<code>rx</code>个位置(<code>rx</code>必须取0-3)</td></tr><tr><td><code>maxvf64 vn, vx, vy</code></td><td>将<code>vx</code>寄存器的4个64位浮点数和<code>vy</code>寄存器的4个64位浮点数比较，存较大值于<code>vn</code>的相应位置</td></tr><tr><td><code>minvf64 vn, vx, vy</code></td><td>将<code>vx</code>寄存器的4个64位浮点数和<code>vy</code>寄存器的4个64位浮点数比较，存较小值于<code>vn</code>的相应位置</td></tr></tbody></table><p>上述指令已经符合前述要求，且足够实现前述的图像处理算法。可以很容易添加实现更多功能的SIMD指令。</p><h3 id="3-指令编码"><a href="#3-指令编码" class="headerlink" title="3. 指令编码"></a>3. 指令编码</h3><p>上述所有指令都是三个操作数，其中通用寄存器需要5个位表示，SIMD寄存器需要5个位表示，但是为了方便解码起见，两类寄存器在指令里可以都占用5个位。为了尽可能与RISCV其他扩展指令集兼容和简化指令解码过程，本指令集内所有指令采用同一个opcode，寄存器的编码位置保持不变。这样还剩下7位+3位空余域，可以编码1024个指令，依然具有足够大的编码空间。其中，七位<code>funct7</code>用于编码某一类指令(例如加法指令或者减法指令)，而三位<code>funct3</code>用于编码当前指令是这一类指令中的哪一种。</p><p>指令的编码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> funct7  rs2     rs1     funct3  rd     opcode</span><br><span class="line">|31 - 25|24 - 20|19 - 15|14 - 12|11 - 7|6  -  0| 对应指令</span><br><span class="line">|0000000|  ry   |  rx   |  000  |  vn  |1101111| lv vn, rx, ry</span><br><span class="line">|0000000|  ry   |  rx   |  001  |  vn  |1101111| sv vn, rx, ry</span><br><span class="line">|0000001|  vy   |  vx   |  000  |  vn  |1101111| addvi32p vn, vx, vy</span><br><span class="line">|0000001|  vy   |  vx   |  001  |  vn  |1101111| addvi32ps vn, vx, vy</span><br><span class="line">|0000001|  vy   |  vx   |  010  |  vn  |1101111| addvi64p vn, vx, vy</span><br><span class="line">|0000001|  vy   |  vx   |  011  |  vn  |1101111| addvi64s vn, vx, vy</span><br><span class="line">|0000001|  vy   |  vx   |  100  |  vn  |1101111| addvf32p vn, vx, vy</span><br><span class="line">|0000001|  vy   |  vx   |  101  |  vn  |1101111| addvf64p vn, vx, vy</span><br><span class="line">|0000010|  vy   |  vx   |  000  |  vn  |1101111| subvi32p vn, vx, vy</span><br><span class="line">|0000010|  vy   |  vx   |  001  |  vn  |1101111| subvi32ps vn, vx, vy</span><br><span class="line">|0000010|  vy   |  vx   |  010  |  vn  |1101111| subvi64p vn, vx, vy</span><br><span class="line">|0000010|  vy   |  vx   |  011  |  vn  |1101111| subvi64ps vn, vx, vy</span><br><span class="line">|0000010|  vy   |  vx   |  100  |  vn  |1101111| subvf32p vn, vx, vy</span><br><span class="line">|0000010|  vy   |  vx   |  101  |  vn  |1101111| subvf64p vn, vx, vy</span><br><span class="line">|0000011|  vy   |  vx   |  000  |  vn  |1101111| mulvi32p vn, vx, vy</span><br><span class="line">|0000011|  vy   |  vx   |  001  |  vn  |1101111| mulvi32ps vn, vx, vy</span><br><span class="line">|0000011|  vy   |  vx   |  010  |  vn  |1101111| mulvi64p vn, vx, vy</span><br><span class="line">|0000011|  vy   |  vx   |  011  |  vn  |1101111| mulvi64ps vn, vx, vy</span><br><span class="line">|0000011|  vy   |  vx   |  100  |  vn  |1101111| mulvf32p vn, vx, vy</span><br><span class="line">|0000011|  vy   |  vx   |  101  |  vn  |1101111| mulvf64p vn, vx, vy</span><br><span class="line">|0000100|  vy   |  vx   |  000  |  vn  |1101111| unpckvf32hi vn, vx, vy</span><br><span class="line">|0000100|  vy   |  vx   |  001  |  vn  |1101111| unpckvf32lo vn, vx, vy</span><br><span class="line">|0000100|  vy   |  vx   |  010  |  vn  |1101111| unpckvf64hi vn, vx, vy</span><br><span class="line">|0000100|  vy   |  vx   |  011  |  vn  |1101111| unpckvf64lo vn, vx, vy</span><br><span class="line">|0000101|  rx   |  vx   |  000  |  vn  |1101111| sumvf64 vn, vx, rx</span><br><span class="line">|0000110|  vy   |  vx   |  000  |  vn  |1101111| minvf64 vn, vx, vy</span><br><span class="line">|0000111|  vy   |  vx   |  000  |  vn  |1101111| maxvf64 vn, vx, vy</span><br></pre></td></tr></table></figure><h3 id="4-重新编写的图像计算核心函数"><a href="#4-重新编写的图像计算核心函数" class="headerlink" title="4. 重新编写的图像计算核心函数"></a>4. 重新编写的图像计算核心函数</h3><p>下面写出的代码假设上述设计的指令集已经类似Intel Intrinsics那样在C语言内提供了封装对应指令的函数，函数名就是指令名，函数参数就是指令需要的参数，8个SIMD寄存器变量是全局变量，命名分别为v0, v1, …, v7。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processYuvRISCV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = width * height;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">4</span>];</span><br><span class="line">  &#125; *data = <span class="keyword">new</span> Vec[total];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">      <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">      <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">      <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">double</span> zero[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">      <span class="keyword">double</span> max[<span class="number">4</span>] = &#123;<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>&#125;;</span><br><span class="line">      <span class="keyword">double</span> t0[<span class="number">4</span>] = &#123;(<span class="keyword">uint8_t</span>)yuv[offset], (<span class="keyword">uint8_t</span>)yuv[uIndex], </span><br><span class="line">                      (<span class="keyword">uint8_t</span>)yuv[vIndex], <span class="number">0.0</span>&#125;;</span><br><span class="line">      <span class="keyword">double</span> t1[<span class="number">4</span>] = &#123;<span class="number">16.0</span>, <span class="number">128.0</span>, <span class="number">128.0</span>, <span class="number">0.0</span>&#125;</span><br><span class="line">      <span class="keyword">double</span> t2[<span class="number">4</span>] = &#123;<span class="number">1.164383</span>, <span class="number">0.0</span>, <span class="number">1.596027</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">      <span class="keyword">double</span> t3[<span class="number">4</span>] = &#123;<span class="number">1.164383</span>, <span class="number">-0.391762</span>, <span class="number">-0.812968</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">      <span class="keyword">double</span> t4[<span class="number">4</span>] = &#123;<span class="number">1.164384</span>, <span class="number">2.017232</span>, <span class="number">0.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">      lv(v0, t0, <span class="number">32</span>);</span><br><span class="line">      lv(v1, t1, <span class="number">32</span>);</span><br><span class="line">      subvf64p(v1, v0, v1);</span><br><span class="line">      lv(v2, t2, <span class="number">32</span>);</span><br><span class="line">      lv(v3, t3, <span class="number">32</span>);</span><br><span class="line">      lv(v4, t4, <span class="number">32</span>);</span><br><span class="line">      mulvf64p(v2, v1, v2);</span><br><span class="line">      mulvf64p(v3, v1, v3);</span><br><span class="line">      mulvf64p(v4, v1, v4);</span><br><span class="line">      lv(v5, zero, <span class="number">32</span>);</span><br><span class="line">      sumvf64(v5, v2, <span class="number">0</span>);</span><br><span class="line">      sumvf64(v5, v3, <span class="number">1</span>);</span><br><span class="line">      sumvf64(v5, v4, <span class="number">2</span>);</span><br><span class="line">      lv(v6, max, <span class="number">32</span>);</span><br><span class="line">      lv(v7, zero, <span class="number">32</span>);</span><br><span class="line">      minvf64(v5, v5, v6);</span><br><span class="line">      maxvf64(v5, v5, v7);</span><br><span class="line">      sv(v5, data[offset].a, <span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; NUM_FRAMES; ++num) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = num * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">        <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">        <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">double</span> t0[<span class="number">4</span>] = &#123;a / <span class="number">255</span>, a / <span class="number">255</span>, a / <span class="number">255</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> yc[<span class="number">4</span>] = &#123;<span class="number">0.256788</span>, <span class="number">0.504129</span>, <span class="number">0.097906</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> uc[<span class="number">4</span>] = &#123;<span class="number">-0.148223</span>, <span class="number">0.290993</span>, <span class="number">0.439126</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> vc[<span class="number">4</span>] = &#123;<span class="number">0.439126</span>, <span class="number">-0.367788</span>, <span class="number">-0.071427</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> t2[<span class="number">4</span>] = &#123;<span class="number">16</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> zero[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">double</span> t3[<span class="number">4</span>];</span><br><span class="line">        lv(v0, t0, <span class="number">32</span>);</span><br><span class="line">        lv(v1, data[offset].a, <span class="number">24</span>);</span><br><span class="line">        lv(v2, yc, <span class="number">32</span>);</span><br><span class="line">        lv(v3, uc, <span class="number">32</span>);</span><br><span class="line">        lv(v4, vc, <span class="number">32</span>);</span><br><span class="line">        mulvf64p(v2, v1, v2);</span><br><span class="line">        mulvf64p(v3, v1, v2);</span><br><span class="line">        mulvf64p(v4, v1, v2);</span><br><span class="line">        lv(v5, zero, <span class="number">32</span>);</span><br><span class="line">        sumvf64(v5, v2, <span class="number">0</span>);</span><br><span class="line">        sumvf64(v5, v3, <span class="number">1</span>);</span><br><span class="line">        sumvf64(v5, v4, <span class="number">2</span>);</span><br><span class="line">        lv(v6, t2, <span class="number">32</span>);</span><br><span class="line">        subvf64p(v5, v5, v6);</span><br><span class="line">        sv(v5, t3, <span class="number">32</span>);</span><br><span class="line">        result[num][offset] = (<span class="keyword">int</span>)t3[<span class="number">0</span>];</span><br><span class="line">        result[num][uIndex] = (<span class="keyword">int</span>)t3[<span class="number">1</span>];</span><br><span class="line">        result[num][vIndex] = (<span class="keyword">int</span>)t3[<span class="number">2</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-性能分析"><a href="#5-性能分析" class="headerlink" title="5. 性能分析"></a>5. 性能分析</h3><p>由于无法确切得知使用SIMD计算能够减少使用的确切指令数，因此只能对其性能提升做估算。在上述程序中，使用的SIMD指令共有33条，每条SIMD指令同时对4个64位浮点数做操作。如果不使用SIMD实现，那么每条SIMD指令需要用4倍数量的指令来实现，那么对于每个像素点，使用SIMD指令可以潜在少执行$33*(4-1)=99$条指令。对于$1920\times 1080$大小的图像，共可以减少$99\times 1920\times 1080=2.0529\times 10^8$条指令。</p><p>对于每个循环而言，循环体中不是所有指令都是SIMD指令，SIMD计算之外的开销对于两个版本的实现是一样的，因此理论性能提升幅度接近4倍，但会比4倍小。根据之前编写的X86 SIMD程序的经验，实际的提升幅度会在2-3倍之间。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="1-不同版本的核心源码"><a href="#1-不同版本的核心源码" class="headerlink" title="1. 不同版本的核心源码"></a>1. 不同版本的核心源码</h3><h4 id="1-浮点运算的实现"><a href="#1-浮点运算的实现" class="headerlink" title="(1) 浮点运算的实现"></a>(1) 浮点运算的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processYuv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = width * height;</span><br><span class="line">  Pixel *data = <span class="keyword">new</span> Pixel[total];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">      <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">      <span class="keyword">int</span> y = (<span class="keyword">uint8_t</span>)yuv[offset];</span><br><span class="line">      <span class="keyword">int</span> u = (<span class="keyword">uint8_t</span>)yuv[(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total];</span><br><span class="line">      <span class="keyword">int</span> v = (<span class="keyword">uint8_t</span>)yuv[(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>)];</span><br><span class="line">      <span class="keyword">int</span> r = <span class="number">1.164383</span> * (y - <span class="number">16</span>) + <span class="number">1.596027</span> * (v - <span class="number">128</span>);</span><br><span class="line">      <span class="keyword">int</span> g = <span class="number">1.164383</span> * (y - <span class="number">16</span>) - <span class="number">0.391762</span> * (u - <span class="number">128</span>) - <span class="number">0.812968</span> * (v - <span class="number">128</span>);</span><br><span class="line">      <span class="keyword">int</span> b = <span class="number">1.164383</span> * (y - <span class="number">16</span>) + <span class="number">2.017232</span> * (u - <span class="number">128</span>);</span><br><span class="line">      data[offset].r = clamp(r, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">      data[offset].g = clamp(g, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">      data[offset].b = clamp(b, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; NUM_FRAMES; ++num) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = num * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">        <span class="keyword">int</span> r = data[offset].r * a / <span class="number">255.0</span>;</span><br><span class="line">        <span class="keyword">int</span> g = data[offset].g * a / <span class="number">255.0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = data[offset].b * a / <span class="number">255.0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0.256788</span> * r + <span class="number">0.504129</span> * g + <span class="number">0.097906</span> * b + <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-0.148223</span> * r - <span class="number">0.290993</span> * g + <span class="number">0.439216</span> * b + <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">int</span> v = <span class="number">0.439216</span> * r - <span class="number">0.367788</span> * g - <span class="number">0.071427</span> * b + <span class="number">128</span>;</span><br><span class="line">        result[num][offset] = y;</span><br><span class="line">        result[num][(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total] = u;</span><br><span class="line">        result[num][(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>)] = v;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-整数运算的实现"><a href="#2-整数运算的实现" class="headerlink" title="(2) 整数运算的实现"></a>(2) 整数运算的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * YUV and RGB conversion in integer arithmetics</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIP(X) ( (X) &gt; 255 ? 255 : (X) &lt; 0 ? 0 : X)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB -&gt; YUV</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RGB2Y(R, G, B) CLIP(( (  66 * (R) + 129 * (G) +  25 * (B) + 128) &gt;&gt; 8) +  16)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RGB2U(R, G, B) CLIP(( ( -38 * (R) -  74 * (G) + 112 * (B) + 128) &gt;&gt; 8) + 128)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RGB2V(R, G, B) CLIP(( ( 112 * (R) -  94 * (G) -  18 * (B) + 128) &gt;&gt; 8) + 128)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// YUV -&gt; RGB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C(Y) ( (Y) - 16  )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(U) ( (U) - 128 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> E(V) ( (V) - 128 )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YUV2R(Y, U, V) CLIP(( 298 * C(Y)              + 409 * E(V) + 128) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YUV2G(Y, U, V) CLIP(( 298 * C(Y) - 100 * D(U) - 208 * E(V) + 128) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YUV2B(Y, U, V) CLIP(( 298 * C(Y) + 516 * D(U)              + 128) &gt;&gt; 8)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processYuvInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = width * height;</span><br><span class="line">  Pixel *data = <span class="keyword">new</span> Pixel[total];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">      <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">      <span class="keyword">uint8_t</span> y = (<span class="keyword">uint8_t</span>)yuv[offset];</span><br><span class="line">      <span class="keyword">uint8_t</span> u = (<span class="keyword">uint8_t</span>)yuv[(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total];</span><br><span class="line">      <span class="keyword">uint8_t</span> v = (<span class="keyword">uint8_t</span>)yuv[(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>)];</span><br><span class="line">      data[offset].r = YUV2R(y, u, v);</span><br><span class="line">      data[offset].g = YUV2G(y, u, v);</span><br><span class="line">      data[offset].b = YUV2B(y, u, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; NUM_FRAMES; ++num) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = num * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">        <span class="keyword">int32_t</span> r = data[offset].r * a / <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">int32_t</span> g = data[offset].g * a / <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">int32_t</span> b = data[offset].b * a / <span class="number">255</span>;</span><br><span class="line">        result[num][offset] = (<span class="keyword">char</span>)RGB2Y(r, g, b);</span><br><span class="line">        result[num][(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total] = (<span class="keyword">char</span>)RGB2U(r, g, b);</span><br><span class="line">        result[num][(i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>)] = (<span class="keyword">char</span>)RGB2V(r, g, b);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-X86-MMX指令集的实现"><a href="#3-X86-MMX指令集的实现" class="headerlink" title="(3) X86 MMX指令集的实现"></a>(3) X86 MMX指令集的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processYuvMMX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = width * height;</span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> a[<span class="number">4</span>];</span><br><span class="line">    __m64 val;</span><br><span class="line">  &#125; *data = <span class="keyword">new</span> Vec[total];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">      <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">      <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">      <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line">      <span class="keyword">uint8_t</span> y = (<span class="keyword">uint8_t</span>)yuv[offset];</span><br><span class="line">      <span class="keyword">uint8_t</span> u = (<span class="keyword">uint8_t</span>)yuv[uIndex];</span><br><span class="line">      <span class="keyword">uint8_t</span> v = (<span class="keyword">uint8_t</span>)yuv[vIndex];</span><br><span class="line">      __m64 c1 = _mm_set_pi16(<span class="number">0</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">16</span>);</span><br><span class="line">      __m64 c2 = _mm_set_pi16(<span class="number">0</span>, <span class="number">409</span>, <span class="number">0</span>, <span class="number">298</span>);</span><br><span class="line">      __m64 c3 = _mm_set_pi16(<span class="number">0</span>, <span class="number">-208</span>, <span class="number">-100</span>, <span class="number">298</span>);</span><br><span class="line">      __m64 c4 = _mm_set_pi16(<span class="number">0</span>, <span class="number">0</span>, <span class="number">516</span>, <span class="number">298</span>);</span><br><span class="line">      __m64 t0 = _mm_sub_pi16(_mm_set_pi16(<span class="number">0</span>, v, u, y), c1);</span><br><span class="line">      __m64 t1 = _mm_madd_pi16(t0, c2);</span><br><span class="line">      __m64 t2 = _mm_madd_pi16(t0, c3);</span><br><span class="line">      __m64 t3 = _mm_madd_pi16(t0, c4);</span><br><span class="line">      <span class="keyword">int</span> t4 = CLIP(((_mm_cvtsi64_si32(t3) + <span class="keyword">int</span>(_mm_cvtm64_si64(t3)&gt;&gt;<span class="number">32</span>)) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">      <span class="keyword">int</span> t5 = CLIP(((_mm_cvtsi64_si32(t2) + <span class="keyword">int</span>(_mm_cvtm64_si64(t2)&gt;&gt;<span class="number">32</span>)) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">      <span class="keyword">int</span> t6 = CLIP(((_mm_cvtsi64_si32(t1) + <span class="keyword">int</span>(_mm_cvtm64_si64(t1)&gt;&gt;<span class="number">32</span>)) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">      data[offset].val = _mm_set_pi16(<span class="number">0</span>, t4, t5, t6);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; NUM_FRAMES; ++num) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = num * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">        <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">        <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line">        __m64 rgb = _mm_srl_pi16(_mm_mullo_pi16(data[offset].val, _mm_set1_pi16(a)), _mm_set_pi32(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">        __m64 c1 = _mm_set_pi16(<span class="number">0</span>, <span class="number">25</span>, <span class="number">129</span>, <span class="number">66</span>);</span><br><span class="line">        __m64 c2 = _mm_set_pi16(<span class="number">0</span>, <span class="number">112</span>, <span class="number">-74</span>, <span class="number">-38</span>);</span><br><span class="line">        __m64 c3 = _mm_set_pi16(<span class="number">0</span>, <span class="number">-18</span>, <span class="number">-94</span>, <span class="number">112</span>);</span><br><span class="line">        __m64 t1 = _mm_madd_pi16(rgb, c1);</span><br><span class="line">        __m64 t2 = _mm_madd_pi16(rgb, c2);</span><br><span class="line">        __m64 t3 = _mm_madd_pi16(rgb, c3);</span><br><span class="line">        <span class="keyword">int</span> t4 = (((_mm_cvtsi64_si32(t1) + <span class="keyword">int</span>(_mm_cvtm64_si64(t1)&gt;&gt;<span class="number">32</span>)) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>) + <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">int</span> t5 = (((_mm_cvtsi64_si32(t2) + <span class="keyword">int</span>(_mm_cvtm64_si64(t2)&gt;&gt;<span class="number">32</span>)) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>) + <span class="number">128</span>;</span><br><span class="line">        <span class="keyword">int</span> t6 = (((_mm_cvtsi64_si32(t3) + <span class="keyword">int</span>(_mm_cvtm64_si64(t3)&gt;&gt;<span class="number">32</span>)) + <span class="number">128</span>) &gt;&gt; <span class="number">8</span>) + <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        result[num][offset] = t4;</span><br><span class="line">        result[num][uIndex] = t5;</span><br><span class="line">        result[num][vIndex] = t6;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-X86-SSE2指令集的实现"><a href="#4-X86-SSE2指令集的实现" class="headerlink" title="(4) X86 SSE2指令集的实现"></a>(4) X86 SSE2指令集的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processYuvSSE2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = width * height;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> a[<span class="number">4</span>];</span><br><span class="line">  &#125; *data = <span class="keyword">new</span> Vec[total];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">      <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">      <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">      <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">      __m128 t0 = _mm_set_ps(<span class="number">0.0f</span>, (<span class="keyword">uint8_t</span>)yuv[vIndex], (<span class="keyword">uint8_t</span>)yuv[uIndex],</span><br><span class="line">                             (<span class="keyword">uint8_t</span>)yuv[offset]);</span><br><span class="line">      __m128 t1 = _mm_sub_ps(t0, _mm_set_ps(<span class="number">0.0f</span>, <span class="number">128.0f</span>, <span class="number">128.0f</span>, <span class="number">16.0f</span>));</span><br><span class="line">      __m128 t2 = _mm_set_ps(<span class="number">0.0f</span>, <span class="number">1.596027f</span>, <span class="number">0.0f</span>, <span class="number">1.164383f</span>);</span><br><span class="line">      __m128 t3 = _mm_set_ps(<span class="number">0.0f</span>, <span class="number">-0.812968f</span>, <span class="number">-0.391762f</span>, <span class="number">1.164383f</span>);</span><br><span class="line">      __m128 t4 = _mm_set_ps(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">2.017232f</span>, <span class="number">1.164383f</span>);</span><br><span class="line">      __m128 t5 = _mm_dp_ps(t1, t2, <span class="number">0b11110001</span>);</span><br><span class="line">      __m128 t6 = _mm_dp_ps(t1, t3, <span class="number">0b11110010</span>);</span><br><span class="line">      __m128 t7 = _mm_dp_ps(t1, t4, <span class="number">0b11110100</span>);</span><br><span class="line">      __m128 rgb = _mm_add_ps(_mm_add_ps(t5, t6), t7);</span><br><span class="line">      __m128 zero = _mm_set_ps(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">      __m128 max = _mm_set_ps(<span class="number">255.0f</span>, <span class="number">255.0f</span>, <span class="number">255.0f</span>, <span class="number">255.0f</span>);</span><br><span class="line">      rgb = _mm_max_ps(rgb, zero);</span><br><span class="line">      rgb = _mm_min_ps(rgb, max);</span><br><span class="line">      _mm_store_ps(data[offset].a, rgb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; NUM_FRAMES; ++num) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = num * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">        <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">        <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        __m128 t0 = _mm_set_ps(<span class="number">0.0f</span>, a, a, a);</span><br><span class="line">        __m128 t1 = _mm_div_ps(t0, _mm_set_ps(<span class="number">255.0f</span>, <span class="number">255.0f</span>, <span class="number">255.0f</span>, <span class="number">255.0f</span>));</span><br><span class="line">        __m128 rgb = _mm_mul_ps(t1, _mm_load_ps(data[offset].a));</span><br><span class="line">        __m128 yc = _mm_set_ps(<span class="number">0.0f</span>, <span class="number">0.097906f</span>, <span class="number">0.504129f</span>, <span class="number">0.256788f</span>);</span><br><span class="line">        __m128 uc = _mm_set_ps(<span class="number">0.0f</span>, <span class="number">0.439126f</span>, <span class="number">-0.290993f</span>, <span class="number">-0.148223f</span>);</span><br><span class="line">        __m128 vc = _mm_set_ps(<span class="number">0.0f</span>, <span class="number">-0.071427f</span>, <span class="number">-0.367788f</span>, <span class="number">0.439216f</span>);</span><br><span class="line">        __m128 y = _mm_dp_ps(rgb, yc, <span class="number">0b11110001</span>);</span><br><span class="line">        __m128 u = _mm_dp_ps(rgb, uc, <span class="number">0b11110010</span>);</span><br><span class="line">        __m128 v = _mm_dp_ps(rgb, vc, <span class="number">0b11110100</span>);</span><br><span class="line">        __m128 t2 = _mm_add_ps(_mm_add_ps(y, _mm_add_ps(u, v)),</span><br><span class="line">                               _mm_set_ps(<span class="number">0.0f</span>, <span class="number">128.0f</span>, <span class="number">128.0f</span>, <span class="number">16.0f</span>));</span><br><span class="line">        __m128i t2i = _mm_cvtps_epi32(t2);</span><br><span class="line"></span><br><span class="line">        result[num][offset] = _mm_extract_epi32(t2i, <span class="number">0</span>);</span><br><span class="line">        result[num][uIndex] = _mm_extract_epi32(t2i, <span class="number">1</span>);</span><br><span class="line">        result[num][vIndex] = _mm_extract_epi32(t2i, <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-X86-AVX指令集的实现"><a href="#5-X86-AVX指令集的实现" class="headerlink" title="(5) X86 AVX指令集的实现"></a>(5) X86 AVX指令集的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processYuvAVX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = width * height;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> a[<span class="number">8</span>];</span><br><span class="line">  &#125; *data = <span class="keyword">new</span> Vec[total / <span class="number">2</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j += <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">      <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">      <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">      __m256 zero = _mm256_set1_ps(<span class="number">0.0f</span>);</span><br><span class="line">      __m256 max = _mm256_set1_ps(<span class="number">255.0f</span>);</span><br><span class="line">      __m256 t0 =</span><br><span class="line">          _mm256_set_ps(<span class="number">0.0f</span>, (<span class="keyword">uint8_t</span>)yuv[vIndex], (<span class="keyword">uint8_t</span>)yuv[uIndex],</span><br><span class="line">                        (<span class="keyword">uint8_t</span>)yuv[offset + <span class="number">1</span>], <span class="number">0.0f</span>, (<span class="keyword">uint8_t</span>)yuv[vIndex],</span><br><span class="line">                        (<span class="keyword">uint8_t</span>)yuv[uIndex], (<span class="keyword">uint8_t</span>)yuv[offset]);</span><br><span class="line">      __m256 t1 = _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">128.0f</span>, <span class="number">128.0f</span>, <span class="number">16.0f</span>, <span class="number">0.0f</span>, <span class="number">128.0f</span>, <span class="number">128.0f</span>, <span class="number">16.0f</span>);</span><br><span class="line">      __m256 t2 = _mm256_sub_ps(t0, t1);</span><br><span class="line">      __m256 t3 = _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">1.596027f</span>, <span class="number">0.0f</span>, <span class="number">1.164383f</span>, <span class="number">0.0f</span>, <span class="number">1.596027f</span>, <span class="number">0.0f</span>, <span class="number">1.164383f</span>);</span><br><span class="line">      __m256 t4 = _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">-0.812968f</span>, <span class="number">-0.391762f</span>, <span class="number">1.164383f</span>, <span class="number">0.0f</span>, <span class="number">-0.812968f</span>, <span class="number">-0.391762f</span>, <span class="number">1.164383f</span>);</span><br><span class="line">      __m256 t5 = _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">2.017232f</span>, <span class="number">1.164383f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">2.017232f</span>, <span class="number">1.164383f</span>);</span><br><span class="line">      __m256 sum1 = _mm256_hadd_ps(_mm256_hadd_ps(_mm256_mul_ps(t2, t3), zero), zero);</span><br><span class="line">      __m256 sum2 = _mm256_hadd_ps(_mm256_hadd_ps(_mm256_mul_ps(t2, t4), zero), zero);</span><br><span class="line">      __m256 sum3 = _mm256_hadd_ps(_mm256_hadd_ps(_mm256_mul_ps(t2, t5), zero), zero);</span><br><span class="line">      sum2 = _mm256_permute_ps(sum2, <span class="number">0b11100001</span>);</span><br><span class="line">      sum3 = _mm256_permute_ps(sum3, <span class="number">0b11000110</span>);</span><br><span class="line">      __m256 rgb = _mm256_add_ps(_mm256_add_ps(sum1, sum2), sum3);</span><br><span class="line">      rgb = _mm256_max_ps(rgb, zero);</span><br><span class="line">      rgb = _mm256_min_ps(rgb, max);</span><br><span class="line">      _mm256_store_ps(data[offset/<span class="number">2</span>].a, rgb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; NUM_FRAMES; ++num) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = num * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> offset = i * width + j;</span><br><span class="line">        <span class="keyword">int</span> uIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total;</span><br><span class="line">        <span class="keyword">int</span> vIndex = (i / <span class="number">2</span>) * (width / <span class="number">2</span>) + (j / <span class="number">2</span>) + total + (total / <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        __m256 zero = _mm256_set1_ps(<span class="number">0.0f</span>);</span><br><span class="line">        __m256 t0 = _mm256_set_ps(<span class="number">0.0f</span>, a, a, a, <span class="number">0.0f</span>, a, a, a);</span><br><span class="line">        __m256 t1 = _mm256_div_ps(t0, _mm256_set1_ps(<span class="number">255.0f</span>));</span><br><span class="line">        __m256 rgb = _mm256_mul_ps(t1, _mm256_load_ps(data[offset/<span class="number">2</span>].a));</span><br><span class="line">        __m256 yc = _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">0.097906f</span>, <span class="number">0.504129f</span>, <span class="number">0.256788f</span>, <span class="number">0.0f</span>, <span class="number">0.097906f</span>, <span class="number">0.504129f</span>, <span class="number">0.256788f</span>);</span><br><span class="line">        __m256 uc = _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">0.439126f</span>, <span class="number">-0.290993f</span>, <span class="number">-0.148223f</span>, <span class="number">0.0f</span>, <span class="number">0.439126f</span>, <span class="number">-0.290993f</span>, <span class="number">-0.148223f</span>);</span><br><span class="line">        __m256 vc = _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">-0.071427f</span>, <span class="number">-0.367788f</span>, <span class="number">0.439216f</span>, <span class="number">0.0f</span>, <span class="number">-0.071427f</span>, <span class="number">-0.367788f</span>, <span class="number">0.439216f</span>);</span><br><span class="line">        __m256 sum1 = _mm256_hadd_ps(_mm256_hadd_ps(_mm256_mul_ps(rgb, yc), zero), zero);</span><br><span class="line">        __m256 sum2 = _mm256_hadd_ps(_mm256_hadd_ps(_mm256_mul_ps(rgb, uc), zero), zero);</span><br><span class="line">        __m256 sum3 = _mm256_hadd_ps(_mm256_hadd_ps(_mm256_mul_ps(rgb, vc), zero), zero);</span><br><span class="line">        sum2 = _mm256_permute_ps(sum2, <span class="number">0b11100001</span>);</span><br><span class="line">        sum3 = _mm256_permute_ps(sum3, <span class="number">0b11000110</span>);</span><br><span class="line">        __m256 t2 = _mm256_add_ps(_mm256_add_ps(sum1, sum2), sum3);</span><br><span class="line">        t2 = _mm256_add_ps(t2,</span><br><span class="line">                           _mm256_set_ps(<span class="number">0.0f</span>, <span class="number">128.0f</span>, <span class="number">128.0f</span>, <span class="number">16.0f</span>, <span class="number">0.0f</span>, <span class="number">128.0f</span>, <span class="number">128.0f</span>, <span class="number">16.0f</span>));</span><br><span class="line">        __m256i t2i = _mm256_cvtps_epi32(t2);</span><br><span class="line"></span><br><span class="line">        result[num][offset] = _mm256_extract_epi32(t2i, <span class="number">0</span>);</span><br><span class="line">        result[num][uIndex] = _mm256_extract_epi32(t2i, <span class="number">1</span>);</span><br><span class="line">        result[num][vIndex] = _mm256_extract_epi32(t2i, <span class="number">2</span>);</span><br><span class="line">        result[num][offset + <span class="number">1</span>] = _mm256_extract_epi32(t2i, <span class="number">4</span>);   </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机组织与体系结构Lab-4&quot;&gt;&lt;a href=&quot;#计算机组织与体系结构Lab-4&quot; class=&quot;headerlink&quot; title=&quot;计算机组织与体系结构Lab 4&quot;&gt;&lt;/a&gt;&lt;center&gt;计算机组织与体系结构Lab 4&lt;/center&gt;&lt;/h1&gt;&lt;h2 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>可变参数的使用案例</title>
    <link href="http://example.com/2021/10/24/c/c_fmt_va_arg/"/>
    <id>http://example.com/2021/10/24/c/c_fmt_va_arg/</id>
    <published>2021-10-24T17:10:28.713Z</published>
    <updated>2021-10-24T17:10:28.713Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="my-printf"><a href="#my-printf" class="headerlink" title="my_printf"></a>my_printf</h3><hr><p>只需要实现putchar， 就可以基于C语言的可变参数特性，实现printf. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">typedef CHAR8 *VA_LIST;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define _INT_SIZE_OF(n) ((sizeof (n) + sizeof (UINTN) - 1) &amp;~(sizeof (UINTN) - 1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define VA_START(Marker, Parameter) (Marker = (VA_LIST) ((UINTN) &amp; (Parameter) + _INT_SIZE_OF (Parameter)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define VA_ARG(Marker, TYPE)   (*(TYPE *) ((Marker += _INT_SIZE_OF (TYPE)) - _INT_SIZE_OF (TYPE)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define VA_END(Marker)      (Marker = (VA_LIST) 0)</span></span><br><span class="line"></span><br><span class="line">void putchar(CHAR8 ch)&#123;</span><br><span class="line">  IoWrite16(0x3F8, ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printdec(INT8 dec)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(dec==0)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printdec(dec/10);</span><br><span class="line">    putchar( (char)(dec%10 + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printstr(CHAR8* str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*str)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar(*str++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printhex(INT8 hex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(hex==0)</span><br><span class="line">    &#123;</span><br><span class="line">        printstr(<span class="string">&quot;0x&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printhex(hex/16);</span><br><span class="line">    <span class="keyword">if</span>(hex &lt; 10)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar((CHAR8)(hex%16 + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        putchar((CHAR8)(hex%16 - 10 + <span class="string">&#x27;a&#x27;</span> ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void xhlumyprint ( CHAR8* fmt, ... )</span><br><span class="line">&#123;</span><br><span class="line">    INT8  vargint = 0;</span><br><span class="line">    CHAR8* vargpch = NULL;</span><br><span class="line">    CHAR8* pfmt = NULL;</span><br><span class="line">    VA_LIST vp;</span><br><span class="line"></span><br><span class="line">    VA_START(vp, fmt);</span><br><span class="line">    pfmt = fmt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(*pfmt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*pfmt == <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            switch(*(++pfmt))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    vargpch = VA_ARG(vp, CHAR8*);</span><br><span class="line">                    printstr(vargpch);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                    vargint = VA_ARG(vp, INT8);</span><br><span class="line">                    printhex(vargint);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                default:</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pfmt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            putchar(*pfmt++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    VA_END(vp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void testPirnt(void)&#123;</span><br><span class="line">  putchar(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">  putchar(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  printdec(55);</span><br><span class="line">  printstr(<span class="string">&quot;afwefawefa&quot;</span>);</span><br><span class="line">  printhex(0xff);</span><br><span class="line">  putchar(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  xhlumyprint(<span class="string">&quot;xhlu %x  \n&quot;</span>, 0x44);</span><br><span class="line">  xhlumyprint(<span class="string">&quot;xhlu %s  \n&quot;</span>, <span class="string">&quot;fawefawef&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;my-printf&quot;&gt;&lt;a href=&quot;#my-printf&quot; class=&quot;headerlink&quot; title=&quot;my_printf&quot;&gt;&lt;/a&gt;my_printf&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;只需要实现putchar， 就可以基于C语言的可变参数特性，实现</summary>
      
    
    
    
    <category term="c" scheme="http://example.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/10/24/c/myprintf_log_lib/output/compile_commands/"/>
    <id>http://example.com/2021/10/24/c/myprintf_log_lib/output/compile_commands/</id>
    <published>2021-10-24T17:10:28.713Z</published>
    <updated>2021-10-24T17:10:28.713Z</updated>
    
    <content type="html"><![CDATA[[{"directory":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/output","command":"/usr/bin/cc  -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/inc -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/library/easylogger/inc  -o CMakeFiles/myprint.dir/src/main.c.o -c /cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/main.c","file":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/main.c"},{"directory":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/output","command":"/usr/bin/cc  -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/inc -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/library/easylogger/inc  -o CMakeFiles/myprint.dir/src/myprintf.c.o -c /cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/myprintf.c","file":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/myprintf.c"}]]]></content>
    
    
      
      
    <summary type="html">[{&quot;directory&quot;:&quot;/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/output&quot;,&quot;command&quot;:&quot;/usr/bin/cc  -I/cygdrive/c/Users/xinhualu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BiosInterFace update 的思路</title>
    <link href="http://example.com/2021/10/24/bios/06_Biso_interface_update/"/>
    <id>http://example.com/2021/10/24/bios/06_Biso_interface_update/</id>
    <published>2021-10-24T17:10:28.713Z</published>
    <updated>2021-10-24T17:10:28.713Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><hr><ul><li>PMFW<br>专门控制CLK/power的一个bin ,</li><li>SMU<br>BIOS的菜单控制，设置值，分发值到具体的模块<br>SMU和PMFW通过msg机制更新biosinterfaceTable的结构体来通信。</li><li>MSG机制<br>一端，向某个寄存器写入消息ID，消息参数，poll 等待response，另一端是硬件中断，拿到硬件中断后，处理写入response消息。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;PMFW&lt;br&gt;专门控制CLK/power的一个bin ,&lt;/li&gt;
&lt;li&gt;SMU&lt;br&gt;BIOS的菜单控</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title>BIOS protect mode 总结</title>
    <link href="http://example.com/2021/10/24/bios/00_bios_protect_mode_enable_flow/"/>
    <id>http://example.com/2021/10/24/bios/00_bios_protect_mode_enable_flow/</id>
    <published>2021-10-24T17:10:28.465Z</published>
    <updated>2021-10-24T17:10:28.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="保护模式流程："><a href="#保护模式流程：" class="headerlink" title="保护模式流程："></a>保护模式流程：</h3><hr><pre><code>1. 准备GDT。2. 用lgdt加载gdtr。3. 打开A20。4. 置cr0的PE位。5. 跳转，进入保护模式。</code></pre><hr><h3 id="汇编流程"><a href="#汇编流程" class="headerlink" title="汇编流程"></a>汇编流程</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">; Save BIST state <span class="keyword">in</span> EAX</span><br><span class="line">mov     ebp,  eax   </span><br><span class="line">; BspApCheck</span><br><span class="line">mov     ecx, APIC_BASE_ADDRESS  ; MSR:0000_001B</span><br><span class="line">rdmsr     // 读取ecx地址中的值，赋给 edx, eax( low 16 bit ) </span><br><span class="line">/*  </span><br><span class="line">BSC: boot strap core. Read-write,Volatile. Reset: X. </span><br><span class="line">0=The core is not the boot core of the BSP. </span><br><span class="line">1=The core is the boot core of the BSP.</span><br><span class="line">*/ </span><br><span class="line">// 找到最先启动的核</span><br><span class="line">bt      eax, APIC_BSC           ; Is this the BSC?   APIC_BSC = 8, bt,检测某一位是否被置位， 这里就是检测第8位 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mov     esi,  OFFSET GdtDesc  // 初始化GDT把GDT地址赋给esi. </span><br><span class="line"></span><br><span class="line">GdtDesc:                                                ; GDT descriptor</span><br><span class="line">OffsetGDTDesc       EQU     $ - Flat32Start</span><br><span class="line">DW      GDT_SIZE - 1                ; GDT <span class="built_in">limit</span></span><br><span class="line">DD      OFFSET BootGDTtable ; GDT base address</span><br><span class="line"></span><br><span class="line">汇编定义了 BootGDTtable， 里面有数据段，代码段等各段定义</span><br><span class="line"></span><br><span class="line">DB      66h     // 本意是存储一个值为66H, 但是这里是80386芯片BUG 引入的命令用于切换16/32 位，</span><br><span class="line"></span><br><span class="line">66 8b c3  32位机器码命令</span><br><span class="line">8b c3     16位的命令</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">1. fword表示操作的是32位的地址 ， （ 配置上面的66 命令，确保是32位操作 ？）</span><br><span class="line">2. 之前包GDT的地址赋给了esi , si是esi的低16位，</span><br><span class="line">3， 这条命令是把，esi 低16位赋给GDTR寄存器，方便其他地方调用</span><br><span class="line">*/</span><br><span class="line">lgdt    fword ptr cs:[si]   </span><br><span class="line">/*</span><br><span class="line">读出CR0(32位的控制寄存器)到eax ； </span><br><span class="line">[0] PE  protect <span class="built_in">enable</span> 是否启动保护模式</span><br><span class="line">[1] MP  moniter coprocessor 监控协处理器</span><br><span class="line">[2] EM  <span class="built_in">emulate</span> coprocessor 模拟协处理器 = 1 无法使用协处理器</span><br><span class="line">[3] TS  task switch, 任务完成置1 ， 置1后无法使用协处理器</span><br><span class="line">[4] 微处理器的拓展位，处理器类型  287协处理器，387浮点协处理器</span><br><span class="line">[31] 分页使能，是否使用page机制</span><br><span class="line">*/</span><br><span class="line">mov     eax, cr0                           ; Get control register 0</span><br><span class="line">/*</span><br><span class="line">启动保护模式 </span><br><span class="line">启动协处理器</span><br><span class="line">*/</span><br><span class="line">or      eax, 00000003h                     ; Set PE bit (bit <span class="comment">#0) &amp; MP bit (bit #1)</span></span><br><span class="line">mov     cr0, eax                           ; Activate protected mode</span><br><span class="line">/*</span><br><span class="line">读出CR４　</span><br><span class="line">[0] VME  virtaul-8086 mode extensions  给运行 invirtual-8086的软件硬件加速</span><br><span class="line">[1] PVI  protect-mode virtaul interrupt support. ( 中断反应在 RFLAGS 寄存器红的 VIF/VIP 2个bit中 )</span><br><span class="line">[2] TSD  time-stamp <span class="built_in">disable</span>  0/1 表示是否可以读取 RDTSC/RDTSCP </span><br><span class="line">[3] DE   Debug extension , <span class="built_in">enable</span> IO breakpoint. </span><br><span class="line">[4] PSE  page-size extension</span><br><span class="line">[5] PAE  物理地址拓展， 使能的话，支持2M的超级页 </span><br><span class="line">[6] MCE  machine-check <span class="built_in">enable</span> </span><br><span class="line">[7] PGE  page global <span class="built_in">enable</span></span><br><span class="line">[8] PCE  performance-monitoring counter <span class="built_in">enable</span> </span><br><span class="line">[9] OSFXSR  256/128bit media 指令使能</span><br><span class="line">[10] OSXMMEXCPT <span class="built_in">enable</span> 处理 256/128bit media 指令异常 </span><br><span class="line">*/</span><br><span class="line">mov     eax, cr4                           ; Get control register 4</span><br><span class="line">or      eax, 00000600h                     ; Set OSFXSR bit (bit <span class="comment">#9) &amp; OSXMMEXCPT bit (bit #10)</span></span><br><span class="line">/*</span><br><span class="line">使能这俩位</span><br><span class="line">[9] OSFXSR  256/128bit media 指令使能</span><br><span class="line">[10] OSXMMEXCPT <span class="built_in">enable</span> 处理 256/128bit media 指令异常 </span><br><span class="line">*/</span><br><span class="line">mov     cr4, eax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 段初始化</span><br><span class="line">mov     ax, SYS_DATA_SEL   // 复制申请的系统数据段的地址给ax </span><br><span class="line"></span><br><span class="line">; System data segment descriptor</span><br><span class="line">SYS_DATA_SEL        equ     $ - GDT_BASE               ; Selector [0x18]</span><br><span class="line">DW      0FFFFh                     ; <span class="built_in">limit</span> 0xFFFFF</span><br><span class="line">DW      0                          ; base 0</span><br><span class="line">DB      0</span><br><span class="line">DB      093h                       ; present, ring 0, data, expand-up, not-writable</span><br><span class="line">DB      0CFh                       ; page-granular, 32-bit</span><br><span class="line">DB      0</span><br><span class="line"></span><br><span class="line">// 同样的地址赋给各个段寄存器</span><br><span class="line">mov     ds, ax</span><br><span class="line">mov     es, ax</span><br><span class="line">mov     fs, ax</span><br><span class="line">mov     gs, ax</span><br><span class="line">mov     ss, ax </span><br><span class="line">// 目前前面都是在protect 16模式下 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; Go to Protected32  </span><br><span class="line">mov esi, offset NemInitLinearAddress</span><br><span class="line"></span><br><span class="line">NemInitLinearAddress   LABEL   FWORD // 没有定义东西</span><br><span class="line"></span><br><span class="line">jmp     fword ptr cs:[si]   // 这里是个逻辑地址， </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;保护模式流程：&quot;&gt;&lt;a href=&quot;#保护模式流程：&quot; class=&quot;headerlink&quot; title=&quot;保护模式流程：&quot;&gt;&lt;/a&gt;保护模式流程：&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;1. 准备GDT。
2. 用lgdt加载gdtr。
3. 打开A20。
4</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title>BIOS 各种流程</title>
    <link href="http://example.com/2021/10/24/bios/02_bios_flow/"/>
    <id>http://example.com/2021/10/24/bios/02_bios_flow/</id>
    <published>2021-10-24T17:10:28.465Z</published>
    <updated>2021-10-24T17:10:28.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BIOS-Training-Flow"><a href="#BIOS-Training-Flow" class="headerlink" title="BIOS Training Flow"></a>BIOS Training Flow</h3><hr><p><a href="https://github.com/tianocore-training/Tianocore_Training_Contents/wiki/Catalog_of_Training">REFERENCE</a> link.</p><hr><h3 id="reference-file-list"><a href="#reference-file-list" class="headerlink" title="reference file list"></a>reference file list</h3><hr><a href="/2021/10/24/bios/02_bios_flow/AMD_PI_Spec.pdf" title="AMD_PI_Spec.pdf">AMD_PI_Spec.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/PI_Spec_1_7_A_final_May1.pdf" title="PI_Spec_1_7_A_final_May1.pdf">PI_Spec_1_7_A_final_May1.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-DecSpecification.pdf" title="edk2-DecSpecification.pdf">edk2-DecSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-DscSpecification.pdf" title="edk2-DscSpecification.pdf">edk2-DscSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-FdfSpecification.pdf" title="edk2-FdfSpecification.pdf">edk2-FdfSpecification.pdf</a>   <br><a href="/2021/10/24/bios/02_bios_flow/edk2-IdfSpecification.pdf" title="edk2-IdfSpecification.pdf">edk2-IdfSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-PcdSpecification.pdf" title="edk2-PcdSpecification.pdf">edk2-PcdSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-UniSpecification.pdf" title="edk2-UniSpecification.pdf">edk2-UniSpecification.pdf</a> <br><a href="/2021/10/24/bios/02_bios_flow/edk2-VfrSpecification.pdf" title="edk2-VfrSpecification.pdf">edk2-VfrSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-BuildSpecification.pdf" title="edk2-BuildSpecification.pdf">edk2-BuildSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-TemplateSpecification.pdf" title="edk2-TemplateSpecification.pdf">edk2-TemplateSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/EDK_II_Secure_Coding_Guide.pdf" title="EDK_II_Secure_Coding_Guide.pdf">EDK_II_Secure_Coding_Guide.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/UEFI_Driver_HII_Win_Lab_Guide.pdf" title="UEFI_Driver_HII_Win_Lab_Guide.pdf">UEFI_Driver_HII_Win_Lab_Guide.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/UEFI_Driver_HII_Linux_Lab_Guide.pdf" title="UEFI_Driver_HII_Linux_Lab_Guide.pdf">UEFI_Driver_HII_Linux_Lab_Guide.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-UefiDriverWritersGuide-master.pdf" title="edk2-UefiDriverWritersGuide-master.pdf">edk2-UefiDriverWritersGuide-master.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-CCodingStandardsSpecification.pdf" title="edk2-CCodingStandardsSpecification.pdf">edk2-CCodingStandardsSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/ATBB-Memory_Protection_in_UEFI_BIOS.pdf" title="ATBB-Memory_Protection_in_UEFI_BIOS.pdf">ATBB-Memory_Protection_in_UEFI_BIOS.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/Understanding_UEFI_Secure_Boot_Chain.pdf" title="Understanding_UEFI_Secure_Boot_Chain.pdf">Understanding_UEFI_Secure_Boot_Chain.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-MetaDataExpressionSyntaxSpecification.pdf" title="edk2-MetaDataExpressionSyntaxSpecification.pdf">edk2-MetaDataExpressionSyntaxSpecification.pdf</a>  <br><a href="/2021/10/24/bios/02_bios_flow/edk2-PythonDevelopmentProcessSpecification.pdf" title="edk2-PythonDevelopmentProcessSpecification.pdf">edk2-PythonDevelopmentProcessSpecification.pdf</a>  <br>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;BIOS-Training-Flow&quot;&gt;&lt;a href=&quot;#BIOS-Training-Flow&quot; class=&quot;headerlink&quot; title=&quot;BIOS Training Flow&quot;&gt;&lt;/a&gt;BIOS Training Flow&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title>list operate</title>
    <link href="http://example.com/2021/06/09/c/list_operate/"/>
    <id>http://example.com/2021/06/09/c/list_operate/</id>
    <published>2021-06-09T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.713Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="list-操作"><a href="#list-操作" class="headerlink" title="list 操作"></a>list 操作</h3><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">head</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>, *<span class="title">firstnode</span>;</span></span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    p-&gt;data = <span class="number">0</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    firstnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    firstnode-&gt;data = <span class="number">0</span>;</span><br><span class="line">    firstnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;next = firstnode;</span><br><span class="line">    head = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct node * <span class="title">listAdd</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newnode</span>;</span></span><br><span class="line">    newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    newnode-&gt;data = data;</span><br><span class="line">    newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = newnode;</span><br><span class="line">    <span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listDel</span><span class="params">(struct node * node)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">q</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data == node-&gt;data)</span><br><span class="line">                q-&gt;next = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    listInit();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">a</span> =</span> listAdd(<span class="number">1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">b</span> =</span> listAdd(<span class="number">2</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">c</span> =</span> listAdd(<span class="number">3</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">d</span> =</span> listAdd(<span class="number">4</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">e</span> =</span> listAdd(<span class="number">5</span>);</span><br><span class="line">    listPrint();</span><br><span class="line"></span><br><span class="line">    listDel(a);</span><br><span class="line">    listDel(b);</span><br><span class="line">    listPrint();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./a.exe</span><br><span class="line">0  1  2  3  4  5</span><br><span class="line">0  3  4  5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;list-操作&quot;&gt;&lt;a href=&quot;#list-操作&quot; class=&quot;headerlink&quot; title=&quot;list 操作&quot;&gt;&lt;/a&gt;list 操作&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="c" scheme="http://example.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>自己实现动态内存分配思路（有点伪）</title>
    <link href="http://example.com/2021/06/08/c/dynamic_mem_alloc/"/>
    <id>http://example.com/2021/06/08/c/dynamic_mem_alloc/</id>
    <published>2021-06-08T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.713Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="伪动态内存分配"><a href="#伪动态内存分配" class="headerlink" title="伪动态内存分配"></a>伪动态内存分配</h3><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMMAXSIZE 100</span></span><br><span class="line"><span class="keyword">int</span> mem[MEMMAXSIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> used;</span><br><span class="line">    <span class="keyword">int</span> index_baseaddr;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">HEAD</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">splitmem</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> allsize, <span class="keyword">int</span> needsize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  index+allsize-needsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct datanode * <span class="title">spaceRequest</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span> =</span> HEAD;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next; </span><br><span class="line">        <span class="keyword">if</span> (p-&gt;used == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;size &gt;= size)&#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct  datanode));</span><br><span class="line">                newnode-&gt;index_baseaddr = splitmem(p-&gt;index_baseaddr,p-&gt;size,size);</span><br><span class="line">                newnode-&gt;size = size;</span><br><span class="line">                newnode-&gt;used = <span class="number">1</span>;</span><br><span class="line">                p-&gt;size -= size;</span><br><span class="line">                newnode-&gt;next = p-&gt;next;</span><br><span class="line">                p-&gt;next = newnode;</span><br><span class="line">                <span class="keyword">return</span> newnode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spaceFree</span><span class="params">(struct datanode* space)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span> =</span> HEAD;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">q</span>,*<span class="title">pp</span>;</span></span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        pp = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;index_baseaddr == space-&gt;index_baseaddr &amp;&amp; p-&gt;size == space-&gt;size)&#123;</span><br><span class="line">            p-&gt;used = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (q-&gt;used == <span class="number">0</span>)&#123;</span><br><span class="line">                q-&gt;size += p-&gt;size;</span><br><span class="line">                q-&gt;next = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pp-&gt;used==<span class="number">0</span>)&#123;</span><br><span class="line">                    p-&gt;size += pp-&gt;size;</span><br><span class="line">                    p-&gt;next = pp-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span> =</span> HEAD;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(i=p-&gt;index_baseaddr;i&lt;(p-&gt;index_baseaddr+p-&gt;size);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;used == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\e[0;32m%d  &quot;</span>,mem[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\e[0m%d  &quot;</span>,mem[i]);</span><br><span class="line">            <span class="keyword">if</span>(count++ &gt; <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">firstnode</span>;</span></span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct datanode));</span><br><span class="line">    firstnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct datanode));</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;index_baseaddr = <span class="number">0</span>;</span><br><span class="line">    p-&gt;size = <span class="number">0</span>;</span><br><span class="line">    p-&gt;used = <span class="number">1</span>;</span><br><span class="line">    firstnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    firstnode-&gt;used = <span class="number">0</span>;</span><br><span class="line">    firstnode-&gt;index_baseaddr = <span class="number">0</span>;</span><br><span class="line">    firstnode-&gt;size = MEMMAXSIZE;</span><br><span class="line">    p-&gt;next = firstnode;</span><br><span class="line">    HEAD = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    memInit();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> * <span class="title">a</span> =</span> spaceRequest(<span class="number">10</span>);</span><br><span class="line">    memPrint();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> * <span class="title">b</span> =</span> spaceRequest(<span class="number">2</span>);</span><br><span class="line">    memPrint();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> * <span class="title">c</span> =</span> spaceRequest(<span class="number">4</span>);</span><br><span class="line">    memPrint();</span><br><span class="line"></span><br><span class="line">    spaceFree(a);</span><br><span class="line">    memPrint();</span><br><span class="line">    spaceFree(b);</span><br><span class="line">    memPrint();</span><br><span class="line">    spaceFree(c);</span><br><span class="line">    memPrint();        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="结果效果（绿色是申请的内存"><a href="#结果效果（绿色是申请的内存" class="headerlink" title="结果效果（绿色是申请的内存)"></a>结果效果（绿色是申请的内存)</h3><hr><p><img src="mem.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;伪动态内存分配&quot;&gt;&lt;a href=&quot;#伪动态内存分配&quot; class=&quot;headerlink&quot; title=&quot;伪动态内存分配&quot;&gt;&lt;/a&gt;伪动态内存分配&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="c" scheme="http://example.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>cmake build summary</title>
    <link href="http://example.com/2021/06/08/c/cmake_build/"/>
    <id>http://example.com/2021/06/08/c/cmake_build/</id>
    <published>2021-06-08T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.713Z</updated>
    
    <content type="html"><![CDATA[<p>cmake </p><hr><h3 id="最小例子"><a href="#最小例子" class="headerlink" title="最小例子"></a>最小例子</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(CalculateSqrt VERSION 1.0) <span class="comment"># 设定工程名和版本号</span></span><br><span class="line">add_executable(CalculateSqrt main.c)</span><br></pre></td></tr></table></figure><hr><h3 id="指定头文件路径"><a href="#指定头文件路径" class="headerlink" title="指定头文件路径"></a>指定头文件路径</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定项目编译的时候需要include的文件路径，PROJECT_BINARY_DIR变量为编译发生的目录，也就是make执行的目录，PROJECT_SOURCE_DIR为工程所在的目录</span></span><br><span class="line"><span class="comment"># target_include_directories官方文档：https://cmake.org/cmake/help/v3.3/command/target_include_directories.html</span></span><br><span class="line">target_include_directories(CalculateSqrt PUBLIC <span class="string">&quot;<span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="编译系统的配置导入到头文件中"><a href="#编译系统的配置导入到头文件中" class="headerlink" title="编译系统的配置导入到头文件中"></a>编译系统的配置导入到头文件中</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">自动生成CalculateSqrtConfig.h文件，直接include， 可以用作开关定义</span><br><span class="line"><span class="built_in">set</span>(TestA 1) 或者  option(TestA <span class="string">&quot;Test A&quot;</span> 1)</span><br><span class="line">configure_file(CalculateSqrtConfig.h.in CalculateSqrtConfig.h)</span><br><span class="line">CalculateSqrtConfig.h.in 文件中： </span><br><span class="line"><span class="comment">#define testA  @TestA@</span></span><br></pre></td></tr></table></figure><hr><h3 id="添加子目录进入编译系统"><a href="#添加子目录进入编译系统" class="headerlink" title="添加子目录进入编译系统"></a>添加子目录进入编译系统</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_subdirectory(MathFunctions) </span><br></pre></td></tr></table></figure><hr><h3 id="添加链接库"><a href="#添加链接库" class="headerlink" title="添加链接库"></a>添加链接库</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该指令的作用为将目标文件与库文件进行链接 </span></span><br><span class="line"><span class="comment"># target_link_libraries官方文档:https://cmake.org/cmake/help/latest/command/target_link_libraries.html </span></span><br><span class="line">target_link_libraries(CalculateSqrt PUBLIC MathFunctions) </span><br></pre></td></tr></table></figure><hr><h3 id="源码生成库"><a href="#源码生成库" class="headerlink" title="源码生成库"></a>源码生成库</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用特定的源码为项目增加lib </span></span><br><span class="line">add_library(MathFunctions mysqrt.cpp) </span><br></pre></td></tr></table></figure><hr><h3 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h3><hr><p>添加在CMakeList.txt<br>就是决定执行make install 的时候，拷贝哪些文件到lib/bin/include</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install(TARGETS MathFunctions DESTINATION lib) </span><br><span class="line">install(FILES MathFunctions.h DESTINATION include) </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cmake &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;最小例子&quot;&gt;&lt;a href=&quot;#最小例子&quot; class=&quot;headerlink&quot; title=&quot;最小例子&quot;&gt;&lt;/a&gt;最小例子&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="cmake" scheme="http://example.com/categories/cmake/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/03_python_dev_lib_%E8%BF%9B%E5%BA%A6/"/>
    <id>http://example.com/2021/04/23/dev_utils/03_python_dev_lib_%E8%BF%9B%E5%BA%A6/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.829Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="ref-https-blog-csdn-net-qq-44647926-article-details-89499842"><a href="#ref-https-blog-csdn-net-qq-44647926-article-details-89499842" class="headerlink" title="ref : https://blog.csdn.net/qq_44647926/article/details/89499842"></a>ref : <a href="https://blog.csdn.net/qq_44647926/article/details/89499842">https://blog.csdn.net/qq_44647926/article/details/89499842</a></h3><hr><hr><h3 id="进度条-demo"><a href="#进度条-demo" class="headerlink" title="进度条 demo"></a>进度条 demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">scale=50 <span class="comment">#尽量不要超过50 超过屏幕宽度会自动执行换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行开始&quot;</span>.center(scale//2,<span class="string">&quot;-&quot;</span>))</span><br><span class="line">start=time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale+1):</span><br><span class="line">a=<span class="string">&quot;*&quot;</span>*i</span><br><span class="line">b=<span class="string">&quot;.&quot;</span>*(scale-i)</span><br><span class="line">c=(i/scale)*100</span><br><span class="line">dur=time.perf_counter()-start</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\r&#123;:&lt;3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;] time:&#123;:.2f&#125;&quot;</span>.format(c,a,b,dur),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#\r将光标移动到前面</span></span><br><span class="line"><span class="comment">#&#123;:^3.0f&#125; 左对齐 保留3位整数位 保留0位小数位</span></span><br><span class="line">time.sleep(0.1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行结束&quot;</span>.center(scale//2,<span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count_down = 10  <span class="comment"># 设置倒计时时间，单位：秒</span></span><br><span class="line">interval = 1  <span class="comment"># 设置屏幕刷新的间隔时间，单位：秒</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0, int(count_down/interval)+1):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>+<span class="string">&quot;▇▇▇▇&quot;</span>*i+<span class="string">&quot; &quot;</span>+str(i*10)+<span class="string">&quot;%&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">     time.sleep(interval)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n加载完毕&quot;</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">count_down = 10  <span class="comment"># 设置倒计时时间，单位：秒</span></span><br><span class="line">interval = 0.25  <span class="comment"># 设置屏幕刷新的间隔时间，单位：秒</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0, int(count_down/interval)):</span><br><span class="line">    ch_list = [<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line">    index = i % 4</span><br><span class="line">    msg = <span class="string">&quot;\r程序运行中 &quot;</span> + ch_list[index]</span><br><span class="line">    <span class="built_in">print</span>(msg, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    time.sleep(interval)</span><br><span class="line"><span class="built_in">print</span>(u<span class="string">&quot;\r结束&quot;</span> + <span class="string">&quot;  &quot;</span>*len(msg))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;ref-https-blog-csdn-net-qq-44647926-article-details-89499842&quot;&gt;&lt;a href=&quot;#ref-https-blog-csdn-net-qq-44647926-article-details-894</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/01_python_dev_lib_logger/"/>
    <id>http://example.com/2021/04/23/dev_utils/01_python_dev_lib_logger/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.829Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="install-lib"><a href="#install-lib" class="headerlink" title="install lib"></a>install lib</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install GitPython <span class="comment">#在线安装会自动安装其依赖模块</span></span><br></pre></td></tr></table></figure><hr><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.clone_from(<span class="string">&quot;git远程给仓库地址&quot;</span>,to_path=<span class="string">&quot;将要克隆到的本地仓库地址&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.init(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#aa为要初始化的本地仓库</span></span><br></pre></td></tr></table></figure><hr><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repo = Repo(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#获取本地仓库对象</span></span><br><span class="line">index = repo.index <span class="comment">#获取本地仓库的暂存区对象</span></span><br><span class="line"><span class="comment">#index.add(r&#x27;*&#x27;) #将本地所有改动提交到暂存区</span></span><br><span class="line">index.add([<span class="string">&#x27;aaaa.txt&#x27;</span>]) <span class="comment">#将aaaa.txt文件提交到暂存区</span></span><br><span class="line">index.commit(<span class="string">&quot;此次提交备注信息&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo.git.branch(<span class="string">&quot;dev&quot;</span>) <span class="comment">#新建dev分支</span></span><br><span class="line">repo.git.checkout(<span class="string">&quot;dev&quot;</span>) <span class="comment">#切换到dev分支</span></span><br></pre></td></tr></table></figure><hr><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from git import Repo</span><br><span class="line">from git.repo.fun import is_git_dir</span><br><span class="line"></span><br><span class="line">class GitRepository(object):</span><br><span class="line">  <span class="comment">#初始化</span></span><br><span class="line">  def __init__(self,local_path,repo_url,branch = <span class="string">&#x27;master&#x27;</span>):</span><br><span class="line">    self.local_path = local_path</span><br><span class="line">    self.repo_url = repo_url</span><br><span class="line">    self.repo = None</span><br><span class="line">    self.initial(repo_url,branch)</span><br><span class="line">  def initial(self,repo_url,branch):</span><br><span class="line">    <span class="comment">#判断本地仓库存在否，不存在则新建一个</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.exists(self.local_path):</span><br><span class="line">      os.makedirs(self.local_path)</span><br><span class="line">    git_local_path = os.path.join(self.local_path,<span class="string">&quot;.git&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> not is_git_dir(git_local_path):</span><br><span class="line">      self.repo = Repo.clone_from(repo_url,to_path = self.local_path,branch = branch)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    self.repo = Repo(self.local_path)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#拉取远程代码</span></span><br><span class="line">  def pull(self):</span><br><span class="line">    self.repo.git.pull()</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#将本地提交推送到远程</span></span><br><span class="line">  def push(self):</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;master&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#切换分支</span></span><br><span class="line">  def change_to branch(self,ch_branch):</span><br><span class="line">    self.repo.git.checkout(ch_branch)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#新建tag并推送远程</span></span><br><span class="line">  def tags(self,new_tag,new_msg):</span><br><span class="line">    self.repo.create_tag(new_tag,m = new_msg)</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;origin&#x27;</span>,new_tag)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  local_path = input(<span class="string">&#x27;请输入本地仓库地址：&#x27;</span>)</span><br><span class="line">  repo_url = input(<span class="string">&#x27;请输入远程仓库地址：&#x27;</span>)</span><br><span class="line">  repo = GitRepository(local_path,repo_url)</span><br><span class="line">  </span><br><span class="line">  ch_branch = input(<span class="string">&quot;请输入要切换的分支名称:&quot;</span>)</span><br><span class="line">  repo.change_to_branch(ch_branch)</span><br><span class="line">  repo.pull()</span><br><span class="line">  </span><br><span class="line">  new_tag = input(<span class="string">&quot;请输入新建的tag:&quot;</span>)</span><br><span class="line">  new_msg = input(<span class="string">&quot;请输入本次推送的备注信息：&quot;</span>)</span><br><span class="line">  repo.tags()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;install-lib&quot;&gt;&lt;a href=&quot;#install-lib&quot; class=&quot;headerlink&quot; title=&quot;install lib&quot;&gt;&lt;/a&gt;install lib&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight ba</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/02_python_dev_lib_cmd_parse/"/>
    <id>http://example.com/2021/04/23/dev_utils/02_python_dev_lib_cmd_parse/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.829Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import argparseparser = argparse.ArgumentParser(<span class="string">&#x27;introduce how to use&#x27;</span>)<span class="comment">#创建一个解析器</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, <span class="comment">#必选参数                            </span></span><br><span class="line">                    metavar=<span class="string">&#x27;number&#x27;</span>, <span class="comment">#&#x27;usage&#x27;显示成&#x27;number&#x27;                    </span></span><br><span class="line">                    <span class="built_in">type</span>=int, <span class="comment">#整形变量                    </span></span><br><span class="line">                    nargs=<span class="string">&#x27;+&#x27;</span>, <span class="comment">#至少有一个参数值                    </span></span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;an inter for the accumulator&#x27;</span>)<span class="comment">#帮助文档显示</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--test-para&#x27;</span>,<span class="comment">#可选参数                    </span></span><br><span class="line">                    required=False,<span class="comment">#是否必须携带                    </span></span><br><span class="line">                    default=<span class="string">&#x27;this is just a test&#x27;</span>,<span class="comment">#默认值                    </span></span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;wirte some instruction here&#x27;</span>)<span class="comment">#帮助文档</span></span><br><span class="line">args = parser.parse_args()<span class="comment">#解析</span></span><br><span class="line"><span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/00_python_dev_lib_git/"/>
    <id>http://example.com/2021/04/23/dev_utils/00_python_dev_lib_git/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.829Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="install-lib"><a href="#install-lib" class="headerlink" title="install lib"></a>install lib</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install GitPython <span class="comment">#在线安装会自动安装其依赖模块</span></span><br></pre></td></tr></table></figure><hr><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.clone_from(<span class="string">&quot;git远程给仓库地址&quot;</span>,to_path=<span class="string">&quot;将要克隆到的本地仓库地址&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.init(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#aa为要初始化的本地仓库</span></span><br></pre></td></tr></table></figure><hr><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repo = Repo(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#获取本地仓库对象</span></span><br><span class="line">index = repo.index <span class="comment">#获取本地仓库的暂存区对象</span></span><br><span class="line"><span class="comment">#index.add(r&#x27;*&#x27;) #将本地所有改动提交到暂存区</span></span><br><span class="line">index.add([<span class="string">&#x27;aaaa.txt&#x27;</span>]) <span class="comment">#将aaaa.txt文件提交到暂存区</span></span><br><span class="line">index.commit(<span class="string">&quot;此次提交备注信息&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo.git.branch(<span class="string">&quot;dev&quot;</span>) <span class="comment">#新建dev分支</span></span><br><span class="line">repo.git.checkout(<span class="string">&quot;dev&quot;</span>) <span class="comment">#切换到dev分支</span></span><br></pre></td></tr></table></figure><hr><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from git import Repo</span><br><span class="line">from git.repo.fun import is_git_dir</span><br><span class="line"></span><br><span class="line">class GitRepository(object):</span><br><span class="line">  <span class="comment">#初始化</span></span><br><span class="line">  def __init__(self,local_path,repo_url,branch = <span class="string">&#x27;master&#x27;</span>):</span><br><span class="line">    self.local_path = local_path</span><br><span class="line">    self.repo_url = repo_url</span><br><span class="line">    self.repo = None</span><br><span class="line">    self.initial(repo_url,branch)</span><br><span class="line">  def initial(self,repo_url,branch):</span><br><span class="line">    <span class="comment">#判断本地仓库存在否，不存在则新建一个</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.exists(self.local_path):</span><br><span class="line">      os.makedirs(self.local_path)</span><br><span class="line">    git_local_path = os.path.join(self.local_path,<span class="string">&quot;.git&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> not is_git_dir(git_local_path):</span><br><span class="line">      self.repo = Repo.clone_from(repo_url,to_path = self.local_path,branch = branch)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    self.repo = Repo(self.local_path)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#拉取远程代码</span></span><br><span class="line">  def pull(self):</span><br><span class="line">    self.repo.git.pull()</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#将本地提交推送到远程</span></span><br><span class="line">  def push(self):</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;master&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#切换分支</span></span><br><span class="line">  def change_to branch(self,ch_branch):</span><br><span class="line">    self.repo.git.checkout(ch_branch)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#新建tag并推送远程</span></span><br><span class="line">  def tags(self,new_tag,new_msg):</span><br><span class="line">    self.repo.create_tag(new_tag,m = new_msg)</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;origin&#x27;</span>,new_tag)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  local_path = input(<span class="string">&#x27;请输入本地仓库地址：&#x27;</span>)</span><br><span class="line">  repo_url = input(<span class="string">&#x27;请输入远程仓库地址：&#x27;</span>)</span><br><span class="line">  repo = GitRepository(local_path,repo_url)</span><br><span class="line">  </span><br><span class="line">  ch_branch = input(<span class="string">&quot;请输入要切换的分支名称:&quot;</span>)</span><br><span class="line">  repo.change_to_branch(ch_branch)</span><br><span class="line">  repo.pull()</span><br><span class="line">  </span><br><span class="line">  new_tag = input(<span class="string">&quot;请输入新建的tag:&quot;</span>)</span><br><span class="line">  new_msg = input(<span class="string">&quot;请输入本次推送的备注信息：&quot;</span>)</span><br><span class="line">  repo.tags()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;install-lib&quot;&gt;&lt;a href=&quot;#install-lib&quot; class=&quot;headerlink&quot; title=&quot;install lib&quot;&gt;&lt;/a&gt;install lib&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight ba</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode 插件记录</title>
    <link href="http://example.com/2021/03/11/yolo/yolo5/"/>
    <id>http://example.com/2021/03/11/yolo/yolo5/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h3 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h3><h3 id="部署得到的训练集"><a href="#部署得到的训练集" class="headerlink" title="部署得到的训练集"></a>部署得到的训练集</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;h3 id=&quot;训练集&quot;&gt;&lt;a href=&quot;#训练集&quot; class=&quot;headerlink&quot; title=&quot;训练集&quot;&gt;&lt;/a&gt;训练</summary>
      
    
    
    
    <category term="Project_Yolo" scheme="http://example.com/categories/Project-Yolo/"/>
    
    
  </entry>
  
  <entry>
    <title>屏幕录制demo</title>
    <link href="http://example.com/2021/03/11/yolo/screencast/"/>
    <id>http://example.com/2021/03/11/yolo/screencast/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.837Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ctwy291314/article/details/91490759">reference</a></p><hr><h3 id="dependence"><a href="#dependence" class="headerlink" title="dependence"></a>dependence</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><hr><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span>  cv2</span><br><span class="line"> </span><br><span class="line">fps = <span class="number">100</span></span><br><span class="line">start = <span class="number">1</span>  <span class="comment"># 延时录制</span></span><br><span class="line">end = <span class="number">20</span>  <span class="comment"># 自动结束时间</span></span><br><span class="line"> </span><br><span class="line">curScreen = ImageGrab.grab()  <span class="comment"># 获取屏幕对象</span></span><br><span class="line">height, width = curScreen.size</span><br><span class="line"> </span><br><span class="line">video = cv2.VideoWriter(<span class="string">&#x27;video02.avi&#x27;</span>, cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>), fps, (height, width))</span><br><span class="line"> </span><br><span class="line">imageNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    imageNum += <span class="number">1</span></span><br><span class="line">    captureImage = ImageGrab.grab()  <span class="comment"># 抓取屏幕</span></span><br><span class="line">    frame = cv2.cvtColor(np.array(captureImage), cv2.COLOR_RGB2BGR)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 显示无图像的窗口</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;capturing&#x27;</span>, np.zeros((<span class="number">1</span>, <span class="number">255</span>), np.uint8))</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 控制窗口显示位置，方便通过按键方式退出</span></span><br><span class="line">    cv2.moveWindow(<span class="string">&#x27;capturing&#x27;</span>, height - <span class="number">100</span>, width - <span class="number">100</span>)  </span><br><span class="line">    <span class="keyword">if</span> imageNum &gt; fps * start:</span><br><span class="line">        video.write(frame)</span><br><span class="line">    <span class="comment"># 退出条件    </span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">50</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>) <span class="keyword">or</span> imageNum &gt; fps * end:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">video.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ctwy291314/article/details/91490759&quot;&gt;reference&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;dependence&quot;&gt;&lt;a href=&quot;#dependence&quot; clas</summary>
      
    
    
    
    <category term="Project_Yolo" scheme="http://example.com/categories/Project-Yolo/"/>
    
    
  </entry>
  
  <entry>
    <title>UEFI --- pci 遍历</title>
    <link href="http://example.com/2021/03/11/uefi/pci_device/"/>
    <id>http://example.com/2021/03/11/uefi/pci_device/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="windows-上遍历PCI设备-Reference-Blog"><a href="#windows-上遍历PCI设备-Reference-Blog" class="headerlink" title="windows 上遍历PCI设备 | Reference Blog"></a>windows 上遍历PCI设备 | Reference <a href="https://blog.csdn.net/u013983194/article/details/46960147">Blog</a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> DWORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> WORD;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MK_PDI(bus,dev,func) (WORD)((bus&lt;&lt;8)|(dev&lt;&lt;3)|(func))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MK_PCIaddr(bus,dev,func) (DWORD)(0xf8000000L|(DWORD)MK_PDI(bus,dev,func)&lt;&lt;8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCI_CONFIG_ADDRESS 0xCF8 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCI_CONFIG_DATA 0xCFC</span></span><br><span class="line"><span class="function">DWORD <span class="title">inpd</span><span class="params">(<span class="keyword">int</span> inport)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD data;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">&quot;mov dx,inport&quot;</span></span><br><span class="line">        <span class="string">&quot;lea bx,data&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x50&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0xED&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x89,0x07&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x58&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outpd</span><span class="params">(<span class="keyword">int</span> outport,DWORD addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">&quot;mov dx,outport&quot;</span></span><br><span class="line">        <span class="string">&quot;lea bx,addr&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x50&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x8B, 0x07&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0xEF&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x58&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD <span class="title">GetData</span><span class="params">(DWORD addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD data;</span><br><span class="line">    outpd(PCI_CONFIG_ADDRESS,addr);</span><br><span class="line">    data = inpd(PCI_CONFIG_DATA);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bus,dev,func;</span><br><span class="line">    DWORD addr,addr1,addr2,addr3;</span><br><span class="line">    DWORD data,data1,data2,data3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bus#\tDev#\tFunc#&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (bus = <span class="number">0</span>; bus &lt;= <span class="number">0x63</span>; ++bus)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (dev = <span class="number">0</span>; dev &lt;= <span class="number">0x1F</span>; ++dev)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (func = <span class="number">0</span>; func &lt;= <span class="number">0x7</span>; ++func)</span><br><span class="line">            &#123;</span><br><span class="line">                addr = MK_PCIaddr(bus,dev,func);</span><br><span class="line">                data = GetData(addr);</span><br><span class="line">                <span class="keyword">if</span>((WORD)data!=<span class="number">0xFFFF</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%2.2x\t%2.2x\t%2.2x\t&quot;</span>,bus,dev,func);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;windows-上遍历PCI设备-Reference-Blog&quot;&gt;&lt;a href=&quot;#windows-上遍历PCI设备-Reference-Blog&quot; class=&quot;headerlink&quot; title=&quot;windows 上遍历PCI设备 | Reference B</summary>
      
    
    
    
    <category term="uefi" scheme="http://example.com/categories/uefi/"/>
    
    
  </entry>
  
  <entry>
    <title>hack binary example</title>
    <link href="http://example.com/2021/03/09/liveoverflow/%E9%95%9C%E5%83%8F%E5%8A%A0%E5%AF%86%E9%AA%8C%E8%AF%81%E4%BE%8B%E5%AD%90/"/>
    <id>http://example.com/2021/03/09/liveoverflow/%E9%95%9C%E5%83%8F%E5%8A%A0%E5%AF%86%E9%AA%8C%E8%AF%81%E4%BE%8B%E5%AD%90/</id>
    <published>2021-03-09T00:00:00.000Z</published>
    <updated>2021-10-24T17:10:28.833Z</updated>
    
    
    
    
    <category term="liveoverflow" scheme="http://example.com/categories/liveoverflow/"/>
    
    
  </entry>
  
</feed>

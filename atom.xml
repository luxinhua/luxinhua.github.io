<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XINHUALU&#39;S BLOG</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-08T18:16:42.067Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XinHua Lu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/09/08/idea/%E8%BF%9C%E6%8E%A7%E6%A8%A1%E5%9D%97/"/>
    <id>http://example.com/2021/09/08/idea/%E8%BF%9C%E6%8E%A7%E6%A8%A1%E5%9D%97/</id>
    <published>2021-09-08T18:16:42.067Z</published>
    <updated>2021-09-08T18:16:42.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手机程控模块"><a href="#手机程控模块" class="headerlink" title="手机程控模块"></a>手机程控模块</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="zephyr"><a href="#zephyr" class="headerlink" title="zephyr"></a>zephyr</h3><ul><li>8266驱动</li><li>MQTT协议移植</li><li>thread1 : MQTT 接收事件</li><li>thread2：MQTT 发送事件</li><li>用户APP功能自定义</li></ul><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><h3 id="stm32f0-嵌入式主控端"><a href="#stm32f0-嵌入式主控端" class="headerlink" title="stm32f0 嵌入式主控端"></a>stm32f0 嵌入式主控端</h3><h3 id="8266模块"><a href="#8266模块" class="headerlink" title="8266模块"></a>8266模块</h3><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><h3 id="终端，控制端"><a href="#终端，控制端" class="headerlink" title="终端，控制端"></a>终端，控制端</h3><p><em>XMind - Trial Version</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手机程控模块&quot;&gt;&lt;a href=&quot;#手机程控模块&quot; class=&quot;headerlink&quot; title=&quot;手机程控模块&quot;&gt;&lt;/a&gt;手机程控模块&lt;/h1&gt;&lt;h2 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/09/08/c/myprintf_log_lib/output/compile_commands/"/>
    <id>http://example.com/2021/09/08/c/myprintf_log_lib/output/compile_commands/</id>
    <published>2021-09-08T18:16:42.063Z</published>
    <updated>2021-09-08T18:16:42.063Z</updated>
    
    <content type="html"><![CDATA[[{"directory":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/output","command":"/usr/bin/cc  -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/inc -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/library/easylogger/inc  -o CMakeFiles/myprint.dir/src/main.c.o -c /cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/main.c","file":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/main.c"},{"directory":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/output","command":"/usr/bin/cc  -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/inc -I/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/library/easylogger/inc  -o CMakeFiles/myprint.dir/src/myprintf.c.o -c /cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/myprintf.c","file":"/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/src/myprintf.c"}]]]></content>
    
    
      
      
    <summary type="html">[{&quot;directory&quot;:&quot;/cygdrive/c/Users/xinhualu/Desktop/pri_xx/cpudir/simulator_print/output&quot;,&quot;command&quot;:&quot;/usr/bin/cc  -I/cygdrive/c/Users/xinhualu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>可变参数的使用案例</title>
    <link href="http://example.com/2021/09/08/c/c_fmt_va_arg/"/>
    <id>http://example.com/2021/09/08/c/c_fmt_va_arg/</id>
    <published>2021-09-08T18:16:42.059Z</published>
    <updated>2021-09-08T18:16:42.059Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="my-printf"><a href="#my-printf" class="headerlink" title="my_printf"></a>my_printf</h3><hr><p>只需要实现putchar， 就可以基于C语言的可变参数特性，实现printf. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">typedef CHAR8 *VA_LIST;</span><br><span class="line"></span><br><span class="line"><span class="comment">#define _INT_SIZE_OF(n) ((sizeof (n) + sizeof (UINTN) - 1) &amp;~(sizeof (UINTN) - 1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define VA_START(Marker, Parameter) (Marker = (VA_LIST) ((UINTN) &amp; (Parameter) + _INT_SIZE_OF (Parameter)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define VA_ARG(Marker, TYPE)   (*(TYPE *) ((Marker += _INT_SIZE_OF (TYPE)) - _INT_SIZE_OF (TYPE)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define VA_END(Marker)      (Marker = (VA_LIST) 0)</span></span><br><span class="line"></span><br><span class="line">void putchar(CHAR8 ch)&#123;</span><br><span class="line">  IoWrite16(0x3F8, ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printdec(INT8 dec)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(dec==0)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printdec(dec/10);</span><br><span class="line">    putchar( (char)(dec%10 + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printstr(CHAR8* str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*str)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar(*str++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printhex(INT8 hex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(hex==0)</span><br><span class="line">    &#123;</span><br><span class="line">        printstr(<span class="string">&quot;0x&quot;</span>);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printhex(hex/16);</span><br><span class="line">    <span class="keyword">if</span>(hex &lt; 10)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar((CHAR8)(hex%16 + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        putchar((CHAR8)(hex%16 - 10 + <span class="string">&#x27;a&#x27;</span> ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void xhlumyprint ( CHAR8* fmt, ... )</span><br><span class="line">&#123;</span><br><span class="line">    INT8  vargint = 0;</span><br><span class="line">    CHAR8* vargpch = NULL;</span><br><span class="line">    CHAR8* pfmt = NULL;</span><br><span class="line">    VA_LIST vp;</span><br><span class="line"></span><br><span class="line">    VA_START(vp, fmt);</span><br><span class="line">    pfmt = fmt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(*pfmt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*pfmt == <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            switch(*(++pfmt))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    vargpch = VA_ARG(vp, CHAR8*);</span><br><span class="line">                    printstr(vargpch);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                    vargint = VA_ARG(vp, INT8);</span><br><span class="line">                    printhex(vargint);</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">                default:</span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pfmt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            putchar(*pfmt++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    VA_END(vp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void testPirnt(void)&#123;</span><br><span class="line">  putchar(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">  putchar(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  printdec(55);</span><br><span class="line">  printstr(<span class="string">&quot;afwefawefa&quot;</span>);</span><br><span class="line">  printhex(0xff);</span><br><span class="line">  putchar(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  xhlumyprint(<span class="string">&quot;xhlu %x  \n&quot;</span>, 0x44);</span><br><span class="line">  xhlumyprint(<span class="string">&quot;xhlu %s  \n&quot;</span>, <span class="string">&quot;fawefawef&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;my-printf&quot;&gt;&lt;a href=&quot;#my-printf&quot; class=&quot;headerlink&quot; title=&quot;my_printf&quot;&gt;&lt;/a&gt;my_printf&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;只需要实现putchar， 就可以基于C语言的可变参数特性，实现</summary>
      
    
    
    
    <category term="c" scheme="http://example.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>BiosInterFace update 的思路</title>
    <link href="http://example.com/2021/09/08/bios/06_Biso_interface_update/"/>
    <id>http://example.com/2021/09/08/bios/06_Biso_interface_update/</id>
    <published>2021-09-08T18:16:42.059Z</published>
    <updated>2021-09-08T18:16:42.059Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><hr><ul><li>PMFW<br>专门控制CLK/power的一个bin ,</li><li>SMU<br>BIOS的菜单控制，设置值，分发值到具体的模块<br>SMU和PMFW通过msg机制更新biosinterfaceTable的结构体来通信。</li><li>MSG机制<br>一端，向某个寄存器写入消息ID，消息参数，poll 等待response，另一端是硬件中断，拿到硬件中断后，处理写入response消息。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;PMFW&lt;br&gt;专门控制CLK/power的一个bin ,&lt;/li&gt;
&lt;li&gt;SMU&lt;br&gt;BIOS的菜单控</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title>BIOS protect mode 总结</title>
    <link href="http://example.com/2021/09/08/bios/00_bios_protect_mode_enable_flow/"/>
    <id>http://example.com/2021/09/08/bios/00_bios_protect_mode_enable_flow/</id>
    <published>2021-09-08T18:16:41.807Z</published>
    <updated>2021-09-08T18:16:41.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="保护模式流程："><a href="#保护模式流程：" class="headerlink" title="保护模式流程："></a>保护模式流程：</h3><hr><pre><code>1. 准备GDT。2. 用lgdt加载gdtr。3. 打开A20。4. 置cr0的PE位。5. 跳转，进入保护模式。</code></pre><hr><h3 id="汇编流程"><a href="#汇编流程" class="headerlink" title="汇编流程"></a>汇编流程</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">; Save BIST state <span class="keyword">in</span> EAX</span><br><span class="line">mov     ebp,  eax   </span><br><span class="line">; BspApCheck</span><br><span class="line">mov     ecx, APIC_BASE_ADDRESS  ; MSR:0000_001B</span><br><span class="line">rdmsr     // 读取ecx地址中的值，赋给 edx, eax( low 16 bit ) </span><br><span class="line">/*  </span><br><span class="line">BSC: boot strap core. Read-write,Volatile. Reset: X. </span><br><span class="line">0=The core is not the boot core of the BSP. </span><br><span class="line">1=The core is the boot core of the BSP.</span><br><span class="line">*/ </span><br><span class="line">// 找到最先启动的核</span><br><span class="line">bt      eax, APIC_BSC           ; Is this the BSC?   APIC_BSC = 8, bt,检测某一位是否被置位， 这里就是检测第8位 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mov     esi,  OFFSET GdtDesc  // 初始化GDT把GDT地址赋给esi. </span><br><span class="line"></span><br><span class="line">GdtDesc:                                                ; GDT descriptor</span><br><span class="line">OffsetGDTDesc       EQU     $ - Flat32Start</span><br><span class="line">DW      GDT_SIZE - 1                ; GDT <span class="built_in">limit</span></span><br><span class="line">DD      OFFSET BootGDTtable ; GDT base address</span><br><span class="line"></span><br><span class="line">汇编定义了 BootGDTtable， 里面有数据段，代码段等各段定义</span><br><span class="line"></span><br><span class="line">DB      66h     // 本意是存储一个值为66H, 但是这里是80386芯片BUG 引入的命令用于切换16/32 位，</span><br><span class="line"></span><br><span class="line">66 8b c3  32位机器码命令</span><br><span class="line">8b c3     16位的命令</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">1. fword表示操作的是32位的地址 ， （ 配置上面的66 命令，确保是32位操作 ？）</span><br><span class="line">2. 之前包GDT的地址赋给了esi , si是esi的低16位，</span><br><span class="line">3， 这条命令是把，esi 低16位赋给GDTR寄存器，方便其他地方调用</span><br><span class="line">*/</span><br><span class="line">lgdt    fword ptr cs:[si]   </span><br><span class="line">/*</span><br><span class="line">读出CR0(32位的控制寄存器)到eax ； </span><br><span class="line">[0] PE  protect <span class="built_in">enable</span> 是否启动保护模式</span><br><span class="line">[1] MP  moniter coprocessor 监控协处理器</span><br><span class="line">[2] EM  <span class="built_in">emulate</span> coprocessor 模拟协处理器 = 1 无法使用协处理器</span><br><span class="line">[3] TS  task switch, 任务完成置1 ， 置1后无法使用协处理器</span><br><span class="line">[4] 微处理器的拓展位，处理器类型  287协处理器，387浮点协处理器</span><br><span class="line">[31] 分页使能，是否使用page机制</span><br><span class="line">*/</span><br><span class="line">mov     eax, cr0                           ; Get control register 0</span><br><span class="line">/*</span><br><span class="line">启动保护模式 </span><br><span class="line">启动协处理器</span><br><span class="line">*/</span><br><span class="line">or      eax, 00000003h                     ; Set PE bit (bit <span class="comment">#0) &amp; MP bit (bit #1)</span></span><br><span class="line">mov     cr0, eax                           ; Activate protected mode</span><br><span class="line">/*</span><br><span class="line">读出CR４　</span><br><span class="line">[0] VME  virtaul-8086 mode extensions  给运行 invirtual-8086的软件硬件加速</span><br><span class="line">[1] PVI  protect-mode virtaul interrupt support. ( 中断反应在 RFLAGS 寄存器红的 VIF/VIP 2个bit中 )</span><br><span class="line">[2] TSD  time-stamp <span class="built_in">disable</span>  0/1 表示是否可以读取 RDTSC/RDTSCP </span><br><span class="line">[3] DE   Debug extension , <span class="built_in">enable</span> IO breakpoint. </span><br><span class="line">[4] PSE  page-size extension</span><br><span class="line">[5] PAE  物理地址拓展， 使能的话，支持2M的超级页 </span><br><span class="line">[6] MCE  machine-check <span class="built_in">enable</span> </span><br><span class="line">[7] PGE  page global <span class="built_in">enable</span></span><br><span class="line">[8] PCE  performance-monitoring counter <span class="built_in">enable</span> </span><br><span class="line">[9] OSFXSR  256/128bit media 指令使能</span><br><span class="line">[10] OSXMMEXCPT <span class="built_in">enable</span> 处理 256/128bit media 指令异常 </span><br><span class="line">*/</span><br><span class="line">mov     eax, cr4                           ; Get control register 4</span><br><span class="line">or      eax, 00000600h                     ; Set OSFXSR bit (bit <span class="comment">#9) &amp; OSXMMEXCPT bit (bit #10)</span></span><br><span class="line">/*</span><br><span class="line">使能这俩位</span><br><span class="line">[9] OSFXSR  256/128bit media 指令使能</span><br><span class="line">[10] OSXMMEXCPT <span class="built_in">enable</span> 处理 256/128bit media 指令异常 </span><br><span class="line">*/</span><br><span class="line">mov     cr4, eax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 段初始化</span><br><span class="line">mov     ax, SYS_DATA_SEL   // 复制申请的系统数据段的地址给ax </span><br><span class="line"></span><br><span class="line">; System data segment descriptor</span><br><span class="line">SYS_DATA_SEL        equ     $ - GDT_BASE               ; Selector [0x18]</span><br><span class="line">DW      0FFFFh                     ; <span class="built_in">limit</span> 0xFFFFF</span><br><span class="line">DW      0                          ; base 0</span><br><span class="line">DB      0</span><br><span class="line">DB      093h                       ; present, ring 0, data, expand-up, not-writable</span><br><span class="line">DB      0CFh                       ; page-granular, 32-bit</span><br><span class="line">DB      0</span><br><span class="line"></span><br><span class="line">// 同样的地址赋给各个段寄存器</span><br><span class="line">mov     ds, ax</span><br><span class="line">mov     es, ax</span><br><span class="line">mov     fs, ax</span><br><span class="line">mov     gs, ax</span><br><span class="line">mov     ss, ax </span><br><span class="line">// 目前前面都是在protect 16模式下 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; Go to Protected32  </span><br><span class="line">mov esi, offset NemInitLinearAddress</span><br><span class="line"></span><br><span class="line">NemInitLinearAddress   LABEL   FWORD // 没有定义东西</span><br><span class="line"></span><br><span class="line">jmp     fword ptr cs:[si]   // 这里是个逻辑地址， </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;保护模式流程：&quot;&gt;&lt;a href=&quot;#保护模式流程：&quot; class=&quot;headerlink&quot; title=&quot;保护模式流程：&quot;&gt;&lt;/a&gt;保护模式流程：&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;1. 准备GDT。
2. 用lgdt加载gdtr。
3. 打开A20。
4</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title>BIOS 各种流程</title>
    <link href="http://example.com/2021/09/08/bios/02_bios_flow/"/>
    <id>http://example.com/2021/09/08/bios/02_bios_flow/</id>
    <published>2021-09-08T18:16:41.807Z</published>
    <updated>2021-09-08T18:16:41.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BIOS-Training-Flow"><a href="#BIOS-Training-Flow" class="headerlink" title="BIOS Training Flow"></a>BIOS Training Flow</h3><hr><p><a href="https://github.com/tianocore-training/Tianocore_Training_Contents/wiki/Catalog_of_Training">REFERENCE</a> link.</p><hr><h3 id="reference-file-list"><a href="#reference-file-list" class="headerlink" title="reference file list"></a>reference file list</h3><hr><a href="/2021/09/08/bios/02_bios_flow/AMD_PI_Spec.pdf" title="AMD_PI_Spec.pdf">AMD_PI_Spec.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/PI_Spec_1_7_A_final_May1.pdf" title="PI_Spec_1_7_A_final_May1.pdf">PI_Spec_1_7_A_final_May1.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-DecSpecification.pdf" title="edk2-DecSpecification.pdf">edk2-DecSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-DscSpecification.pdf" title="edk2-DscSpecification.pdf">edk2-DscSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-FdfSpecification.pdf" title="edk2-FdfSpecification.pdf">edk2-FdfSpecification.pdf</a>   <br><a href="/2021/09/08/bios/02_bios_flow/edk2-IdfSpecification.pdf" title="edk2-IdfSpecification.pdf">edk2-IdfSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-PcdSpecification.pdf" title="edk2-PcdSpecification.pdf">edk2-PcdSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-UniSpecification.pdf" title="edk2-UniSpecification.pdf">edk2-UniSpecification.pdf</a> <br><a href="/2021/09/08/bios/02_bios_flow/edk2-VfrSpecification.pdf" title="edk2-VfrSpecification.pdf">edk2-VfrSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-BuildSpecification.pdf" title="edk2-BuildSpecification.pdf">edk2-BuildSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-TemplateSpecification.pdf" title="edk2-TemplateSpecification.pdf">edk2-TemplateSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/EDK_II_Secure_Coding_Guide.pdf" title="EDK_II_Secure_Coding_Guide.pdf">EDK_II_Secure_Coding_Guide.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/UEFI_Driver_HII_Win_Lab_Guide.pdf" title="UEFI_Driver_HII_Win_Lab_Guide.pdf">UEFI_Driver_HII_Win_Lab_Guide.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/UEFI_Driver_HII_Linux_Lab_Guide.pdf" title="UEFI_Driver_HII_Linux_Lab_Guide.pdf">UEFI_Driver_HII_Linux_Lab_Guide.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-UefiDriverWritersGuide-master.pdf" title="edk2-UefiDriverWritersGuide-master.pdf">edk2-UefiDriverWritersGuide-master.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-CCodingStandardsSpecification.pdf" title="edk2-CCodingStandardsSpecification.pdf">edk2-CCodingStandardsSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/ATBB-Memory_Protection_in_UEFI_BIOS.pdf" title="ATBB-Memory_Protection_in_UEFI_BIOS.pdf">ATBB-Memory_Protection_in_UEFI_BIOS.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/Understanding_UEFI_Secure_Boot_Chain.pdf" title="Understanding_UEFI_Secure_Boot_Chain.pdf">Understanding_UEFI_Secure_Boot_Chain.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-MetaDataExpressionSyntaxSpecification.pdf" title="edk2-MetaDataExpressionSyntaxSpecification.pdf">edk2-MetaDataExpressionSyntaxSpecification.pdf</a>  <br><a href="/2021/09/08/bios/02_bios_flow/edk2-PythonDevelopmentProcessSpecification.pdf" title="edk2-PythonDevelopmentProcessSpecification.pdf">edk2-PythonDevelopmentProcessSpecification.pdf</a>  <br>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;BIOS-Training-Flow&quot;&gt;&lt;a href=&quot;#BIOS-Training-Flow&quot; class=&quot;headerlink&quot; title=&quot;BIOS Training Flow&quot;&gt;&lt;/a&gt;BIOS Training Flow&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    <category term="bios" scheme="http://example.com/categories/bios/"/>
    
    
  </entry>
  
  <entry>
    <title>list operate</title>
    <link href="http://example.com/2021/06/09/c/list_operate/"/>
    <id>http://example.com/2021/06/09/c/list_operate/</id>
    <published>2021-06-09T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.059Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="list-操作"><a href="#list-操作" class="headerlink" title="list 操作"></a>list 操作</h3><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">head</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span>, *<span class="title">firstnode</span>;</span></span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    p-&gt;data = <span class="number">0</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    firstnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    firstnode-&gt;data = <span class="number">0</span>;</span><br><span class="line">    firstnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;next = firstnode;</span><br><span class="line">    head = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct node * <span class="title">listAdd</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newnode</span>;</span></span><br><span class="line">    newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">    newnode-&gt;data = data;</span><br><span class="line">    newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = newnode;</span><br><span class="line">    <span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listDel</span><span class="params">(struct node * node)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">q</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data == node-&gt;data)</span><br><span class="line">                q-&gt;next = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    listInit();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">a</span> =</span> listAdd(<span class="number">1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">b</span> =</span> listAdd(<span class="number">2</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">c</span> =</span> listAdd(<span class="number">3</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">d</span> =</span> listAdd(<span class="number">4</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">e</span> =</span> listAdd(<span class="number">5</span>);</span><br><span class="line">    listPrint();</span><br><span class="line"></span><br><span class="line">    listDel(a);</span><br><span class="line">    listDel(b);</span><br><span class="line">    listPrint();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./a.exe</span><br><span class="line">0  1  2  3  4  5</span><br><span class="line">0  3  4  5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;list-操作&quot;&gt;&lt;a href=&quot;#list-操作&quot; class=&quot;headerlink&quot; title=&quot;list 操作&quot;&gt;&lt;/a&gt;list 操作&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="c" scheme="http://example.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>cmake build summary</title>
    <link href="http://example.com/2021/06/08/c/cmake_build/"/>
    <id>http://example.com/2021/06/08/c/cmake_build/</id>
    <published>2021-06-08T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.059Z</updated>
    
    <content type="html"><![CDATA[<p>cmake </p><hr><h3 id="最小例子"><a href="#最小例子" class="headerlink" title="最小例子"></a>最小例子</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(CalculateSqrt VERSION 1.0) <span class="comment"># 设定工程名和版本号</span></span><br><span class="line">add_executable(CalculateSqrt main.c)</span><br></pre></td></tr></table></figure><hr><h3 id="指定头文件路径"><a href="#指定头文件路径" class="headerlink" title="指定头文件路径"></a>指定头文件路径</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定项目编译的时候需要include的文件路径，PROJECT_BINARY_DIR变量为编译发生的目录，也就是make执行的目录，PROJECT_SOURCE_DIR为工程所在的目录</span></span><br><span class="line"><span class="comment"># target_include_directories官方文档：https://cmake.org/cmake/help/v3.3/command/target_include_directories.html</span></span><br><span class="line">target_include_directories(CalculateSqrt PUBLIC <span class="string">&quot;<span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="编译系统的配置导入到头文件中"><a href="#编译系统的配置导入到头文件中" class="headerlink" title="编译系统的配置导入到头文件中"></a>编译系统的配置导入到头文件中</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">自动生成CalculateSqrtConfig.h文件，直接include， 可以用作开关定义</span><br><span class="line"><span class="built_in">set</span>(TestA 1) 或者  option(TestA <span class="string">&quot;Test A&quot;</span> 1)</span><br><span class="line">configure_file(CalculateSqrtConfig.h.in CalculateSqrtConfig.h)</span><br><span class="line">CalculateSqrtConfig.h.in 文件中： </span><br><span class="line"><span class="comment">#define testA  @TestA@</span></span><br></pre></td></tr></table></figure><hr><h3 id="添加子目录进入编译系统"><a href="#添加子目录进入编译系统" class="headerlink" title="添加子目录进入编译系统"></a>添加子目录进入编译系统</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_subdirectory(MathFunctions) </span><br></pre></td></tr></table></figure><hr><h3 id="添加链接库"><a href="#添加链接库" class="headerlink" title="添加链接库"></a>添加链接库</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该指令的作用为将目标文件与库文件进行链接 </span></span><br><span class="line"><span class="comment"># target_link_libraries官方文档:https://cmake.org/cmake/help/latest/command/target_link_libraries.html </span></span><br><span class="line">target_link_libraries(CalculateSqrt PUBLIC MathFunctions) </span><br></pre></td></tr></table></figure><hr><h3 id="源码生成库"><a href="#源码生成库" class="headerlink" title="源码生成库"></a>源码生成库</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用特定的源码为项目增加lib </span></span><br><span class="line">add_library(MathFunctions mysqrt.cpp) </span><br></pre></td></tr></table></figure><hr><h3 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h3><hr><p>添加在CMakeList.txt<br>就是决定执行make install 的时候，拷贝哪些文件到lib/bin/include</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">install(TARGETS MathFunctions DESTINATION lib) </span><br><span class="line">install(FILES MathFunctions.h DESTINATION include) </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cmake &lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;最小例子&quot;&gt;&lt;a href=&quot;#最小例子&quot; class=&quot;headerlink&quot; title=&quot;最小例子&quot;&gt;&lt;/a&gt;最小例子&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="cmake" scheme="http://example.com/categories/cmake/"/>
    
    
  </entry>
  
  <entry>
    <title>自己实现动态内存分配思路（有点伪）</title>
    <link href="http://example.com/2021/06/08/c/dynamic_mem_alloc/"/>
    <id>http://example.com/2021/06/08/c/dynamic_mem_alloc/</id>
    <published>2021-06-08T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.059Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="伪动态内存分配"><a href="#伪动态内存分配" class="headerlink" title="伪动态内存分配"></a>伪动态内存分配</h3><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMMAXSIZE 100</span></span><br><span class="line"><span class="keyword">int</span> mem[MEMMAXSIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> used;</span><br><span class="line">    <span class="keyword">int</span> index_baseaddr;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">HEAD</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">splitmem</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> allsize, <span class="keyword">int</span> needsize)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  index+allsize-needsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct datanode * <span class="title">spaceRequest</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span> =</span> HEAD;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next; </span><br><span class="line">        <span class="keyword">if</span> (p-&gt;used == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;size &gt;= size)&#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">newnode</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct  datanode));</span><br><span class="line">                newnode-&gt;index_baseaddr = splitmem(p-&gt;index_baseaddr,p-&gt;size,size);</span><br><span class="line">                newnode-&gt;size = size;</span><br><span class="line">                newnode-&gt;used = <span class="number">1</span>;</span><br><span class="line">                p-&gt;size -= size;</span><br><span class="line">                newnode-&gt;next = p-&gt;next;</span><br><span class="line">                p-&gt;next = newnode;</span><br><span class="line">                <span class="keyword">return</span> newnode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spaceFree</span><span class="params">(struct datanode* space)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span> =</span> HEAD;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">q</span>,*<span class="title">pp</span>;</span></span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        pp = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;index_baseaddr == space-&gt;index_baseaddr &amp;&amp; p-&gt;size == space-&gt;size)&#123;</span><br><span class="line">            p-&gt;used = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (q-&gt;used == <span class="number">0</span>)&#123;</span><br><span class="line">                q-&gt;size += p-&gt;size;</span><br><span class="line">                q-&gt;next = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pp-&gt;used==<span class="number">0</span>)&#123;</span><br><span class="line">                    p-&gt;size += pp-&gt;size;</span><br><span class="line">                    p-&gt;next = pp-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span> =</span> HEAD;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(i=p-&gt;index_baseaddr;i&lt;(p-&gt;index_baseaddr+p-&gt;size);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;used == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\e[0;32m%d  &quot;</span>,mem[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\e[0m%d  &quot;</span>,mem[i]);</span><br><span class="line">            <span class="keyword">if</span>(count++ &gt; <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> *<span class="title">firstnode</span>;</span></span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct datanode));</span><br><span class="line">    firstnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct datanode));</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;index_baseaddr = <span class="number">0</span>;</span><br><span class="line">    p-&gt;size = <span class="number">0</span>;</span><br><span class="line">    p-&gt;used = <span class="number">1</span>;</span><br><span class="line">    firstnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    firstnode-&gt;used = <span class="number">0</span>;</span><br><span class="line">    firstnode-&gt;index_baseaddr = <span class="number">0</span>;</span><br><span class="line">    firstnode-&gt;size = MEMMAXSIZE;</span><br><span class="line">    p-&gt;next = firstnode;</span><br><span class="line">    HEAD = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    memInit();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> * <span class="title">a</span> =</span> spaceRequest(<span class="number">10</span>);</span><br><span class="line">    memPrint();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> * <span class="title">b</span> =</span> spaceRequest(<span class="number">2</span>);</span><br><span class="line">    memPrint();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datanode</span> * <span class="title">c</span> =</span> spaceRequest(<span class="number">4</span>);</span><br><span class="line">    memPrint();</span><br><span class="line"></span><br><span class="line">    spaceFree(a);</span><br><span class="line">    memPrint();</span><br><span class="line">    spaceFree(b);</span><br><span class="line">    memPrint();</span><br><span class="line">    spaceFree(c);</span><br><span class="line">    memPrint();        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="结果效果（绿色是申请的内存"><a href="#结果效果（绿色是申请的内存" class="headerlink" title="结果效果（绿色是申请的内存)"></a>结果效果（绿色是申请的内存)</h3><hr><p><img src="mem.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;伪动态内存分配&quot;&gt;&lt;a href=&quot;#伪动态内存分配&quot; class=&quot;headerlink&quot; title=&quot;伪动态内存分配&quot;&gt;&lt;/a&gt;伪动态内存分配&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="c" scheme="http://example.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/03_python_dev_lib_%E8%BF%9B%E5%BA%A6/"/>
    <id>http://example.com/2021/04/23/dev_utils/03_python_dev_lib_%E8%BF%9B%E5%BA%A6/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.067Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="ref-https-blog-csdn-net-qq-44647926-article-details-89499842"><a href="#ref-https-blog-csdn-net-qq-44647926-article-details-89499842" class="headerlink" title="ref : https://blog.csdn.net/qq_44647926/article/details/89499842"></a>ref : <a href="https://blog.csdn.net/qq_44647926/article/details/89499842">https://blog.csdn.net/qq_44647926/article/details/89499842</a></h3><hr><hr><h3 id="进度条-demo"><a href="#进度条-demo" class="headerlink" title="进度条 demo"></a>进度条 demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">scale=50 <span class="comment">#尽量不要超过50 超过屏幕宽度会自动执行换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行开始&quot;</span>.center(scale//2,<span class="string">&quot;-&quot;</span>))</span><br><span class="line">start=time.perf_counter()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale+1):</span><br><span class="line">a=<span class="string">&quot;*&quot;</span>*i</span><br><span class="line">b=<span class="string">&quot;.&quot;</span>*(scale-i)</span><br><span class="line">c=(i/scale)*100</span><br><span class="line">dur=time.perf_counter()-start</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\r&#123;:&lt;3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;] time:&#123;:.2f&#125;&quot;</span>.format(c,a,b,dur),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#\r将光标移动到前面</span></span><br><span class="line"><span class="comment">#&#123;:^3.0f&#125; 左对齐 保留3位整数位 保留0位小数位</span></span><br><span class="line">time.sleep(0.1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行结束&quot;</span>.center(scale//2,<span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count_down = 10  <span class="comment"># 设置倒计时时间，单位：秒</span></span><br><span class="line">interval = 1  <span class="comment"># 设置屏幕刷新的间隔时间，单位：秒</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0, int(count_down/interval)+1):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>+<span class="string">&quot;▇▇▇▇&quot;</span>*i+<span class="string">&quot; &quot;</span>+str(i*10)+<span class="string">&quot;%&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">     time.sleep(interval)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n加载完毕&quot;</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">count_down = 10  <span class="comment"># 设置倒计时时间，单位：秒</span></span><br><span class="line">interval = 0.25  <span class="comment"># 设置屏幕刷新的间隔时间，单位：秒</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0, int(count_down/interval)):</span><br><span class="line">    ch_list = [<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;-&quot;</span>]</span><br><span class="line">    index = i % 4</span><br><span class="line">    msg = <span class="string">&quot;\r程序运行中 &quot;</span> + ch_list[index]</span><br><span class="line">    <span class="built_in">print</span>(msg, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    time.sleep(interval)</span><br><span class="line"><span class="built_in">print</span>(u<span class="string">&quot;\r结束&quot;</span> + <span class="string">&quot;  &quot;</span>*len(msg))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;ref-https-blog-csdn-net-qq-44647926-article-details-89499842&quot;&gt;&lt;a href=&quot;#ref-https-blog-csdn-net-qq-44647926-article-details-894</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/00_python_dev_lib_git/"/>
    <id>http://example.com/2021/04/23/dev_utils/00_python_dev_lib_git/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.067Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="install-lib"><a href="#install-lib" class="headerlink" title="install lib"></a>install lib</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install GitPython <span class="comment">#在线安装会自动安装其依赖模块</span></span><br></pre></td></tr></table></figure><hr><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.clone_from(<span class="string">&quot;git远程给仓库地址&quot;</span>,to_path=<span class="string">&quot;将要克隆到的本地仓库地址&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.init(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#aa为要初始化的本地仓库</span></span><br></pre></td></tr></table></figure><hr><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repo = Repo(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#获取本地仓库对象</span></span><br><span class="line">index = repo.index <span class="comment">#获取本地仓库的暂存区对象</span></span><br><span class="line"><span class="comment">#index.add(r&#x27;*&#x27;) #将本地所有改动提交到暂存区</span></span><br><span class="line">index.add([<span class="string">&#x27;aaaa.txt&#x27;</span>]) <span class="comment">#将aaaa.txt文件提交到暂存区</span></span><br><span class="line">index.commit(<span class="string">&quot;此次提交备注信息&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo.git.branch(<span class="string">&quot;dev&quot;</span>) <span class="comment">#新建dev分支</span></span><br><span class="line">repo.git.checkout(<span class="string">&quot;dev&quot;</span>) <span class="comment">#切换到dev分支</span></span><br></pre></td></tr></table></figure><hr><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from git import Repo</span><br><span class="line">from git.repo.fun import is_git_dir</span><br><span class="line"></span><br><span class="line">class GitRepository(object):</span><br><span class="line">  <span class="comment">#初始化</span></span><br><span class="line">  def __init__(self,local_path,repo_url,branch = <span class="string">&#x27;master&#x27;</span>):</span><br><span class="line">    self.local_path = local_path</span><br><span class="line">    self.repo_url = repo_url</span><br><span class="line">    self.repo = None</span><br><span class="line">    self.initial(repo_url,branch)</span><br><span class="line">  def initial(self,repo_url,branch):</span><br><span class="line">    <span class="comment">#判断本地仓库存在否，不存在则新建一个</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.exists(self.local_path):</span><br><span class="line">      os.makedirs(self.local_path)</span><br><span class="line">    git_local_path = os.path.join(self.local_path,<span class="string">&quot;.git&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> not is_git_dir(git_local_path):</span><br><span class="line">      self.repo = Repo.clone_from(repo_url,to_path = self.local_path,branch = branch)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    self.repo = Repo(self.local_path)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#拉取远程代码</span></span><br><span class="line">  def pull(self):</span><br><span class="line">    self.repo.git.pull()</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#将本地提交推送到远程</span></span><br><span class="line">  def push(self):</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;master&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#切换分支</span></span><br><span class="line">  def change_to branch(self,ch_branch):</span><br><span class="line">    self.repo.git.checkout(ch_branch)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#新建tag并推送远程</span></span><br><span class="line">  def tags(self,new_tag,new_msg):</span><br><span class="line">    self.repo.create_tag(new_tag,m = new_msg)</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;origin&#x27;</span>,new_tag)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  local_path = input(<span class="string">&#x27;请输入本地仓库地址：&#x27;</span>)</span><br><span class="line">  repo_url = input(<span class="string">&#x27;请输入远程仓库地址：&#x27;</span>)</span><br><span class="line">  repo = GitRepository(local_path,repo_url)</span><br><span class="line">  </span><br><span class="line">  ch_branch = input(<span class="string">&quot;请输入要切换的分支名称:&quot;</span>)</span><br><span class="line">  repo.change_to_branch(ch_branch)</span><br><span class="line">  repo.pull()</span><br><span class="line">  </span><br><span class="line">  new_tag = input(<span class="string">&quot;请输入新建的tag:&quot;</span>)</span><br><span class="line">  new_msg = input(<span class="string">&quot;请输入本次推送的备注信息：&quot;</span>)</span><br><span class="line">  repo.tags()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;install-lib&quot;&gt;&lt;a href=&quot;#install-lib&quot; class=&quot;headerlink&quot; title=&quot;install lib&quot;&gt;&lt;/a&gt;install lib&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight ba</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/01_python_dev_lib_logger/"/>
    <id>http://example.com/2021/04/23/dev_utils/01_python_dev_lib_logger/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.067Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="install-lib"><a href="#install-lib" class="headerlink" title="install lib"></a>install lib</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install GitPython <span class="comment">#在线安装会自动安装其依赖模块</span></span><br></pre></td></tr></table></figure><hr><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.clone_from(<span class="string">&quot;git远程给仓库地址&quot;</span>,to_path=<span class="string">&quot;将要克隆到的本地仓库地址&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Repo.init(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#aa为要初始化的本地仓库</span></span><br></pre></td></tr></table></figure><hr><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repo = Repo(r<span class="string">&quot;C:\Users\Icey\Desktop\aa&quot;</span>) <span class="comment">#获取本地仓库对象</span></span><br><span class="line">index = repo.index <span class="comment">#获取本地仓库的暂存区对象</span></span><br><span class="line"><span class="comment">#index.add(r&#x27;*&#x27;) #将本地所有改动提交到暂存区</span></span><br><span class="line">index.add([<span class="string">&#x27;aaaa.txt&#x27;</span>]) <span class="comment">#将aaaa.txt文件提交到暂存区</span></span><br><span class="line">index.commit(<span class="string">&quot;此次提交备注信息&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo.git.branch(<span class="string">&quot;dev&quot;</span>) <span class="comment">#新建dev分支</span></span><br><span class="line">repo.git.checkout(<span class="string">&quot;dev&quot;</span>) <span class="comment">#切换到dev分支</span></span><br></pre></td></tr></table></figure><hr><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from git import Repo</span><br><span class="line">from git.repo.fun import is_git_dir</span><br><span class="line"></span><br><span class="line">class GitRepository(object):</span><br><span class="line">  <span class="comment">#初始化</span></span><br><span class="line">  def __init__(self,local_path,repo_url,branch = <span class="string">&#x27;master&#x27;</span>):</span><br><span class="line">    self.local_path = local_path</span><br><span class="line">    self.repo_url = repo_url</span><br><span class="line">    self.repo = None</span><br><span class="line">    self.initial(repo_url,branch)</span><br><span class="line">  def initial(self,repo_url,branch):</span><br><span class="line">    <span class="comment">#判断本地仓库存在否，不存在则新建一个</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.exists(self.local_path):</span><br><span class="line">      os.makedirs(self.local_path)</span><br><span class="line">    git_local_path = os.path.join(self.local_path,<span class="string">&quot;.git&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> not is_git_dir(git_local_path):</span><br><span class="line">      self.repo = Repo.clone_from(repo_url,to_path = self.local_path,branch = branch)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    self.repo = Repo(self.local_path)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#拉取远程代码</span></span><br><span class="line">  def pull(self):</span><br><span class="line">    self.repo.git.pull()</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#将本地提交推送到远程</span></span><br><span class="line">  def push(self):</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;master&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#切换分支</span></span><br><span class="line">  def change_to branch(self,ch_branch):</span><br><span class="line">    self.repo.git.checkout(ch_branch)</span><br><span class="line">    </span><br><span class="line">  <span class="comment">#新建tag并推送远程</span></span><br><span class="line">  def tags(self,new_tag,new_msg):</span><br><span class="line">    self.repo.create_tag(new_tag,m = new_msg)</span><br><span class="line">    self.repo.git.push(<span class="string">&#x27;origin&#x27;</span>,new_tag)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  local_path = input(<span class="string">&#x27;请输入本地仓库地址：&#x27;</span>)</span><br><span class="line">  repo_url = input(<span class="string">&#x27;请输入远程仓库地址：&#x27;</span>)</span><br><span class="line">  repo = GitRepository(local_path,repo_url)</span><br><span class="line">  </span><br><span class="line">  ch_branch = input(<span class="string">&quot;请输入要切换的分支名称:&quot;</span>)</span><br><span class="line">  repo.change_to_branch(ch_branch)</span><br><span class="line">  repo.pull()</span><br><span class="line">  </span><br><span class="line">  new_tag = input(<span class="string">&quot;请输入新建的tag:&quot;</span>)</span><br><span class="line">  new_msg = input(<span class="string">&quot;请输入本次推送的备注信息：&quot;</span>)</span><br><span class="line">  repo.tags()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;install-lib&quot;&gt;&lt;a href=&quot;#install-lib&quot; class=&quot;headerlink&quot; title=&quot;install lib&quot;&gt;&lt;/a&gt;install lib&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight ba</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO Hacker 主题中文说明</title>
    <link href="http://example.com/2021/04/23/dev_utils/02_python_dev_lib_cmd_parse/"/>
    <id>http://example.com/2021/04/23/dev_utils/02_python_dev_lib_cmd_parse/</id>
    <published>2021-04-23T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.067Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import argparseparser = argparse.ArgumentParser(<span class="string">&#x27;introduce how to use&#x27;</span>)<span class="comment">#创建一个解析器</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, <span class="comment">#必选参数                            </span></span><br><span class="line">                    metavar=<span class="string">&#x27;number&#x27;</span>, <span class="comment">#&#x27;usage&#x27;显示成&#x27;number&#x27;                    </span></span><br><span class="line">                    <span class="built_in">type</span>=int, <span class="comment">#整形变量                    </span></span><br><span class="line">                    nargs=<span class="string">&#x27;+&#x27;</span>, <span class="comment">#至少有一个参数值                    </span></span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;an inter for the accumulator&#x27;</span>)<span class="comment">#帮助文档显示</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--test-para&#x27;</span>,<span class="comment">#可选参数                    </span></span><br><span class="line">                    required=False,<span class="comment">#是否必须携带                    </span></span><br><span class="line">                    default=<span class="string">&#x27;this is just a test&#x27;</span>,<span class="comment">#默认值                    </span></span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;wirte some instruction here&#x27;</span>)<span class="comment">#帮助文档</span></span><br><span class="line">args = parser.parse_args()<span class="comment">#解析</span></span><br><span class="line"><span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode 插件记录</title>
    <link href="http://example.com/2021/03/11/yolo/yolo5/"/>
    <id>http://example.com/2021/03/11/yolo/yolo5/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h3 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h3><h3 id="部署得到的训练集"><a href="#部署得到的训练集" class="headerlink" title="部署得到的训练集"></a>部署得到的训练集</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;h3 id=&quot;训练集&quot;&gt;&lt;a href=&quot;#训练集&quot; class=&quot;headerlink&quot; title=&quot;训练集&quot;&gt;&lt;/a&gt;训练</summary>
      
    
    
    
    <category term="Project_Yolo" scheme="http://example.com/categories/Project-Yolo/"/>
    
    
  </entry>
  
  <entry>
    <title>屏幕录制demo</title>
    <link href="http://example.com/2021/03/11/yolo/screencast/"/>
    <id>http://example.com/2021/03/11/yolo/screencast/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.075Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ctwy291314/article/details/91490759">reference</a></p><hr><h3 id="dependence"><a href="#dependence" class="headerlink" title="dependence"></a>dependence</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><hr><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span>  cv2</span><br><span class="line"> </span><br><span class="line">fps = <span class="number">100</span></span><br><span class="line">start = <span class="number">1</span>  <span class="comment"># 延时录制</span></span><br><span class="line">end = <span class="number">20</span>  <span class="comment"># 自动结束时间</span></span><br><span class="line"> </span><br><span class="line">curScreen = ImageGrab.grab()  <span class="comment"># 获取屏幕对象</span></span><br><span class="line">height, width = curScreen.size</span><br><span class="line"> </span><br><span class="line">video = cv2.VideoWriter(<span class="string">&#x27;video02.avi&#x27;</span>, cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>), fps, (height, width))</span><br><span class="line"> </span><br><span class="line">imageNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    imageNum += <span class="number">1</span></span><br><span class="line">    captureImage = ImageGrab.grab()  <span class="comment"># 抓取屏幕</span></span><br><span class="line">    frame = cv2.cvtColor(np.array(captureImage), cv2.COLOR_RGB2BGR)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 显示无图像的窗口</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;capturing&#x27;</span>, np.zeros((<span class="number">1</span>, <span class="number">255</span>), np.uint8))</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 控制窗口显示位置，方便通过按键方式退出</span></span><br><span class="line">    cv2.moveWindow(<span class="string">&#x27;capturing&#x27;</span>, height - <span class="number">100</span>, width - <span class="number">100</span>)  </span><br><span class="line">    <span class="keyword">if</span> imageNum &gt; fps * start:</span><br><span class="line">        video.write(frame)</span><br><span class="line">    <span class="comment"># 退出条件    </span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">50</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>) <span class="keyword">or</span> imageNum &gt; fps * end:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">video.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ctwy291314/article/details/91490759&quot;&gt;reference&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;dependence&quot;&gt;&lt;a href=&quot;#dependence&quot; clas</summary>
      
    
    
    
    <category term="Project_Yolo" scheme="http://example.com/categories/Project-Yolo/"/>
    
    
  </entry>
  
  <entry>
    <title>UEFI --- pci 遍历</title>
    <link href="http://example.com/2021/03/11/uefi/pci_device/"/>
    <id>http://example.com/2021/03/11/uefi/pci_device/</id>
    <published>2021-03-11T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="windows-上遍历PCI设备-Reference-Blog"><a href="#windows-上遍历PCI设备-Reference-Blog" class="headerlink" title="windows 上遍历PCI设备 | Reference Blog"></a>windows 上遍历PCI设备 | Reference <a href="https://blog.csdn.net/u013983194/article/details/46960147">Blog</a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> DWORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> WORD;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MK_PDI(bus,dev,func) (WORD)((bus&lt;&lt;8)|(dev&lt;&lt;3)|(func))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MK_PCIaddr(bus,dev,func) (DWORD)(0xf8000000L|(DWORD)MK_PDI(bus,dev,func)&lt;&lt;8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCI_CONFIG_ADDRESS 0xCF8 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PCI_CONFIG_DATA 0xCFC</span></span><br><span class="line"><span class="function">DWORD <span class="title">inpd</span><span class="params">(<span class="keyword">int</span> inport)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD data;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">&quot;mov dx,inport&quot;</span></span><br><span class="line">        <span class="string">&quot;lea bx,data&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x50&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0xED&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x89,0x07&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66,0x58&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outpd</span><span class="params">(<span class="keyword">int</span> outport,DWORD addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">&quot;mov dx,outport&quot;</span></span><br><span class="line">        <span class="string">&quot;lea bx,addr&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x50&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x8B, 0x07&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0xEF&quot;</span></span><br><span class="line">        <span class="string">&quot;-emit 0x66, 0x58&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD <span class="title">GetData</span><span class="params">(DWORD addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD data;</span><br><span class="line">    outpd(PCI_CONFIG_ADDRESS,addr);</span><br><span class="line">    data = inpd(PCI_CONFIG_DATA);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bus,dev,func;</span><br><span class="line">    DWORD addr,addr1,addr2,addr3;</span><br><span class="line">    DWORD data,data1,data2,data3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bus#\tDev#\tFunc#&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (bus = <span class="number">0</span>; bus &lt;= <span class="number">0x63</span>; ++bus)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (dev = <span class="number">0</span>; dev &lt;= <span class="number">0x1F</span>; ++dev)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (func = <span class="number">0</span>; func &lt;= <span class="number">0x7</span>; ++func)</span><br><span class="line">            &#123;</span><br><span class="line">                addr = MK_PCIaddr(bus,dev,func);</span><br><span class="line">                data = GetData(addr);</span><br><span class="line">                <span class="keyword">if</span>((WORD)data!=<span class="number">0xFFFF</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%2.2x\t%2.2x\t%2.2x\t&quot;</span>,bus,dev,func);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;windows-上遍历PCI设备-Reference-Blog&quot;&gt;&lt;a href=&quot;#windows-上遍历PCI设备-Reference-Blog&quot; class=&quot;headerlink&quot; title=&quot;windows 上遍历PCI设备 | Reference B</summary>
      
    
    
    
    <category term="uefi" scheme="http://example.com/categories/uefi/"/>
    
    
  </entry>
  
  <entry>
    <title>hack binary example</title>
    <link href="http://example.com/2021/03/09/liveoverflow/%E9%95%9C%E5%83%8F%E5%8A%A0%E5%AF%86%E9%AA%8C%E8%AF%81%E4%BE%8B%E5%AD%90/"/>
    <id>http://example.com/2021/03/09/liveoverflow/%E9%95%9C%E5%83%8F%E5%8A%A0%E5%AF%86%E9%AA%8C%E8%AF%81%E4%BE%8B%E5%AD%90/</id>
    <published>2021-03-09T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.067Z</updated>
    
    
    
    
    <category term="liveoverflow" scheme="http://example.com/categories/liveoverflow/"/>
    
    
  </entry>
  
  <entry>
    <title>gdb 调试常用命令备忘</title>
    <link href="http://example.com/2021/03/09/tool/gdb/"/>
    <id>http://example.com/2021/03/09/tool/gdb/</id>
    <published>2021-03-09T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.071Z</updated>
    
    <content type="html"><![CDATA[<p>disassemble    //gdb下使用可以查看汇编代码<br>disassemble /m 函数名      /m 源码和汇编一起排列<br>disassemble 不带参数，默认的反汇编范围是 所选择帧的pc附近的函数<br>单个参数, 就是pc, 当然也可以是函数名，因为函数名 也是一个 地址; <br>这样范围就是该pc附近的函数<br>两个参数，就是内存地址范围</p><p>使用display /i $pc（结合display命令和寄存器/pc内部变量）指令进行设置</p><p>info register查看寄存器的情况，可以简写成i r<br>主要是%eip、%eax、%esp和%ebp<br> 列出的结果主要有三行<br>    最左边是寄存器名称外，中间是寄存器存的值（也就是一个内存地址），右边是这个值对应的内存<br>    地址中的值。打印一下$eax可验证</p><p>si，ni：<br>    下一条语句遇到函数调用的时候，nexti不会跟踪进入函数，而是继续执行下面的语句，<br>    而step命令则会跟踪进入函数内部。<br>    si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指<br>    令，而s/n针对的是源代码。     <br>i代表指令（instruction）<br>     n(ext)i<br>     s(tep)i</p><p>$pc   代表pc程序计数器的值</p><p>set disassembly-flavor intel          gdb设置intel汇编 ，默认是att</p><p>print其实是有计数器的，每次print打印，其实都有一个类似count++在内部发生，<br>使用print $num 能显示第num个打印结果，如上，p $3   //查看第三个值<br>  (gdb)p i<br>  (gdb)p/a i<br>  (gdb)p/c i<br>  (gdb)p/f i<br>  (gdb)p/x i<br>  (gdb)p/o i<br>  (gdb)p/d i<br>  (gdb)p/t i              <br>    f浮点，c字符，t为二进制，o八，x十六，d十<br>    a和x同样是打印十六进制,不同名但同功能</p><p>调试运行中的程序：<br>   #ps -aux | grep execFile    //找到运行中的进程PID，<br>   使用<br>   #gdb execFile PID    <br>bt n(next)往下走是看不到已经运行完的错误的，所以就谈到bt（backtrace）命令——回溯。<br>info line main  //查看main的信息<br>   info line 0x…  //查看某一行信息<br>r是run的缩写     r 参数      以参数运行程序<br>quit,退出gdb调试<br>gdb -q 程序名      //这个操作可以不输出一些信息（gdb的一些版本信息说明之类的）   <br>gdb也支持运行linux命令的，可以在gdb的提示符中，输入shell，然后在输入你需要的命令就可以<br>了。例如：shell clear     清屏<br>b*0x…            //在逆向调试的时候，在某行指令下断点必须遵照这个格式  <br>x/i 可以查看指令<br>        例如： x/15i main  查看main函数中的第15条指令  <br> x/43bc 0xffffd190 指的是 0xffffd190后43个内存单元<br> <br>想边看汇编变调试就先：r 参数    ，然后使用layout asm，直接动态显示指令运行<br>       layout 几个参数：<br>               src   : Displays source and command windows.<br>               asm   : Displays disassembly and command windows.<br>               split : Displays source, disassembly and command windows.<br>               regs  : Displays register window. If existing layout<br>       c（continue）  可以让程序执行到下一个断点处<br>       p $eax   查看寄存器的值<br>       x/i $pc  查看当前指令的运行地址<br>修改寄存器值的两种方式(想要满足某个比较条件直接修改寄存器，可以跳到想跳的地方)：<br>      1)直接来：<br>               set $eax=value<br>      2)找到寄存器的地址通过这个地址修改值：<br>               p $rsp+0x714<br>               set *上一步的值=value      <br>x/  &lt;n/f/u&gt;  <addr>   //内存地址中的值，x即examine,3个参数顺序可变<br>     <br>   1)n是一个正整数，表示需要显示的内存单元的个数<br>   2)f表示显示的格式（有以下选项）：<br>       x （hexadecimal）按十六进制格式显示变量。 <br>       d （signed decimal）按十进制格式显示变量。 <br>       u （unsigned decimal）按十进制格式显示无符号整型。 <br>       o （octal）按八进制格式显示变量。 <br>       t （binary）按二进制格式显示变量。 <br>       a （address）按十六进制格式显示地址，并显示距离前继符号的偏移量(offset)。常用于定位未知 地址(变量)。 <br>       c （character）按字符格式显示变量。 <br>       f （floating）按浮点数格式显示变量。  <br>   3)u表示从当前地址往后请求的字节数单位，如果不指定的话，GDB默认是4个bytes：<br>       b表示单字节，<br>       h表示双字节，<br>       w表示四字节，<br>       g表示八字节   <br>x/10x $sp–&gt;打印stack的前10个元素   <br>reverse-stepi   //回退一条指令<br>info thread   // 查看所有线程</p><p>continue         执行到下一暂停点或程序结束。<br>next         执行一行源代码但不进入函数内部。<br>step        执行一行源代码而且进入函数内部。<br>gdb 运行程序<br>例子程序名为prog，则在终端输入 gdb prog<br>gdb 设置参数<br>set args 可指定运行时参数。（如：set args 10 20 30 40 50） <br>show args 命令可以查看设置好的运行参数。 <br>若要再次修改参数，可再执行一遍 set args<br>运行<br>输入 r 运行 <br>出错后，输入 bt 查看运行堆栈<br>退出<br>输入 quit</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;disassemble    //gdb下使用可以查看汇编代码&lt;br&gt;disassemble /m 函数名      /m 源码和汇编一起排列&lt;br&gt;disassemble 不带参数，默认的反汇编范围是 所选择帧的pc附近的函数&lt;br&gt;单个参数, 就是pc, 当然也可以是函</summary>
      
    
    
    
    <category term="tools" scheme="http://example.com/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>c 函数参数是怎么传递的，整个过程</title>
    <link href="http://example.com/2021/03/08/liveoverflow/c_example_param/"/>
    <id>http://example.com/2021/03/08/liveoverflow/c_example_param/</id>
    <published>2021-03-08T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.067Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="测试源码"><a href="#测试源码" class="headerlink" title="测试源码"></a>测试源码</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int test2(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">test</span>(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">  test2(6,7,8,9,10);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">  <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc,char *argv[])&#123;</span><br><span class="line">    <span class="built_in">test</span>(1,2,3,4,5);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line">xhlu@BU-build-XHLU /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span></span><br><span class="line">$ gdb a.exe</span><br><span class="line">GNU gdb (GDB) (Cygwin 9.2-1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">&quot;show copying&quot;</span> and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-pc-cygwin&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from a.exe...</span><br><span class="line">(gdb) b main.c:16</span><br><span class="line">Breakpoint 1 at 0x10040114b: file main.c, line 16.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span>/a.exe</span><br><span class="line">[New Thread 8624.0xf8]</span><br><span class="line">[New Thread 8624.0x2404]</span><br><span class="line">[New Thread 8624.0x1560]</span><br><span class="line">[New Thread 8624.0x13b0]</span><br><span class="line"></span><br><span class="line">Thread 1 <span class="string">&quot;a&quot;</span> hit Breakpoint 1, main (argc=1, argv=0xffffcc60) at main.c:16</span><br><span class="line">16          <span class="built_in">test</span>(1,2,3,4,5);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x0000000100401137 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401138 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x000000010040113b &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x000000010040113f &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x0000000100401142 &lt;+11&gt;:    mov    %rdx,0x18(%rbp)</span><br><span class="line">   0x0000000100401146 &lt;+15&gt;:    callq  0x100401190 &lt;__main&gt;</span><br><span class="line">=&gt; 0x000000010040114b &lt;+20&gt;:    movl   <span class="variable">$0x5</span>,0x20(%rsp)</span><br><span class="line">   0x0000000100401153 &lt;+28&gt;:    mov    <span class="variable">$0x4</span>,%r9d</span><br><span class="line">   0x0000000100401159 &lt;+34&gt;:    mov    <span class="variable">$0x3</span>,%r8d</span><br><span class="line">   0x000000010040115f &lt;+40&gt;:    mov    <span class="variable">$0x2</span>,%edx</span><br><span class="line">   0x0000000100401164 &lt;+45&gt;:    mov    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">   0x0000000100401169 &lt;+50&gt;:    callq  0x1004010ca &lt;<span class="built_in">test</span>&gt;</span><br><span class="line">   0x000000010040116e &lt;+55&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401173 &lt;+60&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401177 &lt;+64&gt;:    pop    %rbp</span><br><span class="line">   0x0000000100401178 &lt;+65&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) s</span><br><span class="line"><span class="built_in">test</span> (a=1, b=2, c=3, d=4, e=5) at main.c:10</span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">(gdb) l</span><br><span class="line">5         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">6         <span class="built_in">return</span> 0;</span><br><span class="line">7       &#125;</span><br><span class="line">8</span><br><span class="line">9       int <span class="built_in">test</span>(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">11        <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">12        <span class="built_in">return</span> 0;</span><br><span class="line">13      &#125;</span><br><span class="line">14</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> <span class="built_in">test</span>:</span><br><span class="line">   0x00000001004010ca &lt;+0&gt;:     push   %rbp              将被调函数的main栈帧栈底地址放入bp寄存器中,此时我们看到的就是函数<span class="built_in">test</span>的栈帧</span><br><span class="line">   0x00000001004010cb &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000001004010ce &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010d2 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)   将一会要用到的core寄存器压栈 ， ？为什么不把函数参数直接压栈呢，非要用core寄存器 ？</span><br><span class="line">   0x00000001004010d5 &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x00000001004010d8 &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x00000001004010dc &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">=&gt; 0x00000001004010e0 &lt;+22&gt;:    movl   <span class="variable">$0xa</span>,0x20(%rsp)   如下6/7/8/9参数被放到了 core 寄存器中，0xa 被压入栈中</span><br><span class="line">   0x00000001004010e8 &lt;+30&gt;:    mov    <span class="variable">$0x9</span>,%r9d</span><br><span class="line">   0x00000001004010ee &lt;+36&gt;:    mov    <span class="variable">$0x8</span>,%r8d</span><br><span class="line">   0x00000001004010f4 &lt;+42&gt;:    mov    <span class="variable">$0x7</span>,%edx</span><br><span class="line">   0x00000001004010f9 &lt;+47&gt;:    mov    <span class="variable">$0x6</span>,%ecx</span><br><span class="line">   0x00000001004010fe &lt;+52&gt;:    callq  0x100401080 &lt;test2&gt;</span><br><span class="line">   0x0000000100401103 &lt;+57&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401106 &lt;+60&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x0000000100401109 &lt;+63&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040110c &lt;+66&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x0000000100401110 &lt;+70&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x0000000100401113 &lt;+73&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x0000000100401117 &lt;+77&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x000000010040111a &lt;+80&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x000000010040111d &lt;+83&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x0000000100401120 &lt;+86&gt;:    lea    0x1ed9(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x0000000100401127 &lt;+93&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x000000010040112c &lt;+98&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401131 &lt;+103&gt;:   add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401135 &lt;+107&gt;:   pop    %rbp</span><br><span class="line">   0x0000000100401136 &lt;+108&gt;:   retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) s</span><br><span class="line">[New Thread 8624.0x1d34]</span><br><span class="line">test2 (a=6, b=7, c=8, d=9, e=10) at main.c:5</span><br><span class="line">5         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">=&gt; 0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line">[New Thread 8624.0x24b0]</span><br><span class="line">6, 7, 8, 9, 10</span><br><span class="line">6         <span class="built_in">return</span> 0;</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">=&gt; 0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line">7       &#125;</span><br><span class="line">(gdb) l</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4       int test2(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">5         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">6         <span class="built_in">return</span> 0;</span><br><span class="line">7       &#125;</span><br><span class="line">8</span><br><span class="line">9       int <span class="built_in">test</span>(int a, int b , int c, int d , int e)&#123;</span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">11        <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">=&gt; 0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="built_in">test</span> (a=1, b=2, c=3, d=4, e=5) at main.c:11</span><br><span class="line">11        <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> <span class="built_in">test</span>:</span><br><span class="line">   0x00000001004010ca &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x00000001004010cb &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000001004010ce &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010d2 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x00000001004010d5 &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x00000001004010d8 &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x00000001004010dc &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x00000001004010e0 &lt;+22&gt;:    movl   <span class="variable">$0xa</span>,0x20(%rsp)</span><br><span class="line">   0x00000001004010e8 &lt;+30&gt;:    mov    <span class="variable">$0x9</span>,%r9d</span><br><span class="line">   0x00000001004010ee &lt;+36&gt;:    mov    <span class="variable">$0x8</span>,%r8d</span><br><span class="line">   0x00000001004010f4 &lt;+42&gt;:    mov    <span class="variable">$0x7</span>,%edx</span><br><span class="line">   0x00000001004010f9 &lt;+47&gt;:    mov    <span class="variable">$0x6</span>,%ecx</span><br><span class="line">   0x00000001004010fe &lt;+52&gt;:    callq  0x100401080 &lt;test2&gt;</span><br><span class="line">=&gt; 0x0000000100401103 &lt;+57&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401106 &lt;+60&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x0000000100401109 &lt;+63&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040110c &lt;+66&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x0000000100401110 &lt;+70&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x0000000100401113 &lt;+73&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x0000000100401117 &lt;+77&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x000000010040111a &lt;+80&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x000000010040111d &lt;+83&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x0000000100401120 &lt;+86&gt;:    lea    0x1ed9(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x0000000100401127 &lt;+93&gt;:    callq  0x1004011a0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x000000010040112c &lt;+98&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401131 &lt;+103&gt;:   add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401135 &lt;+107&gt;:   pop    %rbp</span><br><span class="line">   0x0000000100401136 &lt;+108&gt;:   retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) n</span><br><span class="line">1, 2, 3, 4, 5</span><br><span class="line">12        <span class="built_in">return</span> 0;</span><br><span class="line">(gdb) n</span><br><span class="line">13      &#125;</span><br><span class="line">(gdb) n</span><br><span class="line">main (argc=1, argv=0xffffcc60) at main.c:17</span><br><span class="line">17          <span class="built_in">return</span> 0;</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x0000000100401137 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401138 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x000000010040113b &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x000000010040113f &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x0000000100401142 &lt;+11&gt;:    mov    %rdx,0x18(%rbp)</span><br><span class="line">   0x0000000100401146 &lt;+15&gt;:    callq  0x100401190 &lt;__main&gt;</span><br><span class="line">   0x000000010040114b &lt;+20&gt;:    movl   <span class="variable">$0x5</span>,0x20(%rsp)</span><br><span class="line">   0x0000000100401153 &lt;+28&gt;:    mov    <span class="variable">$0x4</span>,%r9d</span><br><span class="line">   0x0000000100401159 &lt;+34&gt;:    mov    <span class="variable">$0x3</span>,%r8d</span><br><span class="line">   0x000000010040115f &lt;+40&gt;:    mov    <span class="variable">$0x2</span>,%edx</span><br><span class="line">   0x0000000100401164 &lt;+45&gt;:    mov    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">   0x0000000100401169 &lt;+50&gt;:    callq  0x1004010ca &lt;<span class="built_in">test</span>&gt;</span><br><span class="line">=&gt; 0x000000010040116e &lt;+55&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x0000000100401173 &lt;+60&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401177 &lt;+64&gt;:    pop    %rbp</span><br><span class="line">   0x0000000100401178 &lt;+65&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用bt列出函数栈，使用frame n 查看栈帧，就可以看到出问题时候的函数回溯了，很方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">xhlu@bu-build-XHLU /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span></span><br><span class="line">$ gdb a.exe</span><br><span class="line">GNU gdb (GDB) (Cygwin 9.2-1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">&quot;show copying&quot;</span> and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-pc-cygwin&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from a.exe...</span><br><span class="line">(gdb) b main.c:3</span><br><span class="line">Breakpoint 1 at 0x100401096: file main.c, line 4.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /cygdrive/c/Users/xhlu/Desktop/pri_xx/<span class="built_in">test</span>/a.exe</span><br><span class="line">[New Thread 4068.0xbdc]</span><br><span class="line">[New Thread 4068.0x18d8]</span><br><span class="line">[New Thread 4068.0x1664]</span><br><span class="line">[New Thread 4068.0x2610]</span><br><span class="line"></span><br><span class="line">Thread 1 <span class="string">&quot;a&quot;</span> hit Breakpoint 1, test2 (a=6, b=7, c=8, d=9, e=10) at main.c:4</span><br><span class="line">4         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  test2 (a=6, b=7, c=8, d=9, e=10) at main.c:4</span></span><br><span class="line"><span class="comment">#1  0x000000010040110a in test (a=1, b=2, c=3, d=4, e=5) at main.c:10</span></span><br><span class="line"><span class="comment">#2  0x0000000100401173 in main (argc=1, argv=0xffffcc60) at main.c:16</span></span><br><span class="line">(gdb) frame 0</span><br><span class="line"><span class="comment">#0  test2 (a=6, b=7, c=8, d=9, e=10) at main.c:4</span></span><br><span class="line">4         <span class="built_in">printf</span>(<span class="string">&quot;%d, %d, %d, %d, %d\n&quot;</span>, a,b,c,d,e);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> test2:</span><br><span class="line">   0x0000000100401080 &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x0000000100401081 &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401084 &lt;+4&gt;:     sub    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x0000000100401088 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x000000010040108b &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x000000010040108e &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x0000000100401092 &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">=&gt; 0x0000000100401096 &lt;+22&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x0000000100401099 &lt;+25&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x000000010040109c &lt;+28&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x000000010040109f &lt;+31&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x00000001004010a3 &lt;+35&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x00000001004010a6 &lt;+38&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x00000001004010aa &lt;+42&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x00000001004010ad &lt;+45&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x00000001004010b0 &lt;+48&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x00000001004010b3 &lt;+51&gt;:    lea    0x1f46(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x00000001004010ba &lt;+58&gt;:    callq  0x1004011b0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x00000001004010bf &lt;+63&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x00000001004010c4 &lt;+68&gt;:    add    <span class="variable">$0x30</span>,%rsp</span><br><span class="line">   0x00000001004010c8 &lt;+72&gt;:    pop    %rbp</span><br><span class="line">   0x00000001004010c9 &lt;+73&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) frame 1</span><br><span class="line"><span class="comment">#1  0x000000010040110a in test (a=1, b=2, c=3, d=4, e=5) at main.c:10</span></span><br><span class="line">10        test2(6,7,8,9,10);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> <span class="built_in">test</span>:</span><br><span class="line">   0x00000001004010ca &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x00000001004010cb &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x00000001004010ce &lt;+4&gt;:     sub    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x00000001004010d2 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x00000001004010d5 &lt;+11&gt;:    mov    %edx,0x18(%rbp)</span><br><span class="line">   0x00000001004010d8 &lt;+14&gt;:    mov    %r8d,0x20(%rbp)</span><br><span class="line">   0x00000001004010dc &lt;+18&gt;:    mov    %r9d,0x28(%rbp)</span><br><span class="line">   0x00000001004010e0 &lt;+22&gt;:    movl   <span class="variable">$0xc</span>,-0x4(%rbp)</span><br><span class="line">   0x00000001004010e7 &lt;+29&gt;:    movl   <span class="variable">$0xa</span>,0x20(%rsp)</span><br><span class="line">   0x00000001004010ef &lt;+37&gt;:    mov    <span class="variable">$0x9</span>,%r9d</span><br><span class="line">   0x00000001004010f5 &lt;+43&gt;:    mov    <span class="variable">$0x8</span>,%r8d</span><br><span class="line">   0x00000001004010fb &lt;+49&gt;:    mov    <span class="variable">$0x7</span>,%edx</span><br><span class="line">   0x0000000100401100 &lt;+54&gt;:    mov    <span class="variable">$0x6</span>,%ecx</span><br><span class="line">   0x0000000100401105 &lt;+59&gt;:    callq  0x100401080 &lt;test2&gt;</span><br><span class="line">=&gt; 0x000000010040110a &lt;+64&gt;:    mov    0x20(%rbp),%ecx</span><br><span class="line">   0x000000010040110d &lt;+67&gt;:    mov    0x18(%rbp),%edx</span><br><span class="line">   0x0000000100401110 &lt;+70&gt;:    mov    0x30(%rbp),%eax</span><br><span class="line">   0x0000000100401113 &lt;+73&gt;:    mov    %eax,0x28(%rsp)</span><br><span class="line">   0x0000000100401117 &lt;+77&gt;:    mov    0x28(%rbp),%eax</span><br><span class="line">   0x000000010040111a &lt;+80&gt;:    mov    %eax,0x20(%rsp)</span><br><span class="line">   0x000000010040111e &lt;+84&gt;:    mov    %ecx,%r9d</span><br><span class="line">   0x0000000100401121 &lt;+87&gt;:    mov    %edx,%r8d</span><br><span class="line">   0x0000000100401124 &lt;+90&gt;:    mov    0x10(%rbp),%edx</span><br><span class="line">   0x0000000100401127 &lt;+93&gt;:    lea    0x1ed2(%rip),%rcx        <span class="comment"># 0x100403000</span></span><br><span class="line">   0x000000010040112e &lt;+100&gt;:   callq  0x1004011b0 &lt;<span class="built_in">printf</span>&gt;</span><br><span class="line">   0x0000000100401133 &lt;+105&gt;:   mov    -0x4(%rbp),%eax</span><br><span class="line">   0x0000000100401136 &lt;+108&gt;:   add    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x000000010040113a &lt;+112&gt;:   pop    %rbp</span><br><span class="line">   0x000000010040113b &lt;+113&gt;:   retq</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) frame 2</span><br><span class="line"><span class="comment">#2  0x0000000100401173 in main (argc=1, argv=0xffffcc60) at main.c:16</span></span><br><span class="line">16          int xh = <span class="built_in">test</span>(1,2,3,4,5);</span><br><span class="line">(gdb) disassemble</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x000000010040113c &lt;+0&gt;:     push   %rbp</span><br><span class="line">   0x000000010040113d &lt;+1&gt;:     mov    %rsp,%rbp</span><br><span class="line">   0x0000000100401140 &lt;+4&gt;:     sub    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x0000000100401144 &lt;+8&gt;:     mov    %ecx,0x10(%rbp)</span><br><span class="line">   0x0000000100401147 &lt;+11&gt;:    mov    %rdx,0x18(%rbp)</span><br><span class="line">   0x000000010040114b &lt;+15&gt;:    callq  0x1004011a0 &lt;__main&gt;</span><br><span class="line">   0x0000000100401150 &lt;+20&gt;:    movl   <span class="variable">$0x5</span>,0x20(%rsp)</span><br><span class="line">   0x0000000100401158 &lt;+28&gt;:    mov    <span class="variable">$0x4</span>,%r9d</span><br><span class="line">   0x000000010040115e &lt;+34&gt;:    mov    <span class="variable">$0x3</span>,%r8d</span><br><span class="line">   0x0000000100401164 &lt;+40&gt;:    mov    <span class="variable">$0x2</span>,%edx</span><br><span class="line">   0x0000000100401169 &lt;+45&gt;:    mov    <span class="variable">$0x1</span>,%ecx</span><br><span class="line">   0x000000010040116e &lt;+50&gt;:    callq  0x1004010ca &lt;<span class="built_in">test</span>&gt;</span><br><span class="line">=&gt; 0x0000000100401173 &lt;+55&gt;:    mov    %eax,-0x4(%rbp)</span><br><span class="line">   0x0000000100401176 &lt;+58&gt;:    mov    <span class="variable">$0x0</span>,%eax</span><br><span class="line">   0x000000010040117b &lt;+63&gt;:    add    <span class="variable">$0x40</span>,%rsp</span><br><span class="line">   0x000000010040117f &lt;+67&gt;:    pop    %rbp</span><br><span class="line">   0x0000000100401180 &lt;+68&gt;:    retq</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;测试源码&quot;&gt;&lt;a href=&quot;#测试源码&quot; class=&quot;headerlink&quot; title=&quot;测试源码&quot;&gt;&lt;/a&gt;测试源码&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="liveoverflow" scheme="http://example.com/categories/liveoverflow/"/>
    
    
  </entry>
  
  <entry>
    <title>vscode 插件记录</title>
    <link href="http://example.com/2021/03/02/vscode/%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2021/03/02/vscode/%E6%8F%92%E4%BB%B6/</id>
    <published>2021-03-02T00:00:00.000Z</published>
    <updated>2021-09-08T18:16:42.075Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="scope4code"><a href="#scope4code" class="headerlink" title="scope4code"></a>scope4code</h3><hr><hr><h3 id="ccls"><a href="#ccls" class="headerlink" title="ccls"></a>ccls</h3><hr><hr><h3 id="c-c"><a href="#c-c" class="headerlink" title="c/c++"></a>c/c++</h3><hr><hr><h3 id="eclipse-keymap"><a href="#eclipse-keymap" class="headerlink" title="eclipse keymap"></a>eclipse keymap</h3><hr><hr><h3 id="git-history"><a href="#git-history" class="headerlink" title="git history"></a>git history</h3><hr><hr><h3 id="gitlens"><a href="#gitlens" class="headerlink" title="gitlens"></a>gitlens</h3><hr><hr><h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;scope4code&quot;&gt;&lt;a href=&quot;#scope4code&quot; class=&quot;headerlink&quot; title=&quot;scope4code&quot;&gt;&lt;/a&gt;scope4code&lt;/h3&gt;&lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;ccls&quot;&gt;&lt;a href=&quot;#cc</summary>
      
    
    
    
    <category term="vscode" scheme="http://example.com/categories/vscode/"/>
    
    
  </entry>
  
</feed>
